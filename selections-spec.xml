<?xml version='1.0' encoding='utf-8'?>
<html lang="en">

<h2>Selections file format specification</h2>

<p>
  This document describes the format of 0install's XML selections documents. A selections document contains all the information needed
  to launch a program. 0install generates a selections document by collecting information from multiple <a href='interface-spec.html'>feeds</a>
  and then running a <a href='solver.html'>solver</a> to choose the best combination of components.
</p>

<p>
  For example, to generate the selections document for the ROX Edit application:
</p>

<pre>
  $ 0install select --xml http://rox.sourceforge.net/2005/interfaces/Edit
</pre>

<p>
  For an <a href='user-guide-apps.html'>app</a>, <i>foo</i>, the current selections can be found in <b>~/.config/0install.net/apps/foo/selections.xml</b>. For binaries generated by <a href='0compile.html'>0compile</a>, the selections used to build it can be found in the <b>0install</b> directory of the binary package, in the <b>build-environment.xml</b> file.
</p>

<p>
  Changes to this document (and to the rest of the web-site) are <a href='https://sourceforge.net/p/zero-install/code/commit_browser'>tracked using Git</a>.
</p>

<h2>Contents</h2>
<toc level='h2'/>

<h2 id='intro'>&lt;selections&gt;</h2>

<p>
  A selections document contains a set of selections, one per selected interface.
</p>

<pre>
&lt;?xml version="1.0" ?>
&lt;selections
    xmlns="http://zero-install.sourceforge.net/2004/injector/interface"
    interface="..."
    command="..." ?
    source="true|false" ? >

  [ selection ] +
&lt;/selections>
</pre>

<dl>
  <dt>interface</dt>
  <dd>The URI of the main program being run (e.g. "http://rox.sourceforge.net/2005/interfaces/Edit").</dd>

  <dt>command</dt>
  <dd>The name of the (optional) &lt;command&gt; to run on the main program (e.g. "run").</dd>

  <dt>source</dt>
  <dd>Indicates whether the root is source or binary (since 0install 2.8). This is useful if implementations of both are present.</dd>
</dl>

<h3>Historical notes</h3>

<p>
  Before 0install 1.2, there was no <b>command</b> attribute on the root. Instead, the root &lt;selections&gt; element
  also contained a set of &lt;command&gt; elements as direct children. The first &lt;command&gt; was for the main interface,
  the second was for its &lt;runner&gt; and so on. In later versions, the commands go inside their &lt;selection&gt; elements,
  which is needed to support executable bindings.
</p>

<p>
  Before 0install 0.51, there were no commands at all. Instead, the &lt;selection&gt; for the main interface had a <b>main</b>
  attribute which was used (the command should be treated as "run" in this case).
</p>

<h2>&lt;selection&gt;</h2>

<pre>
&lt;selection
      interface="..."
      from-feed="..." ?
      local-path="..." ?
      quick-test-file="..." ?
      requires-compilation="true" ?
      ... >
    [ dependencies ]
    [ bindings ]
    [ digests ]
    [ commands ]
&lt;/selection>
</pre>

<dl>
  <dt>interface</dt>
  <dd>Indicates that this is the selected implementation of this interface.</dd>

  <dt>from-feed</dt>
  <dd>The URL of the feed which provided this implementation. If missing, use the value of <b>interface</b>.</dd>

  <dt>local-path</dt>
  <dd>For <a href='local-feeds.html'>local implementations</a>, this is the path of the directory containing the implementation.</dd>

  <dt>quick-test-file</dt>
  <dd>A file which, if present, indicates that the selection is still valid. This is sometimes used with distribution-provided selections. If not present and the ID starts with "package:", you'll need to query the distribution's package manager to check that this version is still installed.</dd>

  <dt>requires-compilation</dt>
  <dd>
    If present, this attribute indicates that the selection does not yet exist, but could be compiled from the source implementation with the same <b>id</b>. Such selections can be generated when using <b>0install select --may-compile</b> (0install >= 2.9).
  </dd>

  <dt>Other attributes</dt>
  <dd>All attributes from the selected &lt;implementation&gt; are included on the &lt;selection&gt;, except for <b>stability</b> and
    the deprecated <b>main</b> and <b>self-test</b> attributes, which were replaced by commands. The most useful ones are <b>id</b> and <b>version</b>.</dd>
</dl>

<p>
  The <b>dependencies</b>, <b>bindings</b>, <b>digests</b> and <b>commands</b> are defined in the <a href='interface-spec.html'>feed
    specification</a>. &lt;restricts&gt; elements are not included.
</p>

<p>
  As in feed files, the <b>id</b> may also be used as a digest or a local path in older documents. See the feed specification for details.
</p>

<h2>Executing the selections</h2>

<p>
  0install performs the following steps when running an app:
</p>

<ol>
  <li>Load the saved selections XML (or do an update if missing).</li>
  <li>Check that they are valid and up-to-date.</li>
  <li>Process all the bindings to set up the new environment.</li>
  <li>Build the command line arguments, starting with the main command and following the chain of &lt;runner&gt;s.</li>
  <li>Exec the new process.</li>
</ol>

<h3>Checking the selections are up-to-date</h3>

<p>
  This is how 0install checks the selections for an app before running them:
</p>

<ol>
  <li><p>If any input files have changed or disappeared since the solver last ran, we re-run the solver. The files checked are:</p>
    <ul>
      <li>The previously selected feed files (local or cached).</li>
      <li>Configuration files for the selected interfaces (e.g. preferred stability).</li>
      <li>The global configuration file (e.g. preferred stability).</li>
    </ul>
    <p>0install currently ignores feeds and interfaces which were considered but not selected.</p>
  </li>

  <li><p>If any selections are no longer present, we rerun the solver. For distribution packages, we check that the version hasn't changed.</p></li>

  <li><p>If it has been a while since we checked for updates, we trigger a background update but run the current selections anyway.</p></li>
</ol>

<h3>Processing bindings</h3>

<p>
  For each &lt;selection&gt;, 0install will:
</p>

<ol>
  <li>Process all bindings directly inside the &lt;selection&gt;.</li>
  <li>Process all dependencies directly inside the &lt;selection&gt;:
    <ol>
      <li>Find the selection for the required interface (note: may be missing for non-essential dependencies).</li>
      <li>Process all bindings inside the dependency.</li>
    </ol>
  </li>
  <li>Process all commands directly inside the &lt;selection&gt;:
    <ol>
      <li>Process all bindings inside the command.</li>
      <li>Process all dependencies inside the command, including their bindings (as above) and also including any &lt;runner&gt;.</li>
    </ol>
  </li>
</ol>

<p>
  Having located all the bindings:
</p>

<ol>
  <li>Calculate the environment for the new process by expanding all &lt;environment&gt; bindings.</li>
  <li>Process all &lt;executable-in-var&gt; and &lt;executable-in-path&gt; bindings. Note: you must do this after expanding all other
    environment variables because of $-expansion in &lt;arg&gt;.</li>
</ol>

<p>
  A binding directly inside a &lt;selection&gt; or &lt;command&gt; binds a selection to itself (e.g. a Python library may wish to add itself to PYTHONPATH). Bindings inside dependencies bind to the dependency (e.g. a Python program may wish to add a library to PYTHONPATH).
</p>

<p>
  A distribution-provided selection does not have a path, and so any &lt;environment&gt; bindings for it are skipped (e.g. it's up to the
  distribution package manager to ensure that Python libraries it provides are in the default search path).
</p>

<h2>Future plans</h2>

<p>
  Indexing the selections by interface URI is a bit restrictive. Once we get scoping, we'll need to cope with e.g. a Python 2 program
  that depends on a Python 3 program, which will require two different selections for the Python interface.
</p>

</html>
