<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>0publish: Scripting the release process</h2>

<p>
Making a new release of your software can be time consuming and error-prone, so you'll probably want to script
as much as possible of it. The <a href='0publish.html'>0publish</a> command provides a set of useful transformations
for interface files which you can integrate into your release scripts.
</p>

<p>
This guide assumes you've already read <a href='injector-packagers.html'>the packaging guide</a>, which
explains how to create interface files manually. We won't explain all the concepts in detail again, we'll
just show how to script the steps.
</p>

<toc level='h2'/>

<h2>General operation</h2>

<p>
<b>0publish</b> edits interface files in place. It loads the file, transforms it in some way (such as
setting the release date, or adding a new implementation) and then writes it back out again. If the input
file was signed, it will resign it when saving with the same key by default. You can also use it to add a
signature, or to change the signing key.
</p>

<p>You can create an alias for <b>0publish</b> in the usual way, to save typing:</p>
<pre>
$ <b>0alias 0publish http://0install.net/2006/interfaces/0publish</b>
</pre>

<h2>Creating a binary of ROX-Filer</h2>

<p>
For this example we'll compile a binary of ROX-Filer for our platform (we'll assume there isn't
one already) and make a feed for other people with the same platform (I'll use ppc64 for the examples).
Start by creating an archive as normal:
</p>

<ol>
<li>Download the ROX-Filer source release (and detached signature):
<pre>
$ <b>wget http://heanet.dl.sourceforge.net/sourceforge/rox/rox-2.4.1.tgz</b>
$ <b>wget http://heanet.dl.sourceforge.net/sourceforge/rox/rox-2.4.1.tgz.sig</b>
$ <b>gpg rox-2.4.1.tgz.sig</b>
gpg: Signature made Fri 30 Dec 2005 17:32:53 GMT using DSA key ID 59A53CC1
gpg: Good signature from "Thomas Leonard &lt;...&gt;"
</pre>
</li>

<li>Build as normal:
<pre>
$ <b>tar xzf rox-2.4.1.tgz</b>
$ <b>cd rox-2.4.1</b>
$ <b>./ROX-Filer/AppRun --compile</b>
</pre>
</li>
<li>Delete the debugging symbols and the <b>build</b> and <b>src</b> directories to save space:
<pre>
$ <b>rm -r ROX-Filer/{ROX-Filer.dbg,build,src}</b>
</pre>
</li>
<li>Set the release date and architecture:
<pre>
$ <b>0publish --set-released 2006-02-26 ROX-Filer.xml</b>
$ <b>0publish --set-arch Linux-ppc64 ROX-Filer.xml</b>
</pre>
</li>
<li>Edit <b>ROX-Filer.xml</b> to change the name and description if you want. The file should now look like this:
<pre><![CDATA[
<?xml version='1.0'?>
<interface xmlns='http://zero-install.sourceforge.net/2004/injector/interface'>
  <name>ROX-Filer-ppc64</name>
  <summary>PPC64 binaries for ROX-Filer</summary>
  <description>
    ROX-Filer is a fast and powerful graphical file manager. It has full drag-and-drop support
    and background file operations, and is highly configurable. It can also act as a pinboard,
    allowing you to pin frequently used files to the desktop background.
  </description>
  <feed-for interface='http://rox.sourceforge.net/2005/interfaces/ROX-Filer'/>
  <group main='ROX-Filer/AppRun'>
    <implementation id="." version="2.4.1" ]]><b>released='2006-02-26' arch='Linux-ppc64'</b><![CDATA[/>
  </group>
</interface>
]]></pre>
</li>
<li>Add the architecture to the directory name and tar it all up:
<pre>
$ <b>cd ..</b>
$ <b>mv rox{,-linux-ppc64}-2.4.1</b>
$ <b>tar czf rox-linux-ppc64-2.4.1{.tgz,}</b>
</pre>
</li>
<li>Upload it somewhere. I'll assume <b>http://example.org/rox-linux-ppc64-2.4.1.tgz</b> in
the following examples.</li>
</ol>

<h2>Adding the archive to the interface</h2>

<p>
To make our new binary available through Zero Install:
</p>

<ol id='archive'>
<li>Take a copy of the local interface from the archive. We'll use <b>0publish</b> to change
the <b>id</b> from '<b>.</b>' to the archive's digest and to add an &lt;archive&gt; element:
<pre>
$ <b>cp rox-linux-ppc64-2.4.1/ROX-Filer.xml ROX-Filer-ppc64</b>
$ <b>0publish ROX-Filer-ppc64 \
    --archive-url http://example.org/rox-linux-ppc64-2.4.1.tgz  \
    --archive-file rox-linux-ppc64-2.4.1.tgz \
    --archive-extract rox-linux-ppc64-2.4.1</b>
</pre>
The local file is used by <b>0publish</b> to get the size and manifest digest. The extract
value is used as the &lt;archive&gt;'s extract attribute (see the packaging guide for details).
</li>

</ol>

<p>
If you now view the <b>ROX-Filer-ppc64</b> file, you should see that <b>0publish</b> has
converted the old &lt;implementation&gt; to give the digest and download location:
</p>

<pre><![CDATA[
  <group main="ROX-Filer/AppRun">
    <implementation arch="Linux-ppc64" id="sha1=2bce88f31415898760373fff900890a8719ab1e6" released="2006-02-26" version="2.4.1">
      <archive extract="rox-linux-ppc64-2.4.1" href="http://example.org/rox-linux-ppc64-2.4.1.tgz" size="1375566"/>
    </implementation>
  </group>
]]></pre>

<p>
You should be able to download and test your binary with this command:
</p>
<pre>
$ <b>0launch ./ROX-Filer-ppc64</b>
</pre>

<h2>Publishing the interface with Zero Install</h2>

<ol>
<li>Set the uri at the top of the file to whereever you're going to upload it:
<pre><![CDATA[
<?xml version="1.0" ?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface"
	   ]]><b>uri='http://example.com/2006/0launch/ROX-Filer-ppc'</b><![CDATA[>
]]></pre>
<p>TODO: 0publish should have a working <b>--local</b> option!</p>
</li>

<li>Sign and upload the interface (see the <a href='injector-packagers.html'>packaging guide</a>
for information about creating, exporting and uploading your GPG key):
<pre>
$ <b>0publish --gpgsign ROX-Filer-ppc64</b>
$ <b>mv ROX-Filer-ppc64 /var/www/...</b>
</pre>
</li>
</ol>

<p>
Other users of ppc64 machines can now either run this directly, or add it as a feed (so it will
be used by other programs trying to run ROX-Filer):
</p>

<pre>
$ <b>0launch --feed http://example.com/2006/0launch/ROX-Filer-ppc</b>
</pre>

<p>
You should now tell the maintainer of the master feed about this one, so that they can
add a &lt;feed&gt; element to the master copy to save from having to add the feed manually.
</p>

<h2>0publish reference</h2>

<b>Usage: 0publish [options] interface</b>

<h3>Options</h3>

<dl>
  <dt>-h, --help</dt><dd>Show help message and exit.</dd>
  <dt>--archive-url=URL, --archive-file=FILE, --archive-extract=DIR</dt>
  <dd>Change a local implementation to one with a digest and an archive.
  See <a href='#archive'>adding an archive</a> for an example.</dd>
  <dt>-e, --edit</dt><dd>Edit with $EDITOR. This is useful if the file is signed, since
  it removes the signature at the start and resigns at the end. It also checks that the
  new interface is valid before overwriting the old copy.</dd>
  <dt>-g, --gpgsign</dt><dd>Add a GPG signature block. All remote interfaces must be signed.</dd>
  <dt>-kKEY, --key=KEY</dt><dd>Key to use for signing (if you have more than one, or if you want to
  resign with a different key).</dd>
  <dt>-lLOCAL, --local=LOCAL</dt><dd>Create or update a feed from local interface. Not yet implemented.</dd>
  <dt>--set-id=DIGEST</dt><dd>Set the implementation ID.
  Note: it's usually easier to use the <b>--archive-*</b> options.</dd>
  <dt>--set-released=DATE</dt><dd>Set the release date.
  Typically used as <b>0publish --set-released `date +%F` interface</b>, which sets today's date.</dd>
  <dt>--set-stability=STABILITY</dt><dd>Set the stability rating.</dd>
  <dt>--set-version=VERSION</dt><dd>Set the version number (used when making a release from CVS).</dd>
  <dt>-s, --stable</dt><dd>Mark the current testing version as stable.</dd>
  <dt>-x, --xmlsign</dt><dd>Add an XML signature block. This is the new signature format, but is not
  widely supported yet, so stick with <b>--gpgsign</b> for now.</dd>
  <dt>-v, --verbose</dt><dd>More verbose output (for debugging).</dd>
  <dt>-V, --version</dt><dd>Display version information.</dd>
</dl>

</html>
