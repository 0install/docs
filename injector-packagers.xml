<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>The Injector: Packaging Guide</h2>

<p>
This guide shows how to make software available through <a href="injector.html">the injector</a>.
Our example package will be <a href="http://www.hayber.us/rox/Find">Find</a>, a little
utility for searching for files.
</p>

<p>
You should already be familiar with the general operation of the injector. In not, start by reading
the <a href='injector-using.html'>user tutorial</a> and the <a href='injector-design.html'>design overview</a>.
</p>

<toc level='h2'/>

<h2>Running Find directly</h2>

<p>
Start by downloading <a href='http://www.hayber.us/rox/find/Find-006.tgz'>Find-006</a>. This is just a
normal application, not specially designed for the injector. If you try to run it, you should get an
error:
</p>

<pre>
$ <b>wget http://www.hayber.us/rox/find/Find-006.tgz</b>
$ <b>tar xzf Find-006.tgz</b>
$ <b>cd Find</b>
$ <b>./AppRun</b>
*** This program needs ROX-Lib2 (version 2.0.0) to run.
</pre>

<p>
Note: If it runs without an error, then either you've installed ROX-Lib
manually (not using the injector) or your PYTHONPATH already points to it.
</p>

<p>
To be able to run it and have its dependencies downloaded automatically, we
need to tell it how to find the libraries it needs. We do this by creating an
<i>interface file</i>...
</p>

<h2>Creating the interface file</h2>

<p>
Start by creating an XML file (<b>Find.xml</b>) describing your application.
Copy the template below and adjust as appropriate:
</p>

<pre><![CDATA[
<?xml version="1.0" ?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface">
  <name>Find</name>
  <summary>a find-in-files utility</summary>
  <description>
Searches files for specific text, displaying the results in a window. Double click
on the result line(s) to open the file at that point.

Configuration options are available to customize the search command and the editor with which to
open the files.
  </description>
  <icon type='image/png' href='http://www.hayber.us/0install/Find.png'/>

  <group>
    <requires interface="http://rox.sourceforge.net/2005/interfaces/ROX-Lib">
      <environment insert="ROX-Lib2/python" name="PYTHONPATH"/>
    </requires>
    <implementation id='.' main='AppRun' version='6'/>
  </group>
</interface>
]]></pre>

<p>
The <b>xmlns</b> attribute gives the XML namespace for all the elements (don't change this).
</p>

<p>The elements at the start describe the interface in varying levels of detail:</p>

<dl>
<dt>&lt;name&gt;</dt> <dd>a short name to identify the interface</dd>
<dt>&lt;summary&gt;</dt> <dd>a short one-line description (note that the first word should
not be upper-case unless it is a proper noun)</dd>
<dt>&lt;description&gt;</dt> <dd>a full description, which can be several paragraphs long</dd>
<dt>&lt;icon&gt;</dt> <dd>an icon to use for the program; this is used by programs such as
<a href="http://rox.sourceforge.net/phpwiki/index.php/AddApp">AddApp</a>.</dd>
</dl>

<p>
The <b>&lt;group&gt;</b> element contains a set of implementations of the
interface (versions of Find) and their requirements. The group saves us having
to repeat the requirements for each implementations (since they often don't change).
Here we have a single dependency, ROX-Lib, and a single implementation. The <b>id</b> gives the
location of the implementation directory relative to the interface file.
</p>

<p>
The <b>&lt;requires&gt;</b> element names an interface which is required by all the implementations
in this group. 
The <b>&lt;environment&gt;</b> element inside tells the injector how to make its
choice known to Find. In this case, it is by inserting
<b>/path/of/cache/sha1=XXX/ROX-Lib2/python</b> to the beginning of <b>PYTHONPATH</b>.
When Find (a Python program) does <b>import rox</b>, it will then get the chosen
version.
</p>

<p>
Save the interface as <b>Find.xml</b> inside the <b>Find</b> directory. We can now run
<b>0launch</b> on this file to run Find:
</p>

<pre>
$ <b>0launch ./Find.xml</b>
</pre>

<p>
If you don't already have ROX-Lib, you will be prompted to download it as usual. Once ROX-Lib is available,
Find runs:
</p>

<p style='text-align: center'>
  <img width="469" height="325" src="find.png" alt='Find running' />
</p>

<p>
As usual, you can run <b>0launch -g ./Find.xml</b> to force the 0launch GUI to appear. You will see that there
is a single version of Find available, but that you can choose any version of ROX-Lib to use with it.
</p>

<h2>Fetching Find with the injector</h2>

<p>
So far we are running a local copy of a program, but using the injector to fetch its dependencies. This is
already quite useful, and we can include the <b>Find.xml</b> file with the package to make it easier for
other people to use it this way. However, we can also fetch Find itself using the injector...
</p>

<p>
Copy your <b>Find.xml</b> into a new directory. We will modify this copy to download Find, while
leaving the original one to run the local copy.
</p>

<p>
We need to identify each Find implementation (version) uniquely. We do this by
generating a <i>digest</i> from the contents of the directory tree, using the
<b>0store</b> command (you <b>MUST</b> use a clean copy of Find, not the one
with your <b>Find.xml</b> in it, or the digest won't match the archive!):
</p>

<pre>
$ <b>tar xzf Find-006.tgz</b>
$ <b>0store manifest Find</b>
[...]
sha1=ff9d9e11fde0a146c7e1781511fd9afb17752e34
</pre>

<p>
The <b>0store manifest</b> command prints out a manifest which shows the whole
directory structure along with the SHA1 of each file inside it. On the last
line, it prints the SHA1 of the manifest file itself; this is the value we
need.
</p>

<p>
Note that the digest is for the extracted directory structure; <i>not</i> for
the compressed archive.
</p>

<p>
Now, we need to change the <b>&lt;implementation&gt;</b> to tell the injector
to download an archive, instead of running a local copy. The injector will check
that the unpacked archive's digest matches the value in the <b>id</b> attribute.
Replace the old <b>&lt;implementation&gt;</b> with this:
</p>

<pre><![CDATA[
    <implementation id='sha1=ff9d9e11fde0a146c7e1781511fd9afb17752e34' main='AppRun' version='6'>
      <archive href="http://www.hayber.us/rox/find/Find-006.tgz" size="23161" extract='Find'/>
    </implementation>
]]></pre>

<p>
The attributes of <b>&lt;archive&gt;</b> are:
</p>

<dl>
 <dt>href</dt> <dd>a URL from which the archive can be downloaded (in escaped
 form, so a space is written as %20, etc).</dd>
 <dt>size</dt> <dd>the size of the archive (for progress bars).</dd>
 <dt>extract</dt> <dd>(optional) a subdirectory of the archive to use. We could have omitted this and
 changed the implementation's <b>main</b> to <b>Find/AppRun</b> instead, but it's better to keep the
 main attribute the same, if possible. Note that if you don't use <b>extract</b> then you must run
 <b>0store manifest</b> on an <i>otherwise-empty</i> directory containing
 <b>Find</b>, not on <b>Find</b> itself.</dd>
</dl>

<p>
If you run the new <b>Find.xml</b>, the injector should download and unpack the
archive into the cache, and run Find from it.
</p>

<div class="note" style='text-align: left'>
<h3>Note on weaknesses in SHA-1</h3>
<p>Some weaknesses in the SHA-1 algorithm have recently been
discovered. At present, it is still strong enough for our use, but we should migrate
to another algorithm at some point.
</p><p>
Summary: As long as you sign your own programs (rather than verifying and signing
programs from untrusted people), you're OK (a viable <i>preimage attack</i> would
be required, not just a <i>collision attack</i>). If you check and sign programs
from untrusted people (an unlikely situation), then MD5 is completely insecure but
SHA-1 should be OK for a few years.
</p>
<p>See the <a href="http://www.cryptography.com/cnews/hash.html">HASH COLLISION Q&amp;A</a> for
more details.</p>
</div>


<h2>Publishing the interface</h2>

<p>
We now have a <i>local</i> interface file which will download a version of Find for us and check that
it hasn't been tampered with (the digest must match). We could email this file to other people to let
them get our software this way too. However, a better solution is to publish the interface file itself
on the web. This means that we only have to email links, other programs can depend on ours (just as we
depend on ROX-Lib), and people can check for updates automatically.
</p>

<p>
We will need to pick a URL for Find. Since we must upload the interface file to this URL, we must pick
a name we control. It is best to choose names that are unlikely to change, since other software that uses
ours will identify it by the URL we pick. For this example, we will use <b>http://www.hayber.us/0install/Find</b>.
This is the URL that will be used to download the interface file, so pick a URL that doesn't already exist!
</p>

<p>
We must include our newly-chosen URL in the XML (this is a security feature;
the injector requires the URI to match the URL from which it downloads an
interface). Add a <b>uri</b> attribute to the <b>&lt;interface&gt;</b> element:
</p>


<pre><![CDATA[
<?xml version="1.0" ?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface"
           uri="http://www.hayber.us/0install/Find">
]]></pre>

<p>
All downloaded interface files must be signed, or the injector will reject
them. If you do not already have a GPG key, create one now. You can accept the
defaults for most fields; just enter your name and email address:
</p>

<pre>
$ <b>gpg --gen-key</b>
</pre>

<p>
The gpg signature is added to the XML like this:
</p>

<pre>
$ <b>gpg --clearsign Find.xml</b>
</pre>

<p>
Now upload the resulting <b>Find.xml.asc</b> file to your web server, so that it can be downloaded
by fetching <b>http://www.hayber.us/0install/Find</b>, and try it out:
</p>

<pre>
$ <b>0launch http://www.hayber.us/0install/Find</b>
</pre>

<p>
The injector will ask you to confirm that you trust the key to sign interfaces.
</p>


<h2>Uploading the GPG key</h2>

<p>
To do a proper test, set HOME to a new directory and try running it:
</p>

<pre>
$ <b>mkdir /tmp/test</b>
$ <b>HOME=/tmp/test 0launch http://www.hayber.us/0install/Find</b>
Failed to download key from 'http://www.hayber.us/0install/AA1A7812B40B0B6E.gpg':
HTTP Error 404: Not Found
</pre>

<p>
We need to put our GPG public key up too! Export it and upload it (the name is
the key ID):
</p>

<pre>
$ <b>gpg --list-secret-keys  --keyid-format long</b>
pub   1024D/AA1A7812B40B0B6E 2005-06-05
uid                          Ken Hayber &lt;email&gt;
sub   2048g/B1E2DF7D7E213D1B 2005-06-05
$ <b>gpg --export -a <i>Ken</i> > <i>AA1A7812B40B0B6E.gpg</i></b>
</pre>

<p>
Once the key is uploaded, the test should work. Other people can now use your interface.
</p>

<h2>Registering the local feed</h2>

<p>
In fact, we'd like to see both downloadable implementations (e.g., official releases) and local
versions (e.g., developer CVS checkouts) of Find. To do this, all we need is to add a <b>feed-for</b>
line in the local <b>Find/Find.xml</b> file (the one where the implementation <b>id</b> is <b>.</b>):
</p>

<pre><![CDATA[
<?xml version="1.0" ?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface">
  <feed-for interface='http://www.hayber.us/0install/Find'/>
]]></pre>

<p>
You can now register the local feed using <b>0launch --feed Find/Find.xml</b>, as normal.
</p>



<h2>Versions</h2>

<p>
A version is a dot-separated list of integers. Eg "1.2.3". It can be just a
single number ("1") or a sequence of any number of components ("1.4.2.3").
Versions are ordered like this:
</p>

<ul>
<li>0.1</li>
<li>1</li>
<li>1.1</li>
<li>1.2</li>
<li>1.2.1</li>
<li>1.2.1.4</li>
<li>1.2.2</li>
<li>1.2.10</li>
<li>3</li>
</ul>

<p>
The injector doesn't care about anything other than the sort order (ie, whether
one version comes before or after another). It is assumed that an
implementation can be safely replaced by one with a later version number, but
not with an earlier one. So, if you ask for "1.2.1" then you might get "1.2.2"
or "1.3" or even "5.7", but not "1.2.0". This is a little different to some
other systems, where numbers in different places have different meanings.
</p>

<p>
Incompatible changes (where a newer version cannot be used in place of an older
version) to an interface should be handled by creating a new interface. Eg:
</p>

<ul>
<li>http://gtk.org/2005/interfaces/GTK-1.2 (contains 1.2.0, 1.2.1, 1.2.2, ...)</li>
<li>http://gtk.org/2005/interfaces/GTK-2.0 (contains 2.0.0, 2.0.1, 2.2.0, 2.4.0, 2.4.1, ...)</li>
</ul>

<p>
<strong>Excercise:</strong> add another version of Find to the interface.
</p>


<h2>Stability</h2>

<p>
The interface file also gives a stability rating for each implementation. The following
levels are allowed (must be lowercase in the interface files):
</p>

<ul>
<li>stable</li>
<li>testing</li>
<li>developer</li>
<li>buggy</li>
<li>insecure</li>
</ul>

<p>
Stability ratings are kept independently of the implementations, and are expected to change over
time. When any new release is made, its stability should be set to <b>testing</b>. Users who
have selected <b>Help test new versions</b> will then start using it. Other users will continue
with the previous stable release. After a while (days, weeks or months, depending on the project)
with no serious problems found, the implementation's stability can be changed to <b>stable</b>
so that everyone will use it.
</p>

<p>
If problems are found, it can instead be marked as <b>buggy</b>, or <b>insecure</b>. The injector
won't select either by default, but it is useful to users to see the reason (users may opt to
continue using a buggy version if it seems to work for them, but they should never use an insecure
one). <b>developer</b> is like a more extreme version of <b>testing</b>, where the program is
expected to have bugs.
</p>

<h3>When to use 'buggy'</h3>

<p>
Don't mark old releases as <b>buggy</b> every time you do a new release, just
because a few bugs have been fixed.  People who have selected <b>Network
use: Full</b> will automatically upgrade to the new version anyway, so marking an older
version as buggy only affects people who have explicitly stated that they <b>don't</b>
want to use the latest version, but would prefer to use an older release to
save network use.
</p>

<h2>Problems with manifest digests</h2>

<p>
Usually, if it complains that the expected manifest doesn't match the actual one, it's because you ran
"0store manifest" on the wrong directory. Try creating an empty directory, extracting your tar file inside that,
and then taking the manifest of the directory itself (containing the extracted items).
</p>

<p>
There is one other possible problem, where the 'actual' manifest changes each time the archive is extracted!
This happens when you include only some deep subdirectories in the archive, but not the top-level directory. Eg:
</p>

<pre>
$ tar czf archive.tgz deeply/nested/path
</pre>

<p>
When tar extracts the archive, it restores the original mtime of 'path', but creates 'deeply' and 'nested' with the current
time. This is what causes the digest to change. Solution: only list top-level directories when creating archives!
</p>

</html>
