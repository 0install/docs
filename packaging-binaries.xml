<?xml version='1.0' encoding='utf-8'?>
<html lang="en">

<program name='0publish-gui'
	 title='Packaging binaries with 0publish-gui'
	 author='Thomas Leonard'
	 feed='http://0install.net/2007/interfaces/0publish-gui.xml'
	 git='http://repo.or.cz/w/0publish-gui.git'
	 license='GNU General Public License'>

<p>
This guide shows how to make software available through <a href="injector.html">Zero Install</a>.
We will start by packaging <a href='http://www.blender.org'>Blender</a>, an open source 3D modelling
and animation program.
</p>

</program>

<p>
You should already be familiar with the general operation of Zero Install. If not, start by reading
the <a href='users.html'>user tutorial</a>.
</p>

<p>
We assume here that a binary release already exists (perhaps published by someone else) and you want to
make it available through 0install. If you want to publish your own programs, you might also be interested
in <a href='0release.html'>0release</a>, which generates a release from a Git repository.
</p>

<toc level='h2'/>

<h2>Tutorial</h2>

<p>
To make a program available via Zero Install you need to create an XML 'feed' file, describing which
versions are available, where they can be downloaded, and what other software they require. In this
tutorial, we'll use the graphical <b>0publish-gui</b> application to create
this file. If you don't want to use a graphical interface (for example, because
you want to publish new versions using a script) then you should read
the <a href='package-scons.html'>0publish</a> tutorial instead.
</p>

<p>
Start by getting <b>0publish-gui</b> in the usual way:
</p>

<pre>$ <b>0alias 0publish-gui http://0install.net/2007/interfaces/0publish-gui.xml</b></pre>

<p>
This program requires GTK >= 2.6 and Python >= 2.4 (these are not fetched using Zero Install at present).
</p>

<div class='note'>
  Windows users: the <a href='http://0install.de/feeds/ZeroInstall_Tools.xml'>Zero Install Publishing tools</a> is a .NET equivalent of 0publish-GUI.
</div>

<p>
Run the program, giving it the name of the feed file you want to create, which should be named after the
program:
</p>

<pre>
$ <b>0publish-gui Blender.xml</b>
</pre>

<p>
A window appears prompting you to enter some details about the program. Here, I've copied the details from
the project's <a href='http://freshmeat.net'>freshmeat.net</a> page. The
<b>Icon</b> field is optional, but I've added one anyway:
</p>

<p style='text-align: center'>
<img width="554" height="367" src="screens/0publish-gui/feed-info.png" alt="Creating a new feed" />
</p>

<p>
The next step is to add one or move versions of Blender to the feed, which we can do from the <b>Versions</b>
tab using the <b>Add Archive</b> button:
</p>

<p style='text-align: center'>
<img width="554" height="367" src="screens/0publish-gui/no-versions.png" alt="The Versions tab" />
</p>

<p>
Enter the URL of the archive for the new version (copy the link from the Blender site). This URL tells
other people where to get it, so it must be present. If you've already downloaded the archive then choose
it in the <b>Local copy</b> section. Otherwise, click on <b>Download</b> to download it now:
</p>

<p style='text-align: center'>
<img width="366" height="341" src="screens/0publish-gui/download-archive.png" alt="Download an archive" />
</p>

<p>
The top-level items in the archive are displayed in the <b>Extract</b> area. The reason for this is that
there are two common ways of laying out archives. Some people put the files in the archive directly, while
others create an extra top-level directory. In blender's case, the archive
contains a single top-level directory called <b>blender-2.42a-linux-glibc232-py24-i386-static</b>.
</p>

<p>
The reason this matters is because we need each version to have a similar structure. We don't want a
directory name that's going to be different each time, so we select to extract just the contents of
this directory. 0publish-gui is pretty smart about guessing whether to extract everything or just a
sub-directory, so just go with the default.
</p>

<p style='text-align: center'>
<img width="366" height="341" src="screens/0publish-gui/extract.png" alt="Choose the sub-directory" />
</p>

<p>
Now we are prompted to enter some extra information about this version. The most important field to
set is <b>Main</b>, which is the executable program inside the archive that is run when someone tries
to use your feed. The drop-down menu shows the available executables.
</p>

<p>
The <b>License</b> and <b>Released</b> fields are just for information.
<b>Released</b> is the date you added this version to the feed, so the default
of today's date is correct. The <b>OS</b> and <b>CPU</b> fields prevent people
from trying to use this version on incompatible machines. The <b>Docs</b> field
can be used to say which directory contains the documentation, if any.
</p>

<p>
I've left <b>Stability</b> set to <b>(inherit)</b>, which means that the rating will be inherited from any containing
group. Since we don't have a group, it will get the default value of <b>Testing</b>. You can also
inherit the other fields (by leaving them blank), although <b>OS</b> and
<b>CPU</b> are inherited together (you can't inherit one and not the other). Groups are useful when you
have lots of versions, so you don't have to keep specifying the same information for each one.
</p>

<p>
Finally, the shaded <b>ID</b> field displays a cryptographic digest of the
archive's contents. When other people use this feed to get Blender 2.42, this
is how they know that they've downloaded exactly the same files as you have
(in case an attacker replaces the download with a modified version).
</p>

<p style='text-align: center'>
<img width="628" height="263" src="screens/0publish-gui/version-props.png" alt="Choose the main binary" />
</p>

<p>
You'll now see your new version shown in the list of versions, along with the
single archive, which says where to get it. The names in parenthesis show which
attributes we set. We can try out the interface by clicking on the <b>Save and
Test</b> button:
</p>

<p style='text-align: center'>
<img width="550" height="390" src="screens/0publish-gui/one-version.png" alt="The newly added version" />
</p>

<p>
This runs <b>0launch</b> on our XML file, in the usual way. Note that version
2.42 is already cached; it was added when we clicked <b>OK</b> in the <b>Add Archive</b> box.
Click on <b>Execute</b> and check that it runs.
</p>

<p style='text-align: center'>
<img width="500" height="236" src="screens/0publish-gui/test-run.png" alt="Try it out" />
</p>

<p>
It all works perfectly, so we'll publish this feed on the web for other people to use. To do this, we need
to sign the feed so people can check that it's really from us. Go to the
<b>Publishing</b> tab and choose your GPG key from the menu. If you don't have a key, click on the
<b>Add</b> button to create one now.
</p>

<p>
When generating a key, you'll be asked a few difficult-looking questions; if unsure,
just accept the defaults offered. Enter your name and e-mail address
when prompted, and choose a good passphrase to protect the key:
</p>

<p style='text-align: center'>
<img width="551" height="570" src="screens/0publish-gui/gpg-genkey.png" alt="Create a GPG key" />
</p>

<p>
There's one final thing left to do: we need to decide where on the web we'll publish the XML file. Enter the
URL that people will use to download your feed in the section titled <b>This feed's URL</b>. Try to
pick a location that won't change, as people will keep coming back here for updates.
</p>

<p>
Click on <b>Save</b> to save it again. This time, you'll be prompted to enter your key passphrase
(the one you chose when creating the key above):
</p>

<p style='text-align: center'>
<img width="566" height="538" src="screens/0publish-gui/sign-feed.png" alt="Sign the feed" />
</p>

<p>
The final result of all this is three files: the signed XML feed file itself, listing our single version,
your GPG public key, which lets people check the signature, and an XSLT stylesheet, in case anyone wants to
view the feed in their browser.
</p>

<p style='text-align: center'>
<img width="520" height="133" src="screens/0publish-gui/files-to-upload.png" alt="Upload the files" />
</p>

<p>
Upload all three files to your web-server. I put mine in
<a href='http://0install.net/2007/3rd-party/'>http://0install.net/2007/3rd-party</a>. Now anyone can
run Blender with the command:
</p>

<pre>$ <b>0launch http://0install.net/2007/3rd-party/Blender.xml</b></pre>

<h2>Check your feed!</h2>

<p>
It's surprising how easy it is to forget to set the right permissions, etc, so check your new feed!
<a href='feedlint.html'>FeedLint</a> is an easy first step:
</p>

<pre>
$ <b>0alias feedlint http://0install.net/2007/interfaces/FeedLint.xml</b>
$ <b>feedlint http://0install.net/2007/3rd-party/Blender.xml</b>
</pre>

<h2>Groups and dependencies</h2>

<p>
If the software depends on something else (e.g. a library) then use the <b>Add Requires</b> button to
specify this. For example, <b>0publish-gui</b> depends on <b>ROX-Lib</b>, which I specified like this:
</p>

<p style='text-align: center'>
<img width="550" height="422" src="screens/0publish-gui/requires.png" alt="Add Requires" />
</p>

<p>
This ensures that <b>.../ROX-Lib2/python</b> is in <b>PYTHONPATH</b>. When
<b>0publish-gui</b> does <b>import rox</b>, the import thus uses the directory
<b>.../ROX-Lib2/python/rox</b>.
</p>

<p>
When you want to add more versions, you should use the <b>Add Group</b> button to create a group.
Make sure both versions are inside the new group (use drag-and-drop to move them). Then you only need
to set the license, main, OS and CPU settings in one place. You can also share dependencies using groups.
</p>

<h2>Trouble-shooting</h2>

<dl>
 <dt>I can't find a generic binary for the program I want to package!</dt>
 <dd>
  <p>
  Popular projects usually provide a "generic" binary tarball, which works on most Linux distributions. This
  is the best archive to put in the feed. If there isn't one, it might mean that the developers couldn't get
  a single binary to work on multiple distributions, or it might just mean they haven't tried.
  </p>
  <p>Often, a Red Hat RPM will work just fine on Debian (e.g. <a
  href='http://0install.net/2007/3rd-party/LyX.xml'>the LyX feed</a>), or a
  .deb will work on Red Hat, etc. If there are several options, pick the one for the distribution
  which is furthest behind (e.g. Red Hat rather than Fedora). Packages for old systems often still
  work with newer ones, but not the other way around.
  </p>
 </dd>

 <dt>My program assumes it's running from /usr/games</dt>
 <dd>
  <p>
   Games have an annoying habit of trying to <b>cd</b> to a hard-coded directory in their start-up
   script. You could try asking the author to fix it (<b>cd "`dirname $0`"</b> would work just as
   well). It's also possible to patch the download using a <b>recipe</b> element, but the GUI doesn't
   provide an interface for this.
   The trick here is getting the ID right; you need the digest of the directory structure
   <i>after</i> the patch has been applied. <b>0store manifest</b> can help here.
  </p>
 </dd>
</dl>

<h2>Further reading</h2>

<dl>
 <dt><a href='package-scons.html'>Example: SCons</a></dt>
 <dd>SCons is a build tool written in Python. This tutorial shows how to use the command-line
 <b>0publish</b> command to create the XML feed, which is useful if you want to script the process.</dd>

 <dt><a href='injector-find.html'>Example: Find</a></dt>
 <dd>Find is a Python program with a dependency on a Python library. This example shows how to depend on
 other components.</dd>

 <dt><a href='package-inkscape.html'>Example: Inkscape</a></dt>
 <dd>Inkscape is distributed as a binary RPM (among other formats). This guide shows how to publish these
 RPMs so that they can be run using Zero Install (by users without root access or on Debian systems, for
 example).</dd>

 <dt><a href='package-rox.html'>Example: ROX-Filer</a></dt>
 <dd>ROX-Filer is a C program, which requires different binaries for different platforms. These binaries
 are built and published in interface files maintained by different people. Using the injector's feed
 mechanism, users only need to use the main ROX-Filer interface and will automatically get a binary for
 their platform, from the maintainer of that binary.</dd>

 <dt><a href='0publish.html'>0publish</a></dt>
 <dd>A command reference for the <b>0publish</b> command.</dd>

 <dt><a href='http://rox.sourceforge.net/desktop/node/300'>Compiling with SCons and GTK</a></dt>
 <dd>
  Now that we've made SCons available through Zero Install, we can use it in our build scripts. This
  example shows how to build a GTK application written in C using Zero Install to get the build tool
  and the header files automatically.
 </dd>
</dl>

</html>
