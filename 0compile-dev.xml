<?xml version='1.0' encoding='utf-8'?>
<html lang="en">

<h2>0compile: Developers</h2>

<p>
  This page explains how to publish source code using Zero Install. Publishing source this way means that:
</p>

<ul>
  <li>Users can compile it easily <a href='0compile.html'>using 0compile</a>.</li>
  <li>Build dependencies, such as header files and build tools, can be downloaded automatically.</li>
  <li><a href='0release.html'>0release</a> can automatically compile binaries for your software during the release process.</li>
</ul>

<h2>Contents</h2>

<toc level='h2'/>

<h2>Making source available</h2>

<p>
To make source code available for others to use you need to add source
implementations to the program's feed file. This is almost exactly the same as
adding binaries, except that you give <b>src</b> as the machine (CPU) type:
</p>

<p style='text-align: center'>
<img width="676" height="456" src="screens/add-source-impl.png" alt="Adding a source implementation" />
</p>

<p>
  You can also edit the XML directly, which gives more control. A minimal source implementation might look like this:
</p>

<pre>
&lt;implementation <b>arch="*-src"</b> id="." version="0.1-pre">
  &lt;command <b>name='compile'</b> path='Makefile'>
    &lt;runner interface='http://repo.roscidus.com/devel/make'>
      &lt;arg>-f&lt;/arg>
    &lt;/runner>
  &lt;/command>
&lt;/implementation>
</pre>

<p>The job of the <b>compile</b> command is to call the actual build system.
It is executed inside the <b>build</b> directory (<b>$BUILDDIR</b>).
It must compile the source in <b>$SRCDIR</b>, putting the final result (ready for distribution) in <b>$DISTDIR</b>.
The path to the generated feed for the new binary is <b>$BINARYFEED</b>, if you need it during the build.
</p>

<p>
Instead of giving a &lt;runner&gt;, you can instead give a shell command, like this:
</p>

<pre>
  &lt;implementation arch="*-src" id="." version="0.1-pre"
    <b>xmlns:compile="http://zero-install.sourceforge.net/2006/namespaces/0compile"
    compile:command="make -f ${SRCDIR}/Makefile"</b>/>
</pre>

<p>
However, the first form (with &lt;command name='compile'>) is preferred (and will be necessary if you want to support Windows, once Windows works with 0compile).
If the command starts to get complicated, you should move it to a script (either inside the main source archive or in a separate dependency) and just set this attribute to the command to run the script.
</p>

<p>
There are also some extra attributes you can add to the <b>implementation</b> element:
</p>

<dl>
 <dt>compile:binary-main</dt>
 <dd>This optional attribute gives the value of the <b>main</b> attribute on the binary feed that is created. If it is not given, then
 the binary created cannot be executed (e.g., it is a library).</dd>

 <dt>compile:dup-src</dt>
 <dd>Some programs insist on creating files in their source directory, which is
typically a read-only directory when using Zero Install. In this case, set
<b>compile:dup-src='true'</b> and 0compile will copy everything in $SRCDIR
into 'build' before building.</dd>

</dl>

<h2>Customising the binary implementation</h2>

<p>
  Starting from 0compile 0.23, you can specify a template &lt;implementation&gt; for the binary. You can use this, for example, to add &lt;command&gt; elements to it. Here's a more complex example for a Java program:
</p>

<pre>
  &lt;implementation <b>arch="*-src"</b> id="." version="0.1-pre" <b>compile:min-version='0.24'</b>>
  <b>&lt;command name="compile" path="src/Makefile"></b>
      &lt;runner interface='http://repo.roscidus.com/devel/make'>
        &lt;arg>-f&lt;/arg>
      &lt;/runner>

      <b>&lt;compile:implementation arch='*-*'></b>
        &lt;environment name='CLASSPATH' insert='.'/>
        &lt;requires interface="http://repo.roscidus.com/utils/graphviz"/>
        <b>&lt;command name='run'></b>
          &lt;runner interface='http://repo.roscidus.com/java/openjdk-6-jre'/>
          &lt;arg>com.example.MainClass&lt;/arg>
        &lt;/command>
      &lt;/compile:implementation>
    &lt;/command>
    &lt;requires interface="http://repo.roscidus.com/java/iris" compile:include-binary='true'/>
    &lt;requires interface="http://repo.roscidus.com/java/openjdk-6-jdk">
      &lt;environment name='PATH' insert='bin'/>
    &lt;/requires>
  &lt;/implementation>
</pre>

<p>The interesting bits here are:</p>

<dl>
  <dt>arch="*-src"</dt><dd>tells us that the root &lt;implementation&gt; describes some source code.</dd>
  <dt>compile:min-version</dt><dd>requires 0compile >= 0.24 to use the template feature.</dd>
  <dt>&lt;command name='compile'&gt;</dt><dd>this replaces the old <b>compile:command</b> attribute described above.</dd>
  <dt>&lt;compile:implementation&gt;</dt><dd>this is the template for the implementation that will be created by the compile.</dd>
  <dt>arch='*-*'</dt><dd>indicates that the generated binary is platform independent (Java bytecode).</dd>
  <dt>&lt;command name='run'&gt;</dt><dd>says how to run the resulting binary (by using the Java runtime).</dd>
</dl>

<h2>Adding run-time dependencies</h2>

<p>
By default, the feed created for the new binary doesn't have any dependencies. There are three ways to add them:
</p>

<ul>
<li>You can annotate any &lt;requires&gt; element in your source feed with the 'include-binary' attribute. This
causes the dependency to appear in the generated binary's feed, in addition to being made available at
compile-time. e.g.
<pre>
    &lt;requires <b>compile:include-binary='true'</b> interface="http://my/library"&gt;
      &lt;environment insert="lib" name="MY_LIBRARY_DIR" mode="replace"/&gt;
    &lt;/requires&gt;
</pre>
</li>
<li>You can use the template feature described above.</li>
<li>
You can edit the feed XML file directly during the build (it's in the <b>$DISTDIR/0install</b> directory).
</li>
</ul>

<h2>Tips</h2>

<dl>
<dt>Using a separate source feed</dt>
<dd>
<p>
You can keep the source implementations in a separate file (<b>MyProg-src.xml</b>) and add a feed from
the main feed, e.g.:
</p>

<pre>
  &lt;feed src='http://mysite/interfaces/MyProg<b>-src</b>.xml' <b>arch='*-src'</b>/&gt;
</pre>

<p>
The <b>arch</b> attribute lets the injector know that it doesn't need to fetch this file unless
it's looking for source code.
</p>
</dd>

<dt>Making library headers available (-dev packages)</dt>
<dd>
<p>
See <a href='make-headers.html'>Make-headers</a> for information about publishing library source and -dev packages.
</p>
</dd>

 <dt>Python distutils</dt>
 <dd><p>
 You should use the <b>--build-base</b> option to make distutils build to 0compile's build directory, not under the source code (which is read-only). Unfortunately, this option
 isn't available with the <b>install</b> command, so you have to do the build in two steps. A typical command is:
 </p>
 <pre>cd "$SRCDIR" &amp;&amp;
python setup.py build --build-base="$BUILDDIR/build" &amp;&amp;
cd "$BUILDDIR" &amp;&amp;
python "$SRCDIR"/setup.py install --home="$DISTDIR" --skip-build</pre>
 </dd>
</dl>

<h2>Examples</h2>

<p>Anders F Bj√∂rklund has created a set of <a href='http://article.gmane.org/gmane.comp.file-systems.zero-install.devel/4273'>example source feeds</a>. There are also some <a href='templates.html'>template projects</a> which can be used as a starting point for publishing your own software.</p>

<h2>Further reading</h2>

<dl>
 <dt><a href='0compile-scons.html'>Example: SCons</a></dt>
 <dd>This example shows how to compile a simple "Hello world" program using
 the SCons build system. Both the source and SCons are fetched using Zero
 Install.</dd>
</dl>

</html>
