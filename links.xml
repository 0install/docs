<?xml version='1.0' encoding='utf-8'?>
<html xmlns='http://www.w3.org/1999/xhtml'>

<h2>Similar or related systems</h2>

<dl class='spaced'>
<dt>Java Web Start</dt>
<dd>
<p>
Sun have developed a similar system to Zero Install,
<a href="http://java.sun.com/products/javawebstart">Java Web Start</a>,
although this only works for Java applications.
</p>
</dd>

<dt>Konvalo</dt>
<dd>
<p>
Konvalo was a very similar idea to the old Zero Install filesystem, but
implemented using CODA rather than with a custom kernel module.</p>

<p>
One disadvantage of Konvalo was that you needed to run a public CODA server
to distribute software, whereas both Zero Install implementations only require
a web-server serving static pages.
</p>

<p>
The project did not attract support from the community and the author
abandoned the effort in April 2006, asking for links to it from this site
to be removed.
</p>
</dd>

<dt>Klik</dt>

<dd>
<p>
<a href='http://klik.atekon.de'>Klik</a> allows users to install software by clicking on 
links in web-pages (or even just by looking at a web page). Like Zero Install, it stores
each package in its own directory and sets environment variables to let it run.
There is a central server which sends shell scripts to clients; executing the
script causes the software to be downloaded and installed. This process is
started automatically by your web browser.
</p>
<p>
Klik is mainly focussed on having a large selection of packages working now,
but pays little attention to security. Klik does not handle dependencies
automatically and cannot check for updates to installed software.
There are no digital signatures or server authentication, and no checksums or
digests. Downloads cannot be shared safely between users. Klik packages can be
automatically converted to Zero Install ones. See my <a
href='http://rox.sourceforge.net/desktop/node/290'>article about Zero Install
and Klik</a> for more details.
</p>
</dd>

<dt>Maven</dt>

<dd>
<p>
<a href='http://maven.apache.org/'>Maven</a> is a build tool (like make or ant)
for Java programs. Although not an installation system, it is similar to
the injector in that each product has a <b>project.xml</b> file with a list of
dependencies. When building a product, maven downloads the specified version of
each dependency and stores it in a cache directory. Some differences between
maven 1.0 (I have not yet tested version 2.0) and the injector:
</p>
<ul>
<li>Only exact versions of dependencies are given. Maven cannot select the
best version from a set. In an installation system, this would lead to a lot
of extra downloads as programs used different library versions
unnecessarily. It also makes it harder to get security fixes.</li>
<li>
Dependencies are not fetched recursively. If A requires B, and B requires C,
then maven will not fetch C unless A requests it explicitly. 
</li>
<li>
The <b>project.xml</b> files are not signed, as they are not fetched by
maven. Only implementations are downloaded.
</li>
<li>
There is no digest of the downloads in the project file, so no security checks
are performed to confirm that the download is OK, and downloads cannot be
shared safely between users.
</li>
<li>
Only Java is supported (everything is added to CLASSPATH, nowhere else).
</li>
<li>
Dependencies are named using a simple two-layer system (e.g., axis/axis-jaxrpc).
Therefore, a central repository is required to avoid naming conflicts.
</li>
</ul>

<p>
Note that you can use Zero Install in a maven-like way for compiling programs.
See <a href='http://rox.sourceforge.net/desktop/node/289'>Easy GTK binary compatibility</a>
for an example of using Zero Install to compile a C program against an older version
of a library's header files to ensure greater compatibility.
</p>
</dd>

<dt>Autopackage</dt>
<dd>
<p>
Like Zero Install, <a href='http://autopackage.org/'>Autopackage</a> aims to
let users install software and to make software distribution decentralised.
The work done by the Autopackage developers to make packages relocatable is 
necessary for the Zero Install injector too. Some differences between this and
Zero Install:
</p>
<ul>
<li>A script inside each package installs the files, making sandboxing
difficult. It also <a href='http://www.kitenet.net/~joey/blog/entry/autopackage_designed_by_monkeys-2005-03-28-14-20.html'>makes conversion to other
packaging formats troublesome</a>.</li>
<li>Security features such as GPG signatures have not been implemented. Given
that packages are executable files, the design doesn't seem to allow this to be fixed.</li>
<li>Downloads cannot be safely shared between users.</li>
<li>No checking for updates or support for multiple versions.</li>
<li>Being closer to traditional installation, it's easier to package existing
applications with Autopackage.</li>
</ul>

<p>
Note that it is quite possible to list autopackages in a Zero Install feed, as
described in <a href='http://thread.gmane.org/gmane.comp.autopackage.devel/5733/focus=5733'>this
post on the Autopackage mailing list</a>. In this case, no scripts are run during
installation (the package is treated as a normal archive), so not all packages will work,
but many do.
</p>

</dd>

<dt>EDOS</dt>

<dd>
<p>
The <a href='http://www.edos-project.org/xwiki/bin/Main/'>EDOS</a> (<i>Environment
for the development and Distribution of Open Source software</i>) project is a research
project looking at dependency management, QA, and efficient distribution of
large software systems.
</p>
</dd>

<dt>Nix</dt>

<dd>
<p>
<a href='http://nix.cs.uu.nl/'>Nix</a> is another "purely functional" package
manager. It is purely functional in the sense that each version of a package
has its own directory. As with Zero Install, "upgrading" creates a new
directory for the new version, rather than modifying the existing one. Unlike
Zero Install, however, whether a package is installed affects the behaviour of the
system. For example, running "firefox" when Firefox isn't installed produces an
error in Nix, whereas in Zero Install it will install Firefox first if missing
and then continue. In other words, installation has side-effects in Nix.
</p>

<p>
Additional feeds (e.g. for pre-built binaries) can be registed using
"nix-channel --add", which appears to work much like "0launch --feed", although
each channel can contain binaries for multiple packages.
</p>

<p>
Each version of a package has a digest, which includes all build dependencies
(e.g. the version of the compiler used), just as it does in Zero Install (for
packages built using 0compile, at least).
</p>

<p>
One difference between Nix and Zero Install is that Nix treats configurations
as packages. Changing your configuration is like "upgrading" your configuration
package to a new version. Rolling back a change is like reverting to a previous
version. Zero Install doesn't generally handle configuration settings,
preferring to let the user use subversion for that, but it's an interesting idea.
</p>

<p>
Building a Nix package involves creating a "Nix expression" in a (custom)
functional language. The expression fills the same role as a Zero Install source
feed (it says where to download the source, what its digest is, what the
build dependencies are, and how to build it).
</p>

<p>
While Zero Install is mainly targetted at adding additonal packages to an existing
system, Nix aims to manage the whole system (although it installs cleanly alongside
your existing package manager). Nix packages have short names (like "perl") not
full URIs, and thus it appears to assume a centrally-controlled repository. Nix
does not currently appear to sign the channel files.
</p>

</dd>

</dl>

<p>
See the <a href='matrix.html'>matrix</a> for a comparison of Zero Install's features with
those of other installation systems.
</p>

<h2>Articles about Zero Install</h2>
<p>Here are some discussions about Zero Install I've found on the web (Google, emails, etc). Let me
know if you find any more!</p>
<ul>
<li><a href="http://www.pro-linux.de/news/2005/8310.html">Neue Zero Install-Implementation</a> article on pro-linux.de (in German)</li>
<li><a href="ZeroInstall-Ottawa-2004.sxi">My slides from the 2004 Desktop Developers' Conference</a> (in Ottawa, Canada, July 19-20, 2004; these slides include the questions asked during the talk)</li>
<li><a href="http://diariored.com/blog/000753.php">Zero Install System: instalar programas se va a acabar</a> (in Spanish)</li>
<li><a href="http://www.golem.de/0404/30666.html">Zero Install: Software-Installation der Zukunft?</a> (in German)</li>
<li><a href="http://www.linuxfrench.net/article.php?id_article=1268">Zero Install : si t’installes, t’es un Zéro!</a> (in French)</li>
<li><a href="http://osnews.com/comment.php?news_id=6596">Introduction to the Zero Install System</a> (OSnews article and comments)</li>
<li><a href="http://slashdot.org/article.pl?sid=04/04/03/174249&amp;mode=nested&amp;tid=106&amp;tid=185">Zero Install: The Future of Linux on the Desktop?</a> (Slashdot article)</li>
<li><a href="http://freshmeat.net/articles/view/1049/">Zero Install and the Web of Software</a> (my freshmeat editorial and comments)</li>
<li><a href="http://osnews.com/comment.php?news_id=5394">Zero Install and the Web of Software</a> (OSnews article and comments)</li>
<li><a href="http://slashdot.org/~Sanity/journal/47655">Package Management in the ultimate operating system</a></li>
<li><a href="http://ed.puddingbowl.org/archives/001198.html">Ed Heil's Weblog</a></li>
<li><a href="http://www.varlinux.org/vl/html/modules/newbb/viewtopic.php?topic_id=201&amp;forum=8">Blue Sky Platform discussion</a></li>
<li><a href="http://forums.gentoo.org/viewtopic.php?t=114652">Gentoo forums discussion</a></li>
<li><a href="http://freedesktop.org/pipermail/xdg/2004-March/003461.html">Using Zero Install for sandboxing</a></li>
</ul>

<p>
<a href="http://www.w3.org/DesignIssues/Installation.html">Tim Berners-Lee's "Installation, Catalogs, and Caches"</a> (DRAFT version) mentions Zero Install, too! (though the comment about needing a constant connection is wrong)
</p>

</html>
