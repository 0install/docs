<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>Filesystem FAQ</h2>

<p>
For questions about Zero Install in general, see the
<a href='faq.html'>general FAQ</a>.
</p>

<toc level='h3'/>

<h3>How do I provide software using Zero Install?</h3>

<p>You need to be able to upload some static files to a web server.</p>

<p>See the <i><a href="packagers.html">Documentation for
packagers</a></i> for instructions.</p>

<h3>Isn't fetching stuff over the web really slow?</h3>
<p>You have to get stuff over the web anyway the first time. The
system caches everything, and will never even check that the cache is
up-to-date if it can satisfy a request without updating.
</p><p>
There is no speed hit to using stuff once it's downloaded.
The fact that everything is referenced by fixed URIs instead of
having to search means that this system can actually be faster in some
cases. Consider loading a shared library. At the moment, a program
must, on startup:
</p>
<ol>
 <li>Load /etc/ld.so.cache and find the full path of each library from
that.</li>
 <li>Load the actual library by its path.</li>
</ol>

<p>With Zero-installation, this becomes:</p>

<ol>
 <li>Load the actual library by its path.</li>
</ol>
<p>
It also removes the need to run ldconfig at install time (handy,
since there is no 'install time' ;-), losing a major source of errors
and user confusion.
</p>

<h3>Doesn't it require a fast Internet connection?</h3>

<p>
No! Installing using tarballs or traditional packages will typically mean
downloading around three to four times as much data you would using the Zero
Install filesystem, because Zero Install only downloads what you actually use.
</p>

<p>
When I tested it, installing the ROX-Filer CVS snapshot over a mobile
phone GPRS link (approx 2.5 kb/sec) took 1m48s, with 265 K received, 13 K sent,
although it may fetch more if you have less of the dependencies already (eg, an
icon theme and the MIME database). The corresponding tarball is over 1Mb, using
the same compression scheme.
</p>

<h3>The Zero Install filesystem is just another network filesystem, isn't
it?</h3>

<p>Yes. It uses HTTP to fetch a small index archive, and can then use any
other system (HTTP, FTP or various peer-to-peer and mirroring systems) to
fetch the actual data (see the <a href="technical.html">technical details</a>
page for more information).
This means that providing software though Zero Install is easy, because pretty
much everyone can put stuff on a webserver, whereas it's often hard to find
someone who will host other types of server.
</p>

<p>The main difference between this and standard shares is the way the
paths use the Internet DNS system. This allows us to link to resources
by fixed paths, in the same way that I can put up a link to
<a href="http://rox.sourceforge.net">ROX</a> on this web page without
worrying about where the user has 'installed' the web page.
</p>

<h3>Isn't is really hard to find applications if you always have to
type URIs for them?</h3>
<p>Yes. As with the web, that works but it's not the intended way to
do it. Like the web, you have links to the URIs, and you use the links
normally.</p>
<p>
For example, having opened the ROX-Filer directory showing Memo in
<a href="install.html">the installation instructions</a>, you can drag Memo
from the window onto your panel. Now you access it by clicking on its panel
icon; no URIs.
</p><p>
You could also put it on the pinboard, bookmark the directory, set
a keyboard shortcut, or whatever. Web pages can provide the
URIs in a clickable form (so clicking on a link opens the filer
window). A 'distribution' could be nothing more than a web page
listing links to high quality software for a particular audience.
</p><p>
Finally, if you want to get a newer version, or find related software,
traditional systems mean you have to try and remember where you got it
from, or hunt through the documentation. With the URI scheme, just
choose 'Show Location' from the panel menu and the directory
containing Memo (on the remote server) will be opened.
</p>

<h3>What about dial-up users? They don't want on-demand loading when
they're off-line.</h3>

<p>Various levels of granularity can be used. A user could tell the
system to cache an entire application, for example. Of course, dial-up
users might also appreciate that they have to download a lot less
stuff in total. A user with a slow, but easy to start, Internet
connection will probably prefer this scheme. A user who wants to take
their laptop up a mountain, however, would probably want to get as
much software as possible first.
</p><p>
However, knowing
how much to download requires knowing what software the user may want
to run in the future. Even the user doesn't know that. It's not a new
problem. No modern system is 'closed'. There will always be an
application that says "This program works well with 'foo'. You can get
it from this web site...". Should installing the program also install
'foo'? Should installing ROX-Lib also install the README? The
developer documentation? The python tutorial at python.org?
</p>

<h3>I understand that when I browse the web my computer caches the
pages, images and stylesheets automatically so I don't need to
manually 'install' multiple PNG images to see a page, but software is
different!</h3>
<p>Why?</p>

<h3>What about when resources move?</h3>
<p>Everything you've already accessed at least once will continue to
work. Users trying software for the first time will find that it
doesn't work due to broken links. This is not new, either. The download
instructions for ROX-Filer tell users that they need to get GTK from
www.gtk.org and libxml from www.xmlsoft.org. If those sites change
their names, the download instructions will be broken. It really
doesn't make any
difference.
As with the regular web, people can leave redirections to the new
site.</p>

<p>The system administrator can also specify a list of redirections manually if
required (this also allows all access to a particular library to use a modified
version, for example). See the <a href="docs.html">documentation page</a> for
details of the 0divert command.
</p>

<h3>How secure is this?</h3>
<p>
See the <a href="security.html">filesystem security issues</a>
document for details.
</p>

<h3>What if something gets automatically removed from the cache while
I'm up a mountain with my laptop?</h3>
<p>Currently, nothing is ever automatically removed from the cache.
Users can choose the purging scheme that suits them. For users with
broadband, that might mean removing anything that hasn't been accessed
for a year. For users with dial-up and 80Gb disks, that probably means
never ever removing anything.
</p><p>
You can run <b>/uri/0install/zero-install.sourceforge.net/apps/ZeroClean</b>
to scan the cache for good removal candidates:
</p>

<p style='text-align: center'>
<img width="618" height="338" src="ZeroClean.png"
     alt='ZeroClean finds some files to remove' />
</p>

<h3>Why are you abandoning application directories after supporting
them all these years?</h3>
<p>I'm not. The examples use
<a href="http://rox.sourceforge.net/phpwiki/index.php/AppDir">ROX application
directories</a>. Application directories provide an ideal user interface for
this system, since they don't all have to be installed in a single directory
(in PATH, etc). However, the system can be used for software not packaged as
ROX-style applications too (libraries, in particular, require few changes).
</p>

<h3>How do I link against a library such that when it's upgraded I get
the new version automatically?</h3>

<p>Link against .../libfoo/latest-1.2.x. This is a symlink to, eg
libfoo/1.2.3. If the user enters the 'libfoo' directory and does a
refresh, the link will now point to 1.2.4 and that will be fetched on
demand.</p>
<p>
If a program relies on a bug fix in libfoo-1.2.6 then it can check that
>'latest-1.2.x' points to that version or later, and force a refresh if
not.
</p>

<h3>Why did you write a new kernel module? What's wrong with CODA, UserVFS, etc?</h3>

<p>
Fully user-space filesystems are really, really slow. Fine for accessing a
remote FTP site, but you wouldn't want to run all your applications that way.
Every file read involves a context switch to another process and back!
</p>

<p>
CODA is better (and was used for prototyping), but it's still slower than
lazyfs (double context switch on every open/close) and buggy. Also, if
the user-space helper crashes, all your applications stop working and you
probably have to reboot. If the user-space helper in Zero Install crashes,
you just can't download any new stuff until you restart it, but everything
else continues to work.
</p>

<h3>Why is it written in C?</h3>

<p>
Actually, this isn't a FAQ, but it should be. Zero Install itself is fairly
security-critical (it doesn't run as root or accept incoming connections, but
an exploit would allow a local attacker to trojan other users' software). It
isn't speed critical, however; it only gets invoked when something isn't in the
cache, in which case it has to do a network fetch anyway. Given C's lack of
buffer-overflow checking, it seems a poor choice of language.
</p>

<p>
I actually looked at quite a few languages. The problem is that I wanted
it to be runnable from a boot floppy, which means the binary has to be
<i>small</i>. And, incredibly, there seems to be no decent language capable
of producing small stand-alone binaries. I thought C was bloated when I
couldn't get "Hello World" under about 700 bytes (and the naive implementation
is closer to 3K), but most languages can't seem to manage under a meg for
the same thing. Python's great, of course, but it needs a huge runtime
(likewise for Java, etc). The best language I could see for this was the
<a href="http://www.digitalmars.com/d/index.html">D Programming Language</a>
(which still manages a ridiculous 60K for a program that does nothing), but
expecting people to install a D compiler isn't going to help adoption, and it's
not portable (or rather, D code is, but the compiler isn't yet).
</p>

<p>
The solution may be to have two implementations of zero-install; one written
in C to be small for boot-strapping, and one written in
Python/D/scheme/whatever for larger systems.
</p>

<h3>What was the inspiration for Zero Install?</h3>

<p>
Several things. <a href="http://www.coda.cs.cmu.edu/">CODA</a> and
<a href="http://www.gedanken.demon.co.uk/wwwoffle/">wwwoffle</a>
for showing that caching network filesystems can still work when
off-line. <a href="http://w3.org">The W3C</a> for using URIs for namespaces.
Not <a href="http://java.sun.com/products/javawebstart/">Java Web Start</a>,
<a href="http://www.konvalo.org">Konvalo</a> or <a
href="http://cr.yp.to/slashpackage.html">D. J. Bernstein's slashpackage</a>
though, because I had never heard of them when I started the project.</p>

</html>
