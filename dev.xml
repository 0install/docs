<?xml version='1.0' encoding='utf-8'?>
<html xmlns='http://www.w3.org/1999/xhtml'>

<h2>Developers</h2>

<p>
 This section is for both people distributing software using Zero Install, and for
 people working on the Zero Install system itself.
</p>

<dl>
 <dt><a href='injector-packagers.html'>Packaging guide</a></dt>
 <dd>
  This guide takes you throught the steps involved in making a package available
  through Zero Install. You will need to be able to upload (static) files to a
  web-server.
 </dd>

 <dt><a href='0publish.html'>0publish</a></dt>
 <dd>
  <b>0publish</b> edits interface files in place. It loads the file, transforms
  it in some way (such as setting the release date, or adding a new
  implementation) and then writes it back out again. If the input file was
  signed, it will resign it when saving with the same key by default. You can
  also use it to add a signature, or to change the signing key. It is particularly
  useful in release scripts.
 </dd>

 <dt><a href='0compile.html'>0compile</a></dt>
 <dd>
  <b>0compile</b> creates binaries from source code, either for your own use or ready
for publishing on the web through Zero Install. It can use Zero Install to
download any build dependencies (compilers, header files, build tools, etc).
This is useful if there is no binary for your platform, or if you wish to
modify the program in some way.
 </dd>

 <dt><a href='python-api/html/index.html'>Python API</a></dt>
 <dd>
  The <b>0launch</b> command-line interface to Zero Install is sufficient for most
  purposes. However, sometimes you may want to use the Python library interface.
  This is used by programs such as <b>0compile</b> and <b>0publish</b>, and is
  also a useful reference for people wanting to modify the injector itself.
 </dd>

 <dt><a href='injector-specs.html'>Specifications</a></dt>
 <dd>
  Formal specifications for the file formats used by the injector.
 </dd>

 <dt><a href='injector-design.html'>Design</a></dt>
 <dd>
  A more detailed description of the design of Zero Install.
 </dd>

 <dt><a href='injector-tests.html'>Tests</a></dt>
 <dd>
  A set of test interfaces to check that the injector is working
  correctly.
 </dd>
</dl>

<h2>Off-site documentation</h2>

<dl>
 <dt><a href='http://rox.sourceforge.net/desktop/node/300'>Compiling with SCons and GTK</a></dt>
 <dd>
  <p>Article showing how to use Zero Install in your build scripts to download the SCons build system and
  use it to compile your program.</p>
 </dd>

 <dt><a href='http://rox.sourceforge.net/desktop/node/289'>Easy GTK binary compatibility</a></dt>

 <dd>
  <p>This blog article shows how to use Zero Install to compile your program against older
 versions of library headers than are the default on your system. Binaries created this way
 work on a wider range of systems (all systems with a GTK version newer than the headers). Also,
 since they download the required headers automatically, users don't need to have the headers
 already on their system in order to compile your program.</p>
 <p>
 The binaries produced this way do not depend on Zero Install, so you can use Zero Install as
 part of your build process even if you don't distribute the resulting binaries that way.
 </p>
 </dd>

 <dt><a href='http://www.brucalipto.org/docs/injector_en.html'>brucalipto.org's packaging guide</a></dt>
 <dd>
  <p>
  Piero shows how to package software for Zero Install, using subversion as an example.
  </p>
 </dd>
</dl>

<p>
If you're looking for information about the <b>old</b> filesystem-based
version of Zero Install, see <a href='filesystem.html'>The /uri/0install
filesystem</a>.
</p>

</html>
