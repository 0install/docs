<?xml version='1.0' encoding='utf-8'?>
<html lang="en">

<h2>Releases with source and binary packages</h2>

<p>
<a href='0release.html'>0release</a> can be used to create releases of your software from a version control system.
The main page described how to make releases of programs which are architecture-independent (e.g. programs written
in Python) where a single package is produced. This page explains what happens for programs which must be compiled
for different architectures (e.g. C programs).
</p>

<p>
The extended release process looks like this:
</p>

<p>
<img src='UML/release-process-binaries.png' width='515' height='655' alt='The release process with binary packages'/>
</p>

<p>TODO: 0release doesn't currently unit-test the binaries it produces</p>

<!--
<p>
The main complication here is that compiling the binaries may require sending
the release candidate source package to other machines (real or virtual) and
then collecting the resulting packages.
</p>
-->

<p>
After generating an archive and a feed for the source code release candidate (where <b>arch='*-src'</b>), 0release also
compiles a binary for the host system (using <a href='0compile.html'>0compile</a>). It uploads both the source and binary
archive and publishes both in the Zero Install feed.
</p>

<p>
For an example of a simple binary package that works this way, have a look at the
<a href='http://repo.or.cz/w/0release.git?a=blob;f=tests/c-prog.tgz;h=ae1f06864c70f65fdef5a00065fb82eec809d6dc;hb=a7bce06b6494407b2d80124c65f13493e3b44378'>c-prog.tgz</a> package in 0release's tests directory:
</p>

<pre>
$ <b>tar xzf c-prog.tgz</b>
$ <b>mkdir release-c-prog</b>
$ <b>cd release-c-prog</b>
$ <b>0launch http://0install.net/2007/interfaces/0release.xml ../c-prog/c-prog.xml</b>
</pre>

<h2>Compiling on multiple systems</h2>
  
<p>
  To build binaries for multiple architectures, you'll need to create a configuration file listing the available <i>builders</i>.
  0release uses the <a href='http://www.freedesktop.org/wiki/Specifications/basedir-spec'>Base Directory Specification</a> to find
  its configuration files; with the default settings, you need to create the file <b>~/.config/0install.net/0release/builders.conf</b>.
</p>

<p>
  The <b>builders.conf</b> file has a [global] section listing the builders to use, followed by one section for each builder. Each builder can have three commands
  specified: one to start the builder (optional), one the actually do the build, and one to shutdown the builder (optional). Here is an example configuration:
</p>

<pre>
[global]
builders = host, freebsd

[builder-host]
build = 0launch --not-before 0.10 http://0install.net/2007/interfaces/0release.xml --build-slave "$@"

[builder-freebsd]
start = VBoxManage startvm "FreeBSD" --type vrdp
build = build-on-vm 2222 "$@"
stop = VBoxManage controlvm "FreeBSD" savestate
</pre>

<p>
  This defines two builders named "host" and "freebsd". "host" simply runs 0release in build-slave mode on the local machine (in fact, you don't need to specify this section
  because it exists by default). The "freebsd" builder runs some other scripts which bring up a VirtualBox virtual machine, submit the build to it, and then shut it down again.
</p>

<p>
  The reason for having separate start/build/stop commands is simply to make error handling easier. If the <b>start</b> command succeeds then the <b>stop</b> command will always be run, even if the <b>build</b>
  command fails. If <b>start</b> fails, the other commands are not run.
</p>

<h3>The build command</h3>

<p>
  The build command is called with four arguments:
</p>

<ol>
  <li>The name of the generated XML feed file for the source release candidate.</li>
  <li>The name of the generated source archive.</li>
  <li>The URL of the directory where the release will be hosted eventually.</li>
  <li>The name of the binary feed to be generated.</li>
</ol>

<p>
  The three names are of files in the current directory without the directory part; this simplifies the copying. The build command must do three things:
</p>

<ol>
  <li>Copy the input files (the source feed and archive) to the build system.</li>
  <li>Invoke "0release --build-slave" to do the build.</li>
  <li>Copy the results (the binary feed and archive) back to the local system.</li>
</ol>

<p>
  For example, the <b>build-on-vm</b> script might look like this:
</p>

<pre>
#!/bin/sh -e
PORT="$1"
shift
LOGIN="builder@localhost"

while true; do
  ssh -p $PORT $LOGIN 'rm -rf build; mkdir build' &amp;&amp; break
  echo Waiting for VM to be ready...
  sleep 2
done

ssh -p $PORT $LOGIN 'ntpdate your.server.here'  # Avoid clock-skew problems

scp -P $PORT "$1" "$2" ${LOGIN}:build/
ssh -p $PORT $LOGIN 'cd build &amp;&amp; 0launch -v --not-before 0.10 \
  http://0install.net/2007/interfaces/0release.xml -v --build-slave "$@"' "$@"
scp -P $PORT "${LOGIN}:build/*" .
</pre>

<p>
  This assumes that the virtual machine is listening on some port which is forwarded to port 22 in the guest, and has a user named "builder".
</p>

</html>
