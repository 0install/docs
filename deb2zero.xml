<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<h2>deb2zero</h2>

<program name='deb2zero'
	 author='Thomas Leonard'
	 feed='http://0install.net/2008/interfaces/deb2zero.xml'
	 git='http://repo.or.cz/w/deb2zero.git'
	 license='GNU General Public License'/>

<p>
<b>deb2zero</b> takes the URL of a Debian package and publishes it in a Zero Install feed.
</p>

<p>
You can always use <a href='0publish.html'>0publish</a> to publish any tarball, RPM, Deb, Zip
or Autopackage file, but you have to enter the meta-data (name, summary, description, etc)
manually. Since Debian packages already contain this information, it's easier to extract it
and generate the feed automatically. This is what deb2zero does.
</p>

<toc level='h2'/>

<p>
You can download <b>deb2zero</b> and create a short-cut to it in the usual way:
</p>

<pre>$ 0alias deb2zero http://0install.net/2008/interfaces/deb2zero.xml</pre>


<h2>Creating the feed</h2>

<p>Select the Debian package you want to publish. You need the full URL.
Since packages sometimes move, you should probably make a copy of it on
your own server and use that URL, but for this demo we'll link directly
to Debian's copy of the program (GQView for this tutorial):
</p>

<pre>$ deb2zero http://ftp.uk.debian.org/debian/pool/main/g/gqview/gqview_2.0.1-1_i386.deb GQView.xml</pre>

<p>
This downloads the Debian package to the current directory and creates a feed called <b>GQView.xml</b>.
</p>

<p>
Note: deb2zero guesses some things (such as which binary to run by default if
the package contains several) so you should check the feed file manually and
edit if required. In this case, no editing is needed.
</p>

<h2>Testing</h2>

<p>
When testing, you should make sure that the program isn't already installed (e.g.
by <b>apt-get</b>). Some programs contain hard-coded paths, and will therefore
appear to work correctly... but only on a system which already has the program!
Also, Zero Install may select the natively-installed version, depending on your
policy settings.
</p>

<p>
To test the feed:
</p>

<pre>$ 0launch -g ./GQView.xml</pre>

<p>
Note that deb2zero added the downloaded package's contents to the Zero Install
cache, so it will show up as being already cached.
</p>

<h2>Publishing</h2>

<p>
If you want to publish the feed so that others can use it, you'll also need to
sign it. This is very easy: load it into 0publish-gui and select or create a
key using the "Publishing" tab. You'll also need to pick a URL for the feed itself.
See the <a href='http://0install.net/injector-packagers.html'>packaging tutorial</a> for details.
</p>

<h2>Adding more versions</h2>

<p>
To add a new version to your feed later, just run the command again with the new URL:
</p>

<pre>
$ deb2zero http://.../new-version.deb GQView.xml
</pre>

<h2>Using a Packages file</h2>

<p>
As an alternative to specifying the URL of the Debian package directly, you can
download an index file to the current directory and then just give the package
name. e.g. to use the current Debian/stable package for the amd64 (x86_64) architecture:
</p>

<pre>
$ wget ftp://ftp.debian.org/debian/dists/stable/main/binary-amd64/Packages.bz2
$ bunzip2 Packages.bz2
$ deb2zero gqview GQView.xml
</pre>

<h2>Security notes</h2>

<p>
deb2zero does not verify anything about the archive it downloads when you use a
URL. However, if a file with the same name already exists in the current
directory, it uses that instead. Therefore, if you have a secure way of getting
the .deb file (e.g. because you created it), use that.
</p>

<p>
deb2zero calculates the digest of the package and stores it in the feed it creates, so anyone using
the feed can at least verify that the package they download is identical to the one you used.
</p>

<p>
If you use a Packages index file, then it does check the digest against the one in
the Packages file.
</p>

</html>
